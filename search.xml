<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GoLang</title>
    <url>/2022/07/09/GoLang/</url>
    <content><![CDATA[<h1 id="GoLang"><a href="#GoLang" class="headerlink" title="GoLang"></a>GoLang</h1><h2 id="一、特点"><a href="#一、特点" class="headerlink" title="一、特点"></a>一、特点</h2><p>既有静态语言的安全和性能，又有动态语言开发和维护的高效率</p>
<p>Go &#x3D; C + Python</p>
<span id="more"></span>

<p>1、Go的每一个文件都要属于一个包</p>
<p>2、垃圾回收机制，内存自动回收</p>
<p>3、天然支持并发，可进行大并发处理，高效利用多核</p>
<p>4、管道通信机制，可实现不同goroute间的通信</p>
<p>5、函数可以返回多个值</p>
<p>6、切片slice：动态数组，类似于Java的集合	</p>
<p>​	  延时执行：defer</p>
<h2 id="二、Go快速开发入门"><a href="#二、Go快速开发入门" class="headerlink" title="二、Go快速开发入门"></a>二、Go快速开发入门</h2><h4 id="1、hello-word"><a href="#1、hello-word" class="headerlink" title="1、hello word"></a>1、hello word</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入fmt包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//func:关键字，表示一个函数</span></span><br><span class="line"><span class="comment">//main:主函数，表示程序的入口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//调用fmt中的输出函数</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：Go中的编译命令</p>
<ol>
<li>build xxx.go:生成可执行文件.exe</li>
<li>xxx.exe:执行可执行文件</li>
<li>go run:直接运行xxx.go程序，一般仍先编译后执行</li>
<li>go build -o bin&#x2F;my.exe go&#x2F;mian：将go&#x2F;main下的文件编译为my.exe 放在gopath的bin目录下</li>
</ol>
<h4 id="2、Go执行流程分析"><a href="#2、Go执行流程分析" class="headerlink" title="2、Go执行流程分析"></a>2、Go执行流程分析</h4><p>1、先编译后执行</p>
<p>.go文件 –&gt;可执行文件 –&gt;运行结果</p>
<p>2、使用go run</p>
<p>区别：1、编译后的可执行文件，可以拷贝到没有go开发环境的设备上运行</p>
<p>​			2、编译时会将程序运行所依赖的库文件包含在可执行文件中</p>
<p>3、程序启动流程：</p>
<ol>
<li>按顺序导入所有被main包引用的其他包</li>
<li>如果引用的包引用了其他包，则开始递归执行，但每个包只会导入一次</li>
<li>然后按照相反顺序初始化每个包中的常量和变量，如果包中有init函数，则调用该函数</li>
<li>main函数执行相同流程</li>
</ol>
<h4 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h4><p>1、源文件以.go结尾</p>
<p>2、语句末尾不需要加分号</p>
<p>3、定义的变量或引入的包未被使用，则编译不通过</p>
<p>4、常用转义字符：</p>
<p><code>\t:制表符	\n:换行	\\   \&quot;	   \r:回车,不换行，将回车后的字符从该行起始位置开始输出</code></p>
<h4 id="4、注释"><a href="#4、注释" class="headerlink" title="4、注释"></a>4、注释</h4><p>行注释：<code>\\</code>  块注释：<code>/* */</code></p>
<p>块注释中不允许嵌套</p>
<h2 id="三、基础语法"><a href="#三、基础语法" class="headerlink" title="三、基础语法"></a>三、基础语法</h2><h4 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h4><p>1、声明：</p>
<ol>
<li><p>指定变量数据类型，若不赋值，则使用默认值</p>
</li>
<li><p>不指定数据类型，类型推导</p>
</li>
<li><p>省略var，使用变量名 :&#x3D; 值的方式声明并赋值</p>
</li>
<li><p>多变量声明，使用 var n1, n2, n3 int 的方式赋值</p>
</li>
<li><p>多变量声明，使用 var n1, n2, n3 &#x3D; 1, 1.0, “str”，同时给不同类型赋值</p>
</li>
<li><p>多全局变量声明，var(n1 &#x3D; 1, n2 &#x3D; 1.0)</p>
</li>
</ol>
<p>默认值：int &#x3D; 0，string &#x3D; “”, float &#x3D; 0，bool &#x3D; false ，引用类型 &#x3D; nil</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>(</span><br><span class="line">    n1 = <span class="number">1</span></span><br><span class="line">    n2 = <span class="number">1.0</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="type">int</span> </span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line">    i := <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> n1, n2, n3 <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> n1, n2, n3 <span class="type">int</span> = <span class="number">1</span>, <span class="number">1.0</span>, <span class="string">&quot;str&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、数据类型</p>
<p>基本数据类型：</p>
<ol>
<li><p>整数类型：int(根据系统不同而不同,64位系统为int64), int8,int 16, int32 (rune， 表示一个Unicode码点，可以用来存汉字), int64, uint, uint8 (byte), uint 16, uint32, uint64, byte，uintptr的长度被设定为储存一个指针</p>
<p>8进制以0开头，16进制以0x开头，都可以存在整数类型中</p>
</li>
<li><p>浮点类型：float32（小数点后7位）, float64（小数点后15位），建议使用float64</p>
</li>
<li><p>字符型：没有专门类型，用byte保存单个字母（不能存汉字）</p>
</li>
<li><p>布尔型：不可用0,1替换</p>
</li>
<li><p>字符串：string，其本质是一个切片</p>
</li>
<li><p>复数：complex64（32位虚数+32位实数），complex128</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = complex63 = <span class="number">5</span> + <span class="number">32i</span></span><br><span class="line">c = <span class="built_in">complex</span>(<span class="number">1.9</span>, <span class="number">3.5</span>)</span><br><span class="line"><span class="built_in">real</span>(c) <span class="comment">//获取实部</span></span><br><span class="line"><span class="built_in">imag</span>(c) <span class="comment">//获取虚部</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>派生数据类型：</p>
<ol>
<li>指针</li>
<li>数组</li>
<li>结构体：类似于Class</li>
<li>管道：并发</li>
<li>函数</li>
<li>切片：类似于动态数组</li>
<li>接口</li>
<li>map</li>
</ol>
<p>3、基本数据类型使用注意</p>
<ol>
<li>%T可以打印数据类型，unsafe.Sizeof( ) 可以返回变量所占字节数</li>
<li>整形默认使用int；浮点型默认使用float64，科学计数法314E-2</li>
<li>byte用于保存单个字符，码值大于255的，可以用int保存，用格式化%c输出，运算时字符当做整数进行运算</li>
<li>字符串赋值后不可再更改；用双引号赋值的字符串会识别内部的转义字符，反引号赋值的字符串不会识别内部转义字符；字符串拼接用+，多行拼接时，+留在上一行</li>
<li>基本数据类型默认值：0，false，””</li>
<li>加上一个超过范围的常量，则编译不通过</li>
</ol>
<p>4、基本数据类型的转换</p>
<ol>
<li>基本数据类型之间只能显示转换</li>
<li>语法：T(v), T代表转换后的数据类型，v代表被转换的变量</li>
<li>某个数据类型加上一个常数(包括浮点数)后，数据类型不变</li>
</ol>
<p>5、基本数据转为string</p>
<ol>
<li>fmt.Sprintf(“%参数”, 表达式)：将表达式对应的数据类型转换为字符串并返回，其中”%参数”与表达式原有的数据类型对应，例如int对应%d</li>
<li>strconv包函数：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将i转换成base对应进制的字符串</span></span><br><span class="line">FormatInt(i <span class="type">int64</span>, base <span class="type">int</span>) <span class="type">string</span> </span><br><span class="line"><span class="comment">//将f按照fmt的格式（f）保留prec个小数位转换成字符串，bitSize表示转为f按照哪种精度作为参数，会根据32或64进行取舍</span></span><br><span class="line">FormatFloat(f <span class="type">float64</span>, fmt <span class="type">byte</span>, prec, bitSize <span class="type">int</span>) <span class="type">string</span></span><br><span class="line"><span class="comment">//将bool转为字符串</span></span><br><span class="line">FormatBool(b <span class="type">bool</span>) <span class="type">string</span></span><br><span class="line"><span class="comment">//将int转为字符串</span></span><br><span class="line">Itoa(i <span class="type">int</span>) <span class="type">string</span></span><br></pre></td></tr></table></figure>

<p>6、str转基本数据类型</p>
<ol>
<li>strconv包函数：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将字符串转为bool，本身返回两个值，用&quot;b, _&quot;的方式接收返回值，并忽略error</span></span><br><span class="line">ParseBool(str <span class="type">string</span>) (value <span class="type">bool</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="comment">//将字符串转为int，bitSize大于等于转换后的最小不会溢出的数据类型</span></span><br><span class="line">ParseInt(str <span class="type">string</span>, base <span class="type">int</span>, bitSize <span class="type">int</span>)(i <span class="type">int64</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2、指针"><a href="#2、指针" class="headerlink" title="2、指针"></a>2、指针</h4><p>1、指针变量保存一个地址值，&amp;取变量的地址，<code>*数据类型</code>定义指针的类型，<code>*指针名</code>表示指针指向的值</p>
<p>2、值类型都有对应的指针类型，值类型包括基本数据类型、数组、结构体</p>
<p>3、指针底层为uint64</p>
<p>4、指针不能进行运算，不能获取字面量和常量的地址</p>
<h4 id="3、值类型和引用类型"><a href="#3、值类型和引用类型" class="headerlink" title="3、值类型和引用类型"></a>3、值类型和引用类型</h4><p>1、值类型：基本数据类型、数组、结构体</p>
<p>直接存储值，内存在栈分配</p>
<p>2、引用类型：指针、切片、map、管道、接口</p>
<p>变量储存地址，真正储存数据的内存在堆</p>
<p>在逃逸分析中，两者存储的位置可能发生改变</p>
<h4 id="4、标识符命名规范"><a href="#4、标识符命名规范" class="headerlink" title="4、标识符命名规范"></a>4、标识符命名规范</h4><p>由英文字母、数字和_组成。数字不可作为开头。严格区分大小写。不能有空格。下划线在Go中也是一个特殊字符称为空标识符，可以代表其他任何标识符，但是对应的值会被忽略，仅作为占位符使用，不作为标识符使用。不能以关键字保留字作为标识符。用基本数据类型也可以作为标识符，但是不建议使用。采用驼峰命名法。标识符首字母大写则可以被其他包访问(公有)，首字母小写则只能在本包使用(私有)</p>
<p>基本数据类型和系统内嵌函数属于预定义标识符</p>
<h4 id="5、运算符"><a href="#5、运算符" class="headerlink" title="5、运算符"></a>5、运算符</h4><p>1、算数运算符</p>
<p>加减乘除、正负号、取余、自增自减、字符串相加</p>
<p>取余：a % b &#x3D; a - a &#x2F; b * b</p>
<p>自增自减：只有a++或a–，且只能够单独使用，不能有a++ &gt; b，不能用其赋值</p>
<p>2、赋值运算符</p>
<p>&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</p>
<p>&lt;&lt;&#x3D;、&gt;&gt;&#x3D;、&amp;&#x3D;、^&#x3D;、|&#x3D;</p>
<p>等号左侧只能为变量，右侧可以为表达式、函数</p>
<p>3、比较运算符</p>
<p>结果为bool类型</p>
<p>4、逻辑运算符</p>
<p>短路与&amp;&amp;短路或||（前者条件判断，后者条件不一定会判断）</p>
<p>5、位运算符</p>
<p>&amp; | ^ !</p>
<p>6、其他运算符</p>
<p>&amp;：取地址、*：取指针变量</p>
<p>7、标准输入输出格式（具体输入输出格式参考文档）</p>
<p>%v：值的默认形式、%+v：类似前者，但输出结构体时会输出字段名、%#v：值的Go语法表示、%T：值的类型的Go语法表示、%%：百分号、%t布尔值、%b：二进制、%c：值对应的UniCode码值、%d：十进制、%o：八进制、%q：该值对应的单引号括住的字面值、%x：十六进制、%X：十六进制，但使用大写字符、%U：Unicode格式、%s字符串、%f：小数</p>
<h4 id="6、从键盘获取输入"><a href="#6、从键盘获取输入" class="headerlink" title="6、从键盘获取输入"></a>6、从键盘获取输入</h4><p>fmt.Scanln(a …interface{})(n int, err error)：获取一行的输入</p>
<p>fmt.Scanf(format string, a …interface{})(n int, err error)：标准输入,根据format格式读入</p>
<p>a参数为需要写入参数的地址值</p>
<h4 id="7、位运算"><a href="#7、位运算" class="headerlink" title="7、位运算"></a>7、位运算</h4><p>只能用于整数类型，且两者位数等长</p>
<p>%b表示位的格式化标识符</p>
<p>按位与&amp;：两位为1结果为1</p>
<p>按位或|：一位1结果为1，两位为0结果为0</p>
<p>按位异或^：一位1一位0结果为1，否则为0</p>
<h4 id="8、流程控制"><a href="#8、流程控制" class="headerlink" title="8、流程控制"></a>8、流程控制</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;&#125;		<span class="comment">//循环变量初始化和迭代写在其他位置</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">for</span> index, val := <span class="keyword">range</span> str<span class="comment">//类似增强for循环，用于循环字符串和数组，index为索引，val为每个索引的值，字符含中文只能用该方式</span></span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">0</span> &#123;&#125;</span><br><span class="line"><span class="keyword">switch</span> num &#123;		<span class="comment">//case后的数据类型必须与num一致，num也可以不需要，case后添加判断条件，类似于if-else分支</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>:		<span class="comment">//默认不需要break</span></span><br><span class="line">    <span class="keyword">fallthrough</span>		<span class="comment">//穿透，会继续执行下一个case</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有while，dowhile，用for &#123;&#125;加if-else的方式实现</span></span><br><span class="line"><span class="keyword">break</span>		<span class="comment">//终止for或者跳出break，可以指定标签，使break跳出指定循环</span></span><br><span class="line"><span class="keyword">continue</span>   <span class="comment">//结束本次循环，继续下一次循环</span></span><br><span class="line"><span class="keyword">goto</span> label		<span class="comment">//无条件跳转到指定的位置，一般不使用</span></span><br><span class="line"><span class="keyword">return</span>		<span class="comment">//结束方法</span></span><br></pre></td></tr></table></figure>

<h4 id="九、常量"><a href="#九、常量" class="headerlink" title="九、常量"></a>九、常量</h4><p>使用const关键字定义，常量只可以储存布尔型、数字型和字符串型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">const</span> PI <span class="type">float64</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<p>常量的值必须在编译时期就可以被使用，自定义函数不可以为常量赋值，内置函数可以</p>
<p>没有指定类型的常量被使用时，会根据使用时的上下文获取相关类型</p>
<p>数字型的常量时没有大小和符号的，并且使用任意精度都不会溢出</p>
<p>iota：</p>
<p>当iota第一次被使用时等于0，在新的一行被使用时，它的值都会自动加一</p>
<p>const中没有赋值的常量默认会应用上一行的赋值表达式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span>	<span class="comment">//a = 0</span></span><br><span class="line">    b			<span class="comment">//b = 1</span></span><br><span class="line">    c			<span class="comment">//c = 2</span></span><br><span class="line">    d = <span class="number">5</span>		<span class="comment">//d = 5</span></span><br><span class="line">    e			<span class="comment">//e = 5</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>一行赋值两个变量，iota只会增加一次，不会因为使用了两次而增加两次</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a, b = <span class="literal">iota</span> + <span class="number">1</span>, <span class="literal">iota</span> + <span class="number">2</span>	<span class="comment">//a = 1, b = 2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>iota也可以用于表达式中，当遇到新的常量块或者常量声明时，iota将置零，即在新的const中iota将被置零</p>
<h4 id="十、字符类型和字符串类型"><a href="#十、字符类型和字符串类型" class="headerlink" title="十、字符类型和字符串类型"></a>十、字符类型和字符串类型</h4><p>字符类型并不是go中的一个类型，字符只是整数的特殊用法</p>
<p>对于ASCII编码的字符使用byte类型，byte是uint8的别名</p>
<p>对于UTF-8编码，使用runes类型，runes是int32的别名</p>
<p>%c表示字符，%U输出格式为U+hhhh的字符串</p>
<p>同时Unicode包中包含一些对测试字符有帮助的函数</p>
<ol>
<li>unicode.IsLetter()	判断是否为字母</li>
<li>unicode.IsDigit()       判断是否为数字</li>
<li>unicode.IsSpace()     判断是否为空白符号</li>
</ol>
<p>字符串类型是UTF-8字符的一个序列，可以按照字符类型选取每个字符合适的存储空间，值类型且值不可变，可以通过索引获取对应字节的值，获取某个字节的地址时非法的</p>
<p>使用for-range完成为Unicode字符的遍历操作</p>
<h2 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h2><h4 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h4><p>完成某一功能的指令集</p>
<p>基本语法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(形参列表)</span></span> (返回值列表) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>go函数支持返回多个值：</p>
<ol>
<li>当返回多个值时，希望忽略某个值，可以用_占位符忽略</li>
<li>如果返回值只有一个，返回值列表可以不写 ( )</li>
</ol>
<p>go函数不支持重载</p>
<p>go函数本身也是一种数据类型，可以赋值给一个变量，可以通过该变量调用函数，也可以将该函数作为形参传递使用形参（形参的命名方式<code>myfunc func(num1 int, num2 int) int</code>)也可以调用该函数，类似于取别名</p>
<p>支持自定义数据类型：<code>type 别名 数据类型</code>，但是两者会被认为是两个不同的数据类型，因为函数也是一种数据类型，因此这个时候的别名等价于一个函数类型</p>
<p>支持对返回值命名（需要使用括号），直接使用return</p>
<p>支持可变形参：<code>fuc sum(num1, args...int) sum int</code>,args是一个切片，通过索引访问值</p>
<h4 id="2、包"><a href="#2、包" class="headerlink" title="2、包"></a>2、包</h4><p>本质创建不同文件夹保存代码，go的每一个文件都要属于一个包，以包的形式管理目录结构</p>
<p>作用：</p>
<ol>
<li>区别同名函数、变量</li>
<li>管理项目结构</li>
<li>控制函数、变量作用域</li>
</ol>
<p>基本使用：</p>
<ol>
<li>打包：package xxx</li>
<li>引入：import “包的路径”</li>
</ol>
<p>包中的内容标识符首字母大写则可以被其他包访问(公有)，首字母小写则只能在本包使用(私有)</p>
<p>包名通常和go文件所在文件夹的名字相同，首字母小写</p>
<p>引入包的路径默认从环境变量中的gopath中src下开始</p>
<p>包名支持取别名，取别名后原来的包名则无法使用 <code>import util &quot;go/utils&quot;</code></p>
<p>同一个包下不能有相同的函数名和全局变量名</p>
<p>可执行文件的包名必须为main，库文件的包名可以自定义，库文件会编译为.a文件</p>
<h4 id="3、init函数"><a href="#3、init函数" class="headerlink" title="3、init函数"></a>3、init函数</h4><p>每一个源文件都可以包含一个init函数，该函数会在main函数执行前执行</p>
<p>如果文件包含一个全局变量，则执行流程为变量定义-&gt;init-&gt;main</p>
<p>当源文件引入了其他包的库文件，则会先执行库文件的init函数，再执行源文件的init函数</p>
<p>init函数不能被人为调用</p>
<h4 id="4、匿名函数"><a href="#4、匿名函数" class="headerlink" title="4、匿名函数"></a>4、匿名函数</h4><p>定义函数时直接调用，或者将匿名函数赋值给一个变量值，再通过该变量调用匿名函数</p>
<p>全局匿名函数：将匿名函数赋值给一个全局变量</p>
<h4 id="5、闭包"><a href="#5、闭包" class="headerlink" title="5、闭包"></a>5、闭包</h4><p>闭包就是一个函数和与其相关的引用环境组合的一个整体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//累加器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> n <span class="type">int</span> = <span class="number">10</span>				<span class="comment">//n只初始化一次</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		n += x</span><br><span class="line">		<span class="keyword">return</span> n</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该累加器返回一个匿名函数，但是函数引用外部的一个变量，两者构成一个闭包</p>
<p>可以将闭包理解为类，函数理解为方法，变量理解为属性</p>
<p>闭包的关键是理解放回的函数和引用变量间的关系</p>
<p>闭包可以保存上一次该函数调用时的一部分参数值，可以减少代码量增加复用性</p>
<h4 id="6、defer"><a href="#6、defer" class="headerlink" title="6、defer"></a>6、defer</h4><p>在函数执行后，可以使用defer机制及时释放资源</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(n1)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(n2)</span><br><span class="line">    <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行defer语句时，暂时不执行，将defer后的语句独立压入defer栈中，入栈时会将相应的值拷贝同时入栈</p>
<p>当函数执行完成后，在将defer栈中的函数先进后出的执行</p>
<h4 id="7、函数值传递的方式"><a href="#7、函数值传递的方式" class="headerlink" title="7、函数值传递的方式"></a>7、函数值传递的方式</h4><p>按值传递、按引用传递</p>
<p>值类型：int、float、bool、string、数组、结构体</p>
<p>引用类型：指针、slice切片、map、管道chan、interface</p>
<h4 id="8、变量作用域"><a href="#8、变量作用域" class="headerlink" title="8、变量作用域"></a>8、变量作用域</h4><p>函数内部定义的变量，作用域在函数内</p>
<p>函数外部定义的变量，作用域在全局，首字母大写整个程序有效，首字母小写，整个包有效</p>
<p>代码块中定义的变量作用域在代码块</p>
<h4 id="9、字符串系统函数"><a href="#9、字符串系统函数" class="headerlink" title="9、字符串系统函数"></a>9、字符串系统函数</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计字符串长度，按字节,中文有三个字节</span></span><br><span class="line"><span class="built_in">len</span>(str)</span><br><span class="line"><span class="comment">//字符串遍历，同时处理中文问题,转成一个切片</span></span><br><span class="line">r := []<span class="type">rune</span>(str)</span><br><span class="line"><span class="comment">//字符串转整数</span></span><br><span class="line">n, err := strconv.Atoi(<span class="string">&quot;12&quot;</span>)</span><br><span class="line"><span class="comment">//整数转字符串</span></span><br><span class="line">str = strconv.Itoa(<span class="number">12345</span>)</span><br><span class="line"><span class="comment">//字符串转[]byte</span></span><br><span class="line"><span class="keyword">var</span> bytes = []<span class="type">byte</span>(<span class="string">&quot;12345&quot;</span>)</span><br><span class="line"><span class="comment">//[]byte转字符串</span></span><br><span class="line">str = <span class="type">string</span>([]<span class="type">byte</span>&#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;)</span><br><span class="line"><span class="comment">//十进制转指定进制</span></span><br><span class="line">str = strconv.FormatInt(<span class="number">123</span>, x)</span><br><span class="line"><span class="comment">//判断子串是否存在</span></span><br><span class="line">strings.Contains(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment">//统计子串个数</span></span><br><span class="line">strings.Count(<span class="string">&quot;abcabc&quot;</span>, <span class="string">&quot;abc&quot;</span>)</span><br><span class="line"><span class="comment">//不区分大小写的比较</span></span><br><span class="line">strings.EqualFold(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;Abc&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>更多函数参考官方文档</p>
<h4 id="10、日期时间函数"><a href="#10、日期时间函数" class="headerlink" title="10、日期时间函数"></a>10、日期时间函数</h4><p>导入time包</p>
<p>time.Time类型用于表示时间，该类型可以获取年月日等具体信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前时间   </span></span><br><span class="line">now := time.Now()</span><br><span class="line"><span class="comment">//格式化时间，格式化函数中的字符串中的各个数字是固定的，但各个数字间可以自由组合，数字间的间隔符也可以自由选择</span></span><br><span class="line">now.Format(<span class="string">&quot;2006/01/02/ 15:04:04&quot;</span>)</span><br><span class="line"><span class="comment">//时间常量</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    Nanosecond Duration = <span class="number">1</span> <span class="comment">//纳秒</span></span><br><span class="line">    Microsecond = <span class="number">1000</span> * Nanosecond <span class="comment">//微秒</span></span><br><span class="line">    Millisecond = <span class="number">1000</span> * Microsecond<span class="comment">//毫秒</span></span><br><span class="line">    Second = <span class="number">1000</span> * Millisecond<span class="comment">//秒</span></span><br><span class="line">    Minute = <span class="number">60</span> * Second <span class="comment">//分钟</span></span><br><span class="line">    Hour = <span class="number">60</span> * Minute	 <span class="comment">//小时</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取时间戳</span></span><br><span class="line">time.Unix()		<span class="comment">//秒</span></span><br><span class="line">time.UnixNano() <span class="comment">//纳秒</span></span><br></pre></td></tr></table></figure>

<h4 id="11、内置函数-buildin"><a href="#11、内置函数-buildin" class="headerlink" title="11、内置函数(buildin)"></a>11、内置函数(buildin)</h4><p>内置的函数，可以直接使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>() <span class="comment">//求数组、切片、map等结构的长度</span></span><br><span class="line"><span class="built_in">new</span>(<span class="type">int</span>)		<span class="comment">//主要分配值类型内存，返回指针</span></span><br><span class="line"><span class="built_in">make</span>()	<span class="comment">//主要分配引用类型内存</span></span><br><span class="line"><span class="built_in">cap</span>()	<span class="comment">//返回数组切片等结构的容量</span></span><br><span class="line"><span class="built_in">append</span>() <span class="comment">//动态给切片追加长度</span></span><br></pre></td></tr></table></figure>

<h4 id="12、错误处理"><a href="#12、错误处理" class="headerlink" title="12、错误处理"></a>12、错误处理</h4><p>go中抛出一个panic异常，然后再defer中通过recover（内置函数）捕获异常，然后正常处理</p>
<p>defer只能在defer修饰的函数中使用，用于获取错误值，程序正常执行则会返回nil</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">err</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		err := <span class="built_in">recover</span>()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">//捕获到异常</span></span><br><span class="line">			fmt.Println(<span class="string">&quot;error = &quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	num1 := <span class="number">1</span></span><br><span class="line">	num2 := <span class="number">0</span></span><br><span class="line">	i := num1 / num2</span><br><span class="line">	fmt.Print(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义错误</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">err</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := errors.New(<span class="string">&quot;致命错误&quot;</span>)	<span class="comment">//生成错误</span></span><br><span class="line">	<span class="built_in">panic</span>(err)						<span class="comment">//捕获错误并终止程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、数组和切片"><a href="#五、数组和切片" class="headerlink" title="五、数组和切片"></a>五、数组和切片</h2><h4 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h4><p>使用索引取值赋值，元素具有默认值，且数组为值类型</p>
<p>数组的地址为首元素地址，每个元素地址间隔根据数组类型决定</p>
<p>初始化方式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> user = [<span class="number">3</span>]<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> user = [...]<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> user = [<span class="number">3</span>]<span class="type">int</span> &#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">0</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">8</span>&#125; <span class="comment">//指定元素的索引赋值</span></span><br></pre></td></tr></table></figure>

<p>遍历：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常规for循环 略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for-range,index为下标，value为对应值，二者均为循环内部的局部变量，两者的名字也可以自定义</span></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> user &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ol>
<li><p>数组定长定类型</p>
</li>
<li><p>var user []int 此时不是一个数组称为切片</p>
</li>
<li><p>元素可以为值类型，也可以为引用类型</p>
</li>
<li><p>创建后没有赋值会有默认值</p>
</li>
<li><p>数组为值类型，作为参数传递时会拷贝所有的值，拷贝后的数组和原数组互不影响</p>
</li>
<li><p>在函数中修改数组需要使用数组的指针</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(arr *[3]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	(*arr)[<span class="number">0</span>]++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>长度也是数组的一部分[3]arr和[4]arr、[]arr不是同一种数据类型</p>
</li>
</ol>
<h4 id="2、切片slice"><a href="#2、切片slice" class="headerlink" title="2、切片slice"></a>2、切片slice</h4><p>切片是对数组的引用，修改切片元素会修改原数组，切片的使用与数组相似，遍历、访问、求长度方法相同，切片是一个动态数组，其本身存在容量即最大可以存放多少元素，引用类型遵循引用传递</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = []<span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> slice = user[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">//表示存在一个user数组，slice引用user的索引从1到3的部分（左闭右开）</span></span><br><span class="line"><span class="built_in">cap</span>(slice)	<span class="comment">//返回切片的容量，如果切片取了数组中间的一部分，则其容量为首元素到原数组末尾的部分，长度为其引用的部分</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>&#125;</span><br><span class="line">	slice := arr[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">	<span class="built_in">println</span>(<span class="built_in">cap</span>(slice))		<span class="comment">//容量为5</span></span><br><span class="line">	<span class="built_in">println</span>(<span class="built_in">len</span>(slice))		<span class="comment">//长度为2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>切片底层原理：底层可以理解为为一个结构体，分为三个部分，第一个部分为切片首元素的地址，第二部分存放切片的长度，第三部分存放容量</p>
<p>切片的三种使用方式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice = user[<span class="number">1</span>:<span class="number">3</span>]					<span class="comment">//切片取了数组中间的一部分，则其容量为首元素到原数组末尾的部分，长度为其引用的部分</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="type">int</span> = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">4</span>, <span class="number">10</span>)	<span class="comment">//分配切片的数据类型、长度、容量</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="type">int</span> = []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;		<span class="comment">//此时长度和容量相等</span></span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ol>
<li>切片使用时仍不能越界</li>
<li>切片可以继续切片，其底层数组共享同一块储存空间</li>
</ol>
<p>append操作：内置函数，对切片动态增加</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">1</span>)   <span class="comment">//可以一次追加多个数据或者追加一个切片</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, slice...)</span><br></pre></td></tr></table></figure>

<p>切片append操作本质是对底层数组扩容，底层创建一个新的数组，将原来的值拷贝到新数组中，将新的slice引用给对应的切片</p>
<p>如果一个切片是对某个数组的引用，当切片需要扩容后，切片此时引用的数组和原数组将不再是同一个数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> slice = arr[<span class="number">2</span>:]</span><br><span class="line">	slice = <span class="built_in">append</span>(slice, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">	slice[<span class="number">0</span>]++			<span class="comment">//此时++只会影响切片的值，原数组的值将不会改变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>copy操作：内置函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> slice = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="built_in">copy</span>(slice, arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只有切片类型才能被copy，如果被复制的切片长度大于原切片，则会根据原切片的长度进行复制</p>
<p>string与slice：string本质就是一个切片其底层为一个byte数组，可以进行切片处理。string是不可变的，需要改变时转成一个[]byte切片，修改切片后重新转回string，如果需要处理中文，将string转为[]rune切片，rune按照字符进行处理</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> str = <span class="string">&quot;西风&quot;</span></span><br><span class="line">	temp := []<span class="type">rune</span>(str)	<span class="comment">//强制类型转换</span></span><br><span class="line">	temp[<span class="number">0</span>] = <span class="string">&#x27;北&#x27;</span></span><br><span class="line">	str = <span class="type">string</span>(temp)</span><br><span class="line">	<span class="built_in">println</span>(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、二维数组"><a href="#3、二维数组" class="headerlink" title="3、二维数组"></a>3、二维数组</h4><p>初始化方式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先声明，再赋值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int</span></span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int</span> &#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接初始化</span></span><br></pre></td></tr></table></figure>

<p>在内存中的布局：第一层数组储存的是第二层数组的指针，第一层地址之差为第二层数组的大小</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">	<span class="keyword">for</span> _, v1 := <span class="keyword">range</span> arr &#123;</span><br><span class="line">		<span class="keyword">for</span> _, v2 := <span class="keyword">range</span> v1 &#123;</span><br><span class="line">			fmt.Print(v2)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、Map"><a href="#六、Map" class="headerlink" title="六、Map"></a>六、Map</h2><h4 id="1、使用-1"><a href="#1、使用-1" class="headerlink" title="1、使用"></a>1、使用</h4><p>key-value键值对，类似于集合</p>
<p>声明方式：map使用前必须make()</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mapTemp = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">10</span>)	<span class="comment">//分配10个键值对，不写默认为一个</span></span><br><span class="line"><span class="keyword">var</span> mapTemp = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;<span class="string">&quot;西方&quot;</span>:<span class="string">&quot;西风&quot;</span>&#125;</span><br><span class="line">mapTemp[<span class="string">&quot;西方&quot;</span>] = <span class="string">&quot;西风&quot;</span>	<span class="comment">//赋值方式</span></span><br><span class="line"><span class="comment">//嵌套map</span></span><br><span class="line"><span class="keyword">var</span> mapTemp = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">mapTemp[<span class="string">&quot;西方&quot;</span>][<span class="string">&quot;西边&quot;</span>] = <span class="string">&quot;西风&quot;</span></span><br></pre></td></tr></table></figure>

<p>map的容量支持自增长</p>
<p>key可以为多种数据类型，一般为int、string。map、slice、func不能做key</p>
<p>value也可以为多种类型，一般为数字、string、map、struct</p>
<p>key具有唯一性,key-value是无序的</p>
<p>map的crud操作：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> mapTemp = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">	mapTemp[<span class="string">&quot;North&quot;</span>] = <span class="string">&quot;NorthWind&quot;</span>		<span class="comment">//增、改,key不存在添加key，key存在修改value</span></span><br><span class="line">	<span class="built_in">delete</span>(mapTemp, <span class="string">&quot;North&quot;</span>)			<span class="comment">//删，key不存在不会执行不会报错，delete为内置函数</span></span><br><span class="line">	value, isFind := mapTemp[<span class="string">&quot;North&quot;</span>]   <span class="comment">//查，如果key存在，isFind为true，否则为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>map的遍历必须使用for-range</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> mapTemp = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">	mapTemp[<span class="string">&quot;North&quot;</span>] = <span class="string">&quot;NorthWind&quot;</span></span><br><span class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> mapTemp &#123;</span><br><span class="line">		fmt.Println(key, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、map切片"><a href="#2、map切片" class="headerlink" title="2、map切片"></a>2、map切片</h4><p>map的个数可以动态变换，相当于存map的切片</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sliceMap = <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">10</span>)	<span class="comment">//切片本身需要make，map使用时也需要make</span></span><br></pre></td></tr></table></figure>

<h4 id="3、map排序"><a href="#3、map排序" class="headerlink" title="3、map排序"></a>3、map排序</h4><p>map默认无序，将map切片，对切片排序，在按key遍历</p>
<h4 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a>4、注意事项</h4><ol>
<li>map为引用类型，向函数内传递指针</li>
<li>map达到容量后会自动进行扩容</li>
<li>map的value常用struct，比map更合适</li>
</ol>
<h2 id="七、面向对象编程"><a href="#七、面向对象编程" class="headerlink" title="七、面向对象编程"></a>七、面向对象编程</h2><p>go支持面向对象编程特性</p>
<p>结构体与其他语言的类的地位相同，基于结构体实现面向对象特性，并简化了诸如构造函数、析构函数、this指针等概念</p>
<p>go仍有面向对象的继承、封装、多态等特性</p>
<h4 id="1、结构体struct"><a href="#1、结构体struct" class="headerlink" title="1、结构体struct"></a>1、结构体struct</h4><p>结构体是值类型</p>
<p>初始化：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">string</span> Name</span><br><span class="line">    <span class="type">int</span> Age</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> person Person</span><br><span class="line">    person.Name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">    person.Age = <span class="number">18</span></span><br><span class="line">    <span class="keyword">var</span> perxon1 = Person &#123;</span><br><span class="line">        <span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> perxon2 *Person = &amp;Person&#123;</span><br><span class="line">        Age : <span class="number">18</span>,</span><br><span class="line">        Name : <span class="string">&quot;Alice&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person3 *Person = <span class="built_in">new</span> (Person)</span><br><span class="line">    (*Person3).Name = <span class="string">&quot;Tony&quot;</span></span><br><span class="line">    Person3.Age = <span class="number">10</span>		<span class="comment">//两种方法都可以</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建对象后，属性有默认值</p>
<p>结构体的所有属性在内存中连续分布</p>
<p>结构体在和其他类型强转时，需要有完全相同的字段即字段名、字段数、字段数据类型</p>
<p>结构体可以使用type进行重命名，重命名后的结构体会区别于原来的结构体，但二者之间可以进行强转</p>
<p>结构体的字段前可加上tag标签，该tag可以通过反射获取，常见的使用场景为序列化和反序列化，类似于给字段起别名</p>
<p>结构体指针在使用时可以将*运算符简化，可以通过指针直接调用属性，即p.Name &#x3D;&#x3D; (*p).Name</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span> <span class="string">`name`</span></span><br><span class="line">	Age  <span class="type">int</span> <span class="string">`age`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> person Person</span><br><span class="line">	person.Name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">	person.Age = <span class="number">18</span></span><br><span class="line">	personStr, err := json.Marshal(person)	<span class="comment">//解析为json</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="type">string</span>(personStr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h4><p>go中方法是作用在指定的数据类型上的，即和指定的数据类型绑定，因此自定义数据类型都可以有方法而不是只局限于结构体，还可以绑定基本数据类型、切片等类型，通常值类型绑定对应的指针</p>
<p>声明：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span> <span class="string">`name`</span></span><br><span class="line">	Age  <span class="type">int</span>    <span class="string">`age`</span></span><br><span class="line">	Sex  <span class="type">string</span> <span class="string">`sex`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> info(sex <span class="type">string</span>) &#123;	</span><br><span class="line">	p.Sex = sex</span><br><span class="line">	fmt.Println(<span class="string">&quot;name&quot;</span>, p.Name)</span><br><span class="line">	fmt.Println(<span class="string">&quot;age&quot;</span>, p.Age)</span><br><span class="line">	fmt.Println(<span class="string">&quot;sex&quot;</span>, p.Sex)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> person Person</span><br><span class="line">	person.Name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">	person.Age = <span class="number">18</span></span><br><span class="line">	person.info(<span class="string">&quot;male&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将info()方法绑定在person结构体上，该方法只能通过Person类型变量调用，形参p是对调用者的值传递，实际上person的Sex属性并没有赋值</p>
<p>想要在方法中修改结构体变量的值就必须使用结构体变量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person *Person)</span></span> info(sex <span class="type">string</span>) &#123;</span><br><span class="line">	person.Sex = sex</span><br><span class="line">	fmt.Println(<span class="string">&quot;name&quot;</span>, person.Name)</span><br><span class="line">	fmt.Println(<span class="string">&quot;age&quot;</span>, person.Age)</span><br><span class="line">	fmt.Println(<span class="string">&quot;sex&quot;</span>, person.Sex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当结构体指针绑定方法后，调用方法时的&amp;运算符可以简化，即(&amp;p).info(“male”) &#x3D;&#x3D; p.info(“male”)</p>
<p>方法首字母大写可以在其他包使用，方法首字母小写只能在本包使用</p>
<p>如果一个类型实现了String() string方法，则使用fmt.Printlen()输出该类型变量时将默认调用该方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person *Person)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	str := fmt.Sprintf(<span class="string">&quot;Name = [%v] Age = [%v] Sex = [%v]&quot;</span>, person.Name, person.Age, person.Sex)</span><br><span class="line">	<span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> person Person</span><br><span class="line">	person.Name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">	person.Age = <span class="number">18</span></span><br><span class="line">	person.info(<span class="string">&quot;male&quot;</span>)</span><br><span class="line">	fmt.Println(&amp;person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、方法的调用和传值机制"><a href="#3、方法的调用和传值机制" class="headerlink" title="3、方法的调用和传值机制"></a>3、方法的调用和传值机制</h4><p>方法调用时会将方法的调用者传入方法，如果调用者是值类型则传递值，如果调用者是引用类型则传递地址</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IntArr []<span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i IntArr)</span></span> Sum() (res <span class="type">int</span>) &#123;</span><br><span class="line">	res = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> i &#123;</span><br><span class="line">		res += v</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时参数传递为一个int切片，将切片按引用传参</p>
<h4 id="4、方法和函数的区别"><a href="#4、方法和函数的区别" class="headerlink" title="4、方法和函数的区别"></a>4、方法和函数的区别</h4><p>1、调用方式不同</p>
<p>2、函数的参数必须严格按照对应的值类型或者引用类型传递</p>
<p>​      方法绑定值类型时可以通过指针调用，反之亦然，但是实际传入参数时，值传递仍然传递值，引用传递仍然传递地址</p>
<h4 id="5、工厂模式"><a href="#5、工厂模式" class="headerlink" title="5、工厂模式"></a>5、工厂模式</h4><p>go中没有构造函数，使用工厂模式构造私有的结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">	Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> (p *person) &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;person&#123;</span><br><span class="line">		Name: name,</span><br><span class="line">		Age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6、get、set方法"><a href="#6、get、set方法" class="headerlink" title="6、get、set方法"></a>6、get、set方法</h4><p>对于结构体中私有的属性，可以实现指针的get、set方法达到获取修改的效果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>, sex <span class="type">string</span>)</span></span> (p *person) &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;person&#123;</span><br><span class="line">		Name: name,</span><br><span class="line">		Age:  age,</span><br><span class="line">		sex:  sex,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span></span> GetSex() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> p.sex</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span></span> SetSex(sex <span class="type">string</span>) &#123;</span><br><span class="line">	p.sex = sex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7、封装"><a href="#7、封装" class="headerlink" title="7、封装"></a>7、封装</h4><p>将字段和对字段的操作封装在一起，程序对外只提供接口访问修改数据</p>
<p>隐藏实现细节，实现数据校验</p>
<p>实现：</p>
<ol>
<li>结构体小写，对数据封装</li>
<li>提供首字母大写的工厂方法、Get方法、Set方法</li>
</ol>
<h4 id="8、继承"><a href="#8、继承" class="headerlink" title="8、继承"></a>8、继承</h4><p>继承解决代码复用问题</p>
<p>当多个结构体存在相同的属性方法时，可以抽象出共同的属性方法到一个匿名结构体中，其他结构只需嵌套一个匿名结构体，即在go中结构体嵌套一个匿名结构体，则这个结构体可以直接方法匿名结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int</span></span><br><span class="line">	sex  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">	person</span><br><span class="line">	score <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span></span> show() &#123;</span><br><span class="line">    fmt.PrintLn(name, age, sex)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>, sex <span class="type">string</span>, score <span class="type">int</span>)</span></span> *student &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;student&#123; <span class="comment">//使用构造函数初始化结构体时，因为内部结构体为匿名，无法使用属性名（person: person&#123;&#125;）的方式赋值</span></span><br><span class="line">		person&#123;</span><br><span class="line">			Name: name,</span><br><span class="line">			Age: age,</span><br><span class="line">			sex: sex,</span><br><span class="line">		&#125;,</span><br><span class="line">		score,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//赋值方式</span></span><br><span class="line">stu := &amp;student&#123;&#125;</span><br><span class="line">stu.person.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">stu.age = <span class="number">18</span></span><br><span class="line">stu1 := &amp;student&#123;</span><br><span class="line">    person&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    score</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法调用方式</span></span><br><span class="line">stu.person.show()</span><br><span class="line">stu.show()</span><br></pre></td></tr></table></figure>

<p>结构体可以使用匿名结构体所有内容，不管首字母大写还是小写</p>
<p>嵌套匿名结构体创建实例时可直接指定各个匿名结构体的值</p>
<p>通过结构体直接访问字段或方法时，会先查看该结构体是否存在其定义，若无，则会去其匿名结构体下寻找，对访问匿名结构体属性方法的过程进行了简化</p>
<p>当匿名结构体和结构体存在相同字段时，将会采用就近原则访问，当需要访问匿名结构体的属性方法时，可以通过增加匿名结构体名的方式访问</p>
<p>如果结构体嵌入了多个匿名结构体，且匿名结构体存在相同的字段方法，则访问时必须加上匿名结构体名</p>
<p>如果结构体嵌入了一个有名结构体，这种方式被称为组合，访问有名结构体的内容时必须加上有名结构体的名字</p>
<p>结构体可以嵌入匿名基本数据类型，使用时直接 .基本数据类型</p>
<p>结构体可以对匿名结构体的方法进行重写</p>
<h4 id="9、多重继承"><a href="#9、多重继承" class="headerlink" title="9、多重继承"></a>9、多重继承</h4><p>一个结构体嵌套多个匿名结构体</p>
<p>匿名结构体中相同的字段名和方法，需要通过匿名结构体类型名区分</p>
<p>尽量不要使用多重继承</p>
<h4 id="10、接口"><a href="#10、接口" class="headerlink" title="10、接口"></a>10、接口</h4><p>go的多态通过接口实现</p>
<p>声明：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span>&#123;</span><br><span class="line">    Start()</span><br><span class="line">    Stop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口可以定义一系列方法且不需要实现，不能包含变量，当自定义类型需要使用时，实现接口中的所有方法即可</p>
<p>go中的接口没有implements关键字，实现所有方法即实现该接口</p>
<p>注意事项：</p>
<ol>
<li>只要是自定义类型都能实现接口，不只是结构体</li>
<li>可以实现多个接口</li>
<li>接口可以继承，实现接口时必须将其继承的方法一起实现</li>
<li>实现了接口的类型可以赋值给以接口为数据类型的变量</li>
<li>interface默认是一个指针即引用类型，没有初始化就输出会输出nil，即以接口为参数的函数，传值时传递的是指针</li>
<li>空接口interface{}没有方法，所有类型都实现了空接口</li>
</ol>
<h4 id="11、接口与继承"><a href="#11、接口与继承" class="headerlink" title="11、接口与继承"></a>11、接口与继承</h4><p>继承：提高代码的复用性和可维护性</p>
<p>接口：设计，提供一种规范，在一定程度上实现代码解耦</p>
<p>当父类实现了某个接口后，子类继承父类后同样实现了该接口</p>
<h4 id="12、多态"><a href="#12、多态" class="headerlink" title="12、多态"></a>12、多态</h4><p>通过接口实现，统一的接口调用不同的具体实现，体现了接口变量的多态性</p>
<ol>
<li>多态参数，只要实现接口，接口变量都能接受对应的实参</li>
<li>多态数组</li>
</ol>
<h4 id="13、类型断言"><a href="#13、类型断言" class="headerlink" title="13、类型断言"></a>13、类型断言</h4><p>接口为一个一般类型，转成具体的类型，需要使用类型断言</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> t <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">a := <span class="number">10</span></span><br><span class="line">t = a</span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span></span><br><span class="line">b, ok = t.(<span class="type">int</span>)	<span class="comment">//类型断言，ok为bool型，用于判断是否转换成功</span></span><br><span class="line">x.(<span class="keyword">type</span>)	<span class="comment">//判断x类型并返回</span></span><br></pre></td></tr></table></figure>

<h4 id="14、type-switch"><a href="#14、type-switch" class="headerlink" title="14、type-switch"></a>14、type-switch</h4><p>接口类型的变量可以使用一种特殊形式的switch，满足对应的类型即执行对应的语句</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> i := t.(<span class="keyword">type</span>) &#123;	<span class="comment">//变量i得到了对应的值和类型</span></span><br><span class="line">	<span class="keyword">case</span> *a:</span><br><span class="line">    <span class="comment">//Todo</span></span><br><span class="line">    <span class="keyword">case</span> *b:</span><br><span class="line">    <span class="comment">//Todo</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">//Todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、文件"><a href="#八、文件" class="headerlink" title="八、文件"></a>八、文件</h2><h4 id="1、读取用户输入"><a href="#1、读取用户输入" class="headerlink" title="1、读取用户输入"></a>1、读取用户输入</h4><p>从键盘读取输入</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Scanln(&amp;str1, &amp;str2)	<span class="comment">//读取一行数据，以空格为界放入不同的变量</span></span><br><span class="line">fmt.Scanf(<span class="string">&quot;%d&quot;</span>, &amp;i)</span><br><span class="line">fmt.Sscan(input, format, %s)	<span class="comment">//以Sscan开始的函数，从input中读入，按照format进行格式化</span></span><br></pre></td></tr></table></figure>

<p>带缓冲的读取：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inputReader *bufio.Reader</span><br><span class="line"><span class="keyword">var</span> input <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line">inputReader = bufio.NewReader(os.stdin)</span><br><span class="line">input, err = inputReader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>创建一个标准输入的读取器，从键盘读取输入，直到遇见指定的字符为止，然后连同指定字符一同放入缓冲区，读取到文件结束时，将会返回读取到的字符串和io.EOF</p>
<h4 id="2、文件读写"><a href="#2、文件读写" class="headerlink" title="2、文件读写"></a>2、文件读写</h4><p>文件使用os.File类型的指针来表示，前面使用过得os.Stdin和os.Stdout都是这种类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">(fileName <span class="type">string</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteFile</span><span class="params">(filename <span class="type">string</span>, data []<span class="type">byte</span>, perm os.FileMode)</span></span> <span class="type">error</span></span><br></pre></td></tr></table></figure>

<p>不带缓冲的读写，文件较小时可以使用，不需要手动关闭文件，os包下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">file, err1 := os.Open(<span class="string">&quot;xxx&quot;</span>)	</span><br><span class="line"><span class="keyword">if</span> err1 != nile &#123;&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    input, err2 := reader.ReaderString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    fmt.Println(input)</span><br><span class="line">    <span class="keyword">if</span> err2 == io.EOF &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先打开一个文件，从当前项目的当前路劲寻找，返回一个<code>*os.File</code>，如果文件不存在或者没有足够的权限会抛出错误。文件正常打开后要延时关闭。接着生成一个读取器Reader，按行读取文件中的内容</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">inputFile := <span class="string">&quot;a.txt&quot;</span></span><br><span class="line">outputFile := <span class="string">&quot;b.txt&quot;</span></span><br><span class="line">input, err := ioutil.ReadFile(inputFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = ioutil.WriteFile(outputFile, input, <span class="number">06444</span>)	<span class="comment">//权限，在Windows操作系统下无效</span></span><br></pre></td></tr></table></figure>

<p>将文件整个读入到一个[]byte，在将其写入另一个文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">file, err1 := os.Open(<span class="string">&quot;xxx&quot;</span>)	</span><br><span class="line"><span class="keyword">if</span> err1 != nile &#123;&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line">n, err := reader.Read(buf)</span><br></pre></td></tr></table></figure>

<p>很多情况下，文件不按照行划分，或者就是一个二进制文件，这种时候需要使用带缓冲的读入。返回错误和读取到的字节数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">outputFile, outputErr := os.OpenFile(<span class="string">&quot;xxx&quot;</span>, os.O_WRONLY | os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">defer</span> outputFile.Close()</span><br><span class="line"></span><br><span class="line">writer := bufio.NewWriter(outputFile)</span><br><span class="line">outputString <span class="comment">//读取文件</span></span><br><span class="line">writer.WriteString(outputString)</span><br><span class="line">writer.Flush()</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果文件较小可以直接写入文件，fmt包中的F开头的函数可以直接写入io.Writer，file实现了writer接口</span></span><br><span class="line">fmt.Fprintf(outputFile, outputString)</span><br></pre></td></tr></table></figure>

<p><code>OpenFile</code>有三个参数，文件名、一个或多个标志、文件权限</p>
<ol>
<li>os.O_RDONLY	只读</li>
<li>os.O_WRONLY    只写</li>
<li>os.O_CREATE      如果不存在则创建</li>
<li>os.O_TRUNC       如果文件存在，则将其清空</li>
<li>os.O_RDWR         可读可写</li>
</ol>
<p>读文件时文件权限可以忽略，写文件时无论unix还是Windows都需要使用0666</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">file, err := os.OpenFile(<span class="string">&quot;file&quot;</span>, os.O_RDWR, <span class="number">0666</span>)</span><br><span class="line">file.WriterString(<span class="string">&quot;xxxx&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>因为file本身实现了Reader和Writer接口，自身即可读写</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断文件或目录是否存在，返回一个描述文件的info</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Stat</span><span class="params">(name <span class="type">string</span>)</span></span>(fi FileInfo, err <span class="type">error</span>)</span><br><span class="line"><span class="comment">//拷贝文件，io包下,返回拷贝的字节数和错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Copy</span><span class="params">(dst Writer, src Reader)</span></span> (written <span class="type">int64</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//p为参数值，name为参数名，value为默认值，usage为参数说明，获取指定命令行参数为&quot;-name&quot;的参数值，</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IntVar</span><span class="params">(p *<span class="type">int</span>, name <span class="type">string</span>, value <span class="type">int</span>, usage <span class="type">string</span>)</span></span></span><br><span class="line"><span class="comment">//解析flag，必须在所有flag注册后，且未使用前解析</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Parse</span><span class="params">()</span></span> </span><br></pre></td></tr></table></figure>

<p>os.Args是一个string类型的切片，用于存储命令行参数</p>
<p>执行可执行文件时，在命令后添加命令行参数，遍历Args即可获取所有参数</p>
<p>flag包解析命令行参数</p>
<h4 id="3、json"><a href="#3、json" class="headerlink" title="3、json"></a>3、json</h4><p>轻量级的一种数据交换格式，在网络传输时，将数据序列化为json，接收到json后将其反序列化回数据，go中的字符串数字对象map结构体均可转换成json</p>
<p>数据格式：{“key1”:”value1”, “key1”:”value2”}</p>
<p>数组使用中括号括起来</p>
<p>json序列化是指将具有key-value结构的数据类型转化成json</p>
<p>结构体、map、切片的序列化：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回v的json编码，解析后将数组强转为字符串，序列化的字段首字母必须大写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure>

<p>结构体在json序列化时，可以在字段后面添加&#96;&#96;一对反引号，写入”json:别名”，在进行序列化时会将json的名字改为反引号里面的别名</p>
<p>反序列化：将json转换为对应的结构</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析json，并将其返回到v指向的结构,v通常传递一个指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="type">byte</span>, v <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span></span><br></pre></td></tr></table></figure>

<h2 id="九、单元测试"><a href="#九、单元测试" class="headerlink" title="九、单元测试"></a>九、单元测试</h2><p>testing测试框架</p>
<p>引入testing包，编写测试样例并将需要测试的文件以xxx_test.go命名，使用go test命令，可以自动执行如下形式的函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestXxx</span><span class="params">(t *testing.T)</span></span>	<span class="comment">//Xxx可以为任何字母数字字符串，但是第一个字母不能小写</span></span><br><span class="line"></span><br><span class="line">t.Fatalf(<span class="string">&quot;预期为%v，结果为%v&quot;</span>, expect, res)		<span class="comment">//函数不正确，调用方法输出日志并终止程序</span></span><br><span class="line">t.Logf(<span class="string">&quot;测试成功&quot;</span>)	<span class="comment">//执行正确，输出日志</span></span><br></pre></td></tr></table></figure>

<p>go test 运行正确不输出日志，错误输出日志</p>
<p>go test -v 无论正确与否均输出日志</p>
<p>测试单个文件</p>
<p>go test cal_test.go cal.go  		&#x2F;&#x2F;需要带上源文件</p>
<p>go test -test.run 测试函数名  &#x2F;&#x2F;测试单个函数</p>
<h2 id="十、Goroutine和Channel"><a href="#十、Goroutine和Channel" class="headerlink" title="十、Goroutine和Channel"></a>十、Goroutine和Channel</h2><h4 id="1、Goroutine-协程"><a href="#1、Goroutine-协程" class="headerlink" title="1、Goroutine 协程"></a>1、Goroutine 协程</h4><p>进程：程序在操作系统中的一次执行过程</p>
<p>线程：进程执行的一个实例，程序执行的最小单元</p>
<p>一个进程可以创建多个线程，线程可以并发执行。</p>
<p>并发：多线程程序在单核上执行</p>
<p>并行：多线程程序在多核上执行</p>
<p>go中的主线程可以启用多个协程，协程就是轻量级的线程</p>
<p>协程特点：</p>
<ol>
<li>独立的栈空间</li>
<li>共享堆空间</li>
<li>由用户控制调度</li>
<li>轻量级线程</li>
</ol>
<p>go的主线程是一个物理态线程直接作用于cpu，协程是逻辑态线程并不基于物理态，一个主线程可以开启上万个协程</p>
<p>使用：开启两个协程</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello golang&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> test()</span><br><span class="line">    <span class="keyword">go</span> test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主线程结束后，即使协程为执行完也会停止执行</p>
<p>go的调度模型：MPG模式</p>
<ol>
<li>M：操作系统主线程</li>
<li>P：协程执行时的上下文环境</li>
<li>G：协程，多个协程将形成队列</li>
</ol>
<p>运行状态一：多个线程并行或并发执行，每个进程下都有自己的协程</p>
<p>运行状态二：当一个线程阻塞时，会拉起另外一个线程（或从线程池取出），将阻塞线程下的协程挂在新的线程下执行</p>
<p>线程安全问题：多个协程同时操作同一块数据时可能产生线程安全问题，使用sync包下的lock进行加锁</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">lock sync.Mutex	<span class="comment">//全局变量</span></span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line">lock.UnLock()</span><br></pre></td></tr></table></figure>

<p>WaitGroup实现协程完成，当所有协程完成后，主线程才会被放行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wp sync.WaitGroup</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    wp.Done	<span class="comment">//或者wp.add(-1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++  &#123;</span><br><span class="line">        wp.add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> hello()</span><br><span class="line">    &#125;</span><br><span class="line">    wp.wait</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、Channel-管道"><a href="#2、Channel-管道" class="headerlink" title="2、Channel 管道"></a>2、Channel 管道</h4><p>有些时候，不同协程之间的通信，依靠全局变量互斥锁解决时不能很好的解决问题</p>
<ol>
<li>难以确定主线程休眠等待的时间</li>
<li>通过全局变量加锁的机制不利于多个协程对全局变量的读写操作</li>
</ol>
<p>channel的本质是一个队列，本身是线程安全的，多个Goroutine访问时不需要加锁，有类型，string类型的channel只能存放string数据，管道中存在多态机制，注意类型断言</p>
<p>声明：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> intChan <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">intChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)		<span class="comment">//有缓冲管道，长度不能自增长</span></span><br><span class="line">intChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)		<span class="comment">//无缓冲管道</span></span><br></pre></td></tr></table></figure>

<p>有缓冲通道：异步通信，缓存满载或变空之前管道都不会阻塞</p>
<p>无缓冲通道：同步通信，放入数据不取走会被阻塞，必须在协程中使用</p>
<p>channel本身是引用数据类型，且需要make后才能写入数据</p>
<p>使用 </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写入</span></span><br><span class="line">intChan &lt;- <span class="number">10</span></span><br><span class="line">intChan &lt;- num</span><br><span class="line"><span class="comment">//取出</span></span><br><span class="line">num, ok = &lt;- intChan	<span class="comment">//ok表示是否取出</span></span><br><span class="line">num = &lt;- intChan</span><br><span class="line">&lt;-intChan</span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line"><span class="comment">//遍历，for-range，不能使用常规的for</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> intChan &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>在没有协程的情况下，管道内没有数据，再取数据将会报错</p>
<p>管道关闭后，管道的数据只能取出，不能写入</p>
<p>管道阻塞机制：如果只是向管道写入数据而未读取数据，则会出现阻塞而导致死锁，原因是因为超出了管道容量，则会检查是否存在读取操作，如果没有读取操作，则管道死锁。对于没有缓冲的管道，必须在协程中使用</p>
<p>在协程中如果对无缓冲的管道有写入输出就不会导致死锁，即使协程休眠也不会死锁</p>
<p>注意事项：</p>
<ol>
<li><p>channel可以声明为只读或只写</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只写</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">chan</span> &lt;- <span class="type">int</span></span><br><span class="line"><span class="comment">//只读</span></span><br><span class="line"><span class="keyword">var</span> b &lt;- <span class="keyword">chan</span> <span class="type">int</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用select解决处理异步io</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> v := &lt;- intChan : </span><br><span class="line">    	操作<span class="number">1</span></span><br><span class="line">	<span class="keyword">case</span> v := &lt;- strChan :</span><br><span class="line">    	操作<span class="number">2</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    	操作<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多个case可执行时，会公平随机选择一个。没有case、default可以执行时，会阻塞，直到某个case可执行</p>
</li>
<li><p>协程中产生panic，可以使用recover解决协程崩溃</p>
</li>
<li><p>没有使用协程时，通道未关闭，没有数据时读取会死锁，通道关闭，没有数据读取时读取默认值</p>
</li>
</ol>
<h4 id="3、runtime包"><a href="#3、runtime包" class="headerlink" title="3、runtime包"></a>3、runtime包</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">runtime.Gosched() <span class="comment">//让出CPU时间片，等待重新分配</span></span><br><span class="line">runtime.GOexit() <span class="comment">//退出协程</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NumCPU</span><span class="params">()</span></span> <span class="type">int</span> <span class="comment">//返回机器逻辑CPU</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GOMAXPROCS</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> <span class="comment">//设置最多可同时执行CPU</span></span><br></pre></td></tr></table></figure>

<h4 id="4、timer"><a href="#4、timer" class="headerlink" title="4、timer"></a>4、timer</h4><p>定时器，定时处理一些操作，底层使用channel实现</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">time1 := time.NewTimer(time.Second * <span class="number">2</span>)</span><br><span class="line">&lt;- time1.C	<span class="comment">//阻塞，直到时间结束</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&lt;- time.After(time.Second * <span class="number">2</span>)</span><br><span class="line">time1.Stop()	<span class="comment">//停止对应计时器</span></span><br><span class="line">time1.Reset(time.Second) <span class="comment">//重新设置计时器等待时间</span></span><br></pre></td></tr></table></figure>

<h4 id="5、ticker"><a href="#5、ticker" class="headerlink" title="5、ticker"></a>5、ticker</h4><p>周期性执行的定时器</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ticker := time.NewTicker(time.Second * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> _ = <span class="keyword">range</span> ticker &#123;&#125; <span class="comment">//周期性停止</span></span><br><span class="line">ticker.Stop() <span class="comment">//停止计时</span></span><br></pre></td></tr></table></figure>

<h4 id="6、原子操作"><a href="#6、原子操作" class="headerlink" title="6、原子操作"></a>6、原子操作</h4><p>atomic提供的原子操作，确保任何时候都只有一个goroutine对变量进行操作，提供增减、载入、比较交换、存储等操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddInt32</span><span class="params">(addr *<span class="type">int32</span>, delta <span class="type">int32</span>)</span></span> (val <span class="type">int32</span>)	<span class="comment">//增减，此外还可以操作int64，uint32,unit63,uintptr</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadInt32</span><span class="params">(addr *<span class="type">int32</span>)</span></span> (val <span class="type">int32</span>)	<span class="comment">//载入，即获取对应值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StoreInt32</span><span class="params">(addr *<span class="type">int32</span>, val <span class="type">int32</span>)</span></span><span class="comment">//存储，保存到val中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapInt32</span><span class="params">(addr *<span class="type">int32</span>, old, <span class="built_in">new</span> <span class="type">int32</span>)</span></span> (swapped <span class="type">bool</span>)<span class="comment">//比较交换，先比较old和addr的值相同返回真，再赋值</span></span><br></pre></td></tr></table></figure>

<h2 id="十一、反射"><a href="#十一、反射" class="headerlink" title="十一、反射"></a>十一、反射</h2><p>动态的获取运行时变量的各种信息，比如类型、类别。如果是结构体变量还可以获取属性、方法，通过反射还可以修改变量的值。</p>
<p>反射相关的内容在reflect包中，具体的方法查看官方文档</p>
<p>value为go提供的有关于反射的接口，实现对对应数据的操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v := reflect.ValueOf()	<span class="comment">//返回被检查对象的value</span></span><br><span class="line">v.Kind()	<span class="comment">//返回v的底层类型</span></span><br><span class="line">v.Interface()	<span class="comment">//返回当前检查对象的一个空接口</span></span><br></pre></td></tr></table></figure>

<h4 id="1、通过反射修改值："><a href="#1、通过反射修改值：" class="headerlink" title="1、通过反射修改值："></a>1、通过反射修改值：</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取value对象，如果是值类型则需要传递指针</span></span><br><span class="line">v := reflect.ValueOf(&amp;i)</span><br><span class="line"><span class="comment">//传递指针后对对象进行封装</span></span><br><span class="line">v = v.Elem()	<span class="comment">//Elem返回v持有的接口保管的值的Value封装，或者v持有的指针指向的值的Value封装</span></span><br><span class="line"><span class="comment">//检测该对象是否可以修改</span></span><br><span class="line">v.CanSet()</span><br><span class="line">v.SetFloat(<span class="number">3.14</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2、反射结构："><a href="#2、反射结构：" class="headerlink" title="2、反射结构："></a>2、反射结构：</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v.NumField()	<span class="comment">//返回结构体内字段数量</span></span><br><span class="line">v.Field(i)		<span class="comment">//通过索引获取对应的值，只有可以导出的字段才可以被修改</span></span><br><span class="line">v.Method(i).Call(<span class="literal">nil</span>)	<span class="comment">//通过相似的方法获取到方法并且调用</span></span><br></pre></td></tr></table></figure>

<h2 id="十二、网络编程"><a href="#十二、网络编程" class="headerlink" title="十二、网络编程"></a>十二、网络编程</h2><p>net包中包含了处理tcp&#x2F;ip以及UDP协议、域名解析等方法</p>
<h4 id="1、tcp服务器"><a href="#1、tcp服务器" class="headerlink" title="1、tcp服务器"></a>1、tcp服务器</h4><p>服务器：监听端口，并产生连接，读取前端传递的数据，以协程方式启动能后处理大量请求</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//创建Listener</span></span><br><span class="line">	listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8080&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Error listening&quot;</span> , err.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125; </span><br><span class="line">	<span class="comment">//监听客户端连接</span></span><br><span class="line">	<span class="keyword">for</span>  &#123;</span><br><span class="line">		conn, err := listen.Accept()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Error accepting&quot;</span>, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">go</span> doServer(conn)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doServer</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">512</span>)</span><br><span class="line">		<span class="comment">//读取传递到后端的数据</span></span><br><span class="line">		<span class="built_in">len</span>, err := conn.Read(buf)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Error reading&quot;</span>, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="string">&quot;data = &quot;</span>, <span class="type">string</span>(buf[:<span class="built_in">len</span>]))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<p>net.Dial返回一个Conn类型的接口，可以用其发送接受数据，抽象了网络层和传输层</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8080&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;连接失败&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	inputReader := bufio.NewReader(os.Stdin)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">//获取标准输入</span></span><br><span class="line">		input, _ := inputReader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		input = strings.Trim(input, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> input == <span class="string">&quot;exit&quot;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		conn.Write([]<span class="type">byte</span>(input))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、http服务器"><a href="#2、http服务器" class="headerlink" title="2、http服务器"></a>2、http服务器</h4><p>http是比tcp更高层的协议，描述了网页服务器如何与客户端浏览器进行同信，在net&#x2F;http包下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//给对应的路由绑定处理器方法</span></span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/&quot;</span>, HelloServer)</span><br><span class="line">    <span class="comment">//该方法的第二个参数为Handler接口，实现ServeHTTP方法即可</span></span><br><span class="line">    http.Handle(<span class="string">&quot;/a&quot;</span>, http.HandlerFunc(HelloServer))</span><br><span class="line">    <span class="comment">//启动服务器并监听8080端口</span></span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;localhost:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Error listening&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理器方法的参数列表必须和下面的相同</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloServer</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">&quot;Hello, &quot;</span>+req.URL.Path[<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取POST请求参数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PostServer</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span>  &#123;</span><br><span class="line">	value := req.FormValue(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">	fmt.Fprintf(w, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PostServer</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span>  &#123;</span><br><span class="line">    req.ParsseForm()</span><br><span class="line">    <span class="comment">//found用于判断是否获取到了参数</span></span><br><span class="line">    value, found := req.Form[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他常用函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重定向到指定路径，同时指定状态码</span></span><br><span class="line">http.Redirect(w ResponseWriter, r *Request, url <span class="type">string</span>, code <span class="type">int</span>)</span><br><span class="line"><span class="comment">//返回网页没有找到，404错误</span></span><br><span class="line">http.NotFound(w ResponseWriter, r *Request)</span><br><span class="line"><span class="comment">//描述网页以何种方式被请求</span></span><br><span class="line">http.Request.Method</span><br><span class="line"><span class="comment">//设置响应头信息，响应html</span></span><br><span class="line">w.header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="十三、包管理"><a href="#十三、包管理" class="headerlink" title="十三、包管理"></a>十三、包管理</h2><h4 id="1、安装第三方包"><a href="#1、安装第三方包" class="headerlink" title="1、安装第三方包"></a>1、安装第三方包</h4><p>go.mod，管理模块中的包依赖关系</p>
<p>使用：终端输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//初始化模块</span><br><span class="line">go mod init &lt;项目模块名称&gt;</span><br><span class="line">//根据go.mod文件处理依赖关系，没有则会创建对应文件</span><br><span class="line">go mod tidy</span><br><span class="line">//将依赖包复制到vendor目录</span><br><span class="line">go mod vendor</span><br><span class="line">//显示依赖关系</span><br><span class="line">go list -m all</span><br><span class="line">//下载依赖</span><br><span class="line">go mod download [path@version]</span><br><span class="line">//下载依赖</span><br><span class="line">go get -u </span><br></pre></td></tr></table></figure>

<p>执行go get命令后，下载的第三方包会被保存在GOPATH&#x2F;pkg&#x2F;mod目录下</p>
<p>通过go.mod文件处理包的更新、版本管理等功能，类似于pom.xml</p>
<p><strong><code>go.mod</code> 如何编辑</strong></p>
<p>在 Go 1.16 中，一个行为变更是 <code>go build</code> 和 <code>go test</code> 不会自动编辑 <code>go.mod</code> 了，基于以上信息，Go 1.16 中将进行如下处理：</p>
<ul>
<li><p>通过在代码中修改 import 语句，来修改 <code>go.mod</code>：</p>
</li>
<li><ul>
<li><code>go get</code> 可用于添加新模块；</li>
<li><code>go mod tidy</code> 删除掉无用的模块；</li>
</ul>
</li>
<li><p>将未导入的模块写入 <code>go.mod</code>:</p>
</li>
<li><ul>
<li><code>go get &lt;package&gt;[@&lt;version&gt;]</code>;</li>
<li><code>go mod tidy</code> 也可以；</li>
<li>手动编辑；</li>
</ul>
</li>
</ul>
<h4 id="2、生成包注释文档"><a href="#2、生成包注释文档" class="headerlink" title="2、生成包注释文档"></a>2、生成包注释文档</h4><p>godoc:</p>
<p>在自定义包中使用<code>//</code>在包、类型、函数前注释，godoc将为每个文件生成一系列文档网页</p>
<p>安装godoc：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -v golang.org/x/tools/cmd/godoc</span><br></pre></td></tr></table></figure>

<p>快速使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">cd XXXX; godoc -http=:<span class="number">6060</span></span><br></pre></td></tr></table></figure>

<p>其中 XXXX 是包含 go.mod 的一个仓库目录</p>
<p>访问localhost:6060&#x2F;pkg&#x2F;{项目名称}&#x2F;{包名}即可访问到对应包的注释文档</p>
<p>pkgsite 命令</p>
<p>现在 Go 官方维护和使用的是 <code>pkg.go.dev</code></p>
<p>当前的 <code>pkgsite</code> 要求 Go 1.18 版，然后我们需要安装 <code>pkgsite</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">go install golang.<span class="property">org</span>/x/pkgsite/cmd/pkgsite@latest</span><br></pre></td></tr></table></figure>

<p>然后和 godoc 类似:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cd <span class="variable constant_">XXXX</span>; pkgsite -http=:<span class="number">6060</span></span><br></pre></td></tr></table></figure>

<p>访问路径和godoc了类似，只是少了&#x2F;pkg</p>
<h4 id="3、工具安装"><a href="#3、工具安装" class="headerlink" title="3、工具安装"></a>3、工具安装</h4><p>go install:</p>
<p>主要用来生成库和工具。</p>
<p>一是编译包文件（无main包），将编译后的包文件放到 pkg 目录下（<code>$GOPATH/pkg</code>）</p>
<p>二是编译生成可执行文件（有main包），将可执行文件放到 bin 目录（<code>$GOPATH/bin</code>）</p>
<p>go get：</p>
<p>go后续版本将安装二进制文件的功能逐步转移到go install中</p>
<p>现在主要作为修改go.mod文件，下载依赖并将依赖引入go.mod文件</p>
<h2 id="十四、常用包"><a href="#十四、常用包" class="headerlink" title="十四、常用包"></a>十四、常用包</h2><h4 id="1、strings和strconv"><a href="#1、strings和strconv" class="headerlink" title="1、strings和strconv"></a>1、strings和strconv</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断前后缀</span></span><br><span class="line">strings.HasPrefix(s, prefix <span class="type">string</span>) <span class="type">bool</span></span><br><span class="line">strings.HasSuffix(s, prefix <span class="type">string</span>) <span class="type">bool</span></span><br><span class="line"><span class="comment">//字符串包含关系</span></span><br><span class="line">strings.Contains(s, substr <span class="type">string</span>) <span class="type">bool</span></span><br><span class="line"><span class="comment">//判断子字符串在父字符串中的位置, 返回str第一个字符的索引，没有返回-1</span></span><br><span class="line">strings.Index(s, str <span class="type">string</span>) <span class="type">int</span>	 <span class="comment">//返回第一次出现的索引</span></span><br><span class="line">strings.LastIndex(s, str <span class="type">string</span>) <span class="type">int</span> <span class="comment">//返回最后一次出现的索引</span></span><br><span class="line"><span class="comment">//如果需要查询非ASCII编码字符的位置，使用下面函数</span></span><br><span class="line">strings.IndexRune(s <span class="type">string</span>, r <span class="type">rune</span>) <span class="type">int</span></span><br><span class="line"><span class="comment">//字符串替换，将str中的前n个old字符串替换为new，如果n为-1则替换所有字符串</span></span><br><span class="line">strings.Replace(str, old, <span class="built_in">new</span> <span class="type">string</span>, n <span class="type">int</span>) <span class="type">string</span></span><br><span class="line"><span class="comment">//统计字符串出现次数，统计str在s中出现的非重叠次数</span></span><br><span class="line">strings.Count(s, str <span class="type">string</span>) <span class="type">int</span></span><br><span class="line"><span class="comment">//重复拼接字符串，将s重复n次并返回</span></span><br><span class="line">strings.Repeat(s <span class="type">string</span>, count <span class="type">int</span>) <span class="type">string</span></span><br><span class="line"><span class="comment">//大小写</span></span><br><span class="line">strings.ToUpper(s) <span class="type">string</span></span><br><span class="line">strings.ToLower(s) <span class="type">string</span></span><br><span class="line"><span class="comment">//修剪字符串</span></span><br><span class="line">strings.TrimSpace(s) <span class="type">string</span>	<span class="comment">//去除首尾的空白符号</span></span><br><span class="line">strings.Trim(s, str <span class="type">string</span>) <span class="type">string</span> <span class="comment">//去除首尾的str字符串</span></span><br><span class="line">TrimLeft、TrimRight	<span class="comment">//去除指定一侧字符</span></span><br><span class="line"><span class="comment">//分割字符串</span></span><br><span class="line">strings.Fildes(s) []<span class="type">string</span>	<span class="comment">//利用一个或多个空白符将一个字符串分割为多个字符串</span></span><br><span class="line">strings.Split(s) []<span class="type">string</span>   <span class="comment">//按照指定字符串分割</span></span><br><span class="line"><span class="comment">//拼接slice到字符串</span></span><br><span class="line">strings.Join(sl []<span class="type">string</span>, sep <span class="type">string</span>) <span class="type">string</span></span><br><span class="line"><span class="comment">//读取字符串</span></span><br><span class="line">r = strings.NewReader(str)	<span class="comment">//生成一个Reader并读取字符串中的内容返回Reader的指针</span></span><br><span class="line">r.ReadByte()		<span class="comment">//从字符串中读取下一个byte</span></span><br><span class="line">r.ReadRune()		<span class="comment">//从字符串中读取下一个rune		</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串相关转换通过strconv实现</span></span><br><span class="line">strconv.Itoa(i <span class="type">int</span>) <span class="type">string</span>	<span class="comment">//返回i所表示字符串的十进制</span></span><br><span class="line"><span class="comment">//将64位浮点数转为字符串，fmt表示格式，prec表示精度，bitSize则使用32表示float32,64表示float64</span></span><br><span class="line">strconv.FormatFloat(f <span class="type">float64</span>, fmt <span class="type">byte</span>, prec <span class="type">int</span>, bitSize <span class="type">int</span>) <span class="type">string</span>	</span><br><span class="line">strconv.FormatBool(b <span class="type">bool</span>) <span class="type">string</span>		<span class="comment">//将bool转为字符串</span></span><br><span class="line">strconv.Atoi(s <span class="type">string</span>) (i <span class="type">int</span>, err <span class="type">error</span>) <span class="comment">//将字符串转为int</span></span><br><span class="line">strconv.ParseFloat(s <span class="type">string</span>, bitSize <span class="type">int</span>) (f <span class="type">float64</span>, err <span class="type">error</span>) <span class="comment">//将字符串转为float64</span></span><br><span class="line">strconv.ParseBool(str <span class="type">string</span>) (value <span class="type">bool</span>, err <span class="type">error</span>)		<span class="comment">//将字符串转为bool</span></span><br><span class="line"><span class="comment">//将字符串转为int，bitSize大于等于转换后的最小不会溢出的数据类型</span></span><br><span class="line">strconv.ParseInt(str <span class="type">string</span>, base <span class="type">int</span>, bitSize <span class="type">int</span>)(i <span class="type">int64</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2、regexp"><a href="#2、regexp" class="headerlink" title="2、regexp"></a>2、regexp</h4><p>正则表达式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">pat := <span class="string">&quot;[0-9]&quot;</span></span><br><span class="line">ste := <span class="string">&quot;dgv123&quot;</span></span><br><span class="line"><span class="comment">//简单模式匹配</span></span><br><span class="line">ok, err := regexp.Match(pat, []<span class="type">byte</span>(str))</span><br><span class="line"><span class="comment">//通过regexp对象匹配</span></span><br><span class="line">re, err := regexp.Compile(pat)</span><br><span class="line">re.ReplaceAllString(str, <span class="string">&quot;A&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="3、sync"><a href="#3、sync" class="headerlink" title="3、sync"></a>3、sync</h4><p><code>sync.Mutex</code>互斥锁，确保同一时间只有一个线程操作数据，通过将锁放入结构体，实现对整个结构体的上锁</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mu := sync.Mutex</span><br><span class="line">mu.Lock()	<span class="comment">//上锁</span></span><br><span class="line">mu.UnLock() <span class="comment">//解锁</span></span><br></pre></td></tr></table></figure>

<p><code>RWMutex</code>类似乐观锁</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rm := sync.RWMutex&#123;&#125;</span><br><span class="line"><span class="comment">//同一时间允许多个线程操作变量，但是只有一个线程能进行写操作</span></span><br><span class="line">rm.RLock()</span><br></pre></td></tr></table></figure>

<p><code>sync.Once&#123;&#125;.Do(func)</code>这个方法能确保Do中传入的函数只被执行一次</p>
<h4 id="4、math-x2F-big"><a href="#4、math-x2F-big" class="headerlink" title="4、math&#x2F;big"></a>4、math&#x2F;big</h4><p>精密计算包，只要内存足够可以表示任意数位的数字</p>
<p><code>big.Int</code>大整数、<code>big.Rat</code>大有理数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造</span></span><br><span class="line">big.NewInt(n)		<span class="comment">//创建一个大小为n的整数</span></span><br><span class="line">big.NewRat(n, d)	<span class="comment">//n为分子，d为分母</span></span><br><span class="line"><span class="comment">//计算，链式调用，将计算结果返回给调用者</span></span><br><span class="line">x := big.NewInt(<span class="number">134124</span>)</span><br><span class="line">y := big.NewInt(<span class="number">123123</span>)</span><br><span class="line">z := big.NewInt(<span class="number">123718</span>)</span><br><span class="line">x.Add(y, z).Mul(y, z)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>GoLang</category>
      </categories>
      <tags>
        <tag>GoLang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2022/07/07/JDBC/</url>
    <content><![CDATA[<p>PDF请展开全文阅读</p>
<span id="more"></span>
<div class="pdfobject-container" data-target="JDBC.pdf" data-height="600px"></div>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/2022/07/07/JavaWeb/</url>
    <content><![CDATA[<p>PDF请展开全文阅读</p>
<span id="more"></span>
<div class="pdfobject-container" data-target="JavaWeb.pdf" data-height="600px"></div>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2022/07/07/MyBatis/</url>
    <content><![CDATA[<h1 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h1><h2 id="MyBatis历史"><a href="#MyBatis历史" class="headerlink" title="MyBatis历史"></a>MyBatis历史</h2><ul>
<li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</li>
<li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</li>
</ul>
<h2 id="MyBatis特性"><a href="#MyBatis特性" class="headerlink" title="MyBatis特性"></a>MyBatis特性</h2><ol>
<li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li>
<li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li>
<li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架<span id="more"></span></li>
</ol>
<h2 id="MyBatis下载"><a href="#MyBatis下载" class="headerlink" title="MyBatis下载"></a>MyBatis下载</h2><ul>
<li><a href="https://github.com/mybatis/mybatis-3">MyBatis下载地址</a></li>
<li><img src="/.com//MyBatis%E4%B8%8B%E8%BD%BD.png"></li>
</ul>
<h2 id="和其它持久化层技术对比"><a href="#和其它持久化层技术对比" class="headerlink" title="和其它持久化层技术对比"></a>和其它持久化层技术对比</h2><ul>
<li>JDBC  <ul>
<li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤  </li>
<li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见  </li>
<li>代码冗长，开发效率低</li>
</ul>
</li>
<li>Hibernate 和 JPA<ul>
<li>操作简便，开发效率高  </li>
<li>程序中的长难复杂 SQL 需要绕过框架  </li>
<li>内部自动生产的 SQL，不容易做特殊优化  </li>
<li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。  </li>
<li>反射操作太多，导致数据库性能下降</li>
</ul>
</li>
<li>MyBatis<ul>
<li>轻量级，性能出色  </li>
<li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据  </li>
<li>开发效率稍逊于HIbernate，但是完全能够接受</li>
</ul>
</li>
</ul>
<h1 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>IDE：idea 2019.2  </li>
<li>构建工具：maven 3.5.4  </li>
<li>MySQL版本：MySQL 5.7  </li>
<li>MyBatis版本：MyBatis 3.5.7</li>
</ul>
<h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><ul>
<li><p>打包方式：jar</p>
</li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h2><blockquote>
<p>习惯上命名为<code>mybatis-config.xml</code>，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--设置连接数据库的环境--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--引入映射文件--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h2><blockquote>
<p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mybatis.mapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;  </span><br><span class="line">	<span class="comment">/**  </span></span><br><span class="line"><span class="comment">	* 添加用户信息  </span></span><br><span class="line"><span class="comment">	*/</span>  </span><br><span class="line">	<span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h2><ul>
<li>相关概念：ORM（Object Relationship Mapping）对象关系映射。  <ul>
<li>对象：Java的实体类对象  </li>
<li>关系：关系型数据库  </li>
<li>映射：二者之间的对应关系</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>Java概念</th>
<th>数据库概念</th>
</tr>
</thead>
<tbody><tr>
<td>类</td>
<td>表</td>
</tr>
<tr>
<td>属性</td>
<td>字段&#x2F;列</td>
</tr>
<tr>
<td>对象</td>
<td>记录&#x2F;行</td>
</tr>
</tbody></table>
<ul>
<li>映射文件的命名规则<ul>
<li>表所对应的实体类的类名+Mapper.xml</li>
<li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml </li>
<li>因此一个映射文件对应一个实体类，对应一张表的操作</li>
<li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</li>
<li>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</li>
</ul>
</li>
<li>MyBatis中可以面向接口操作数据，要保证两个一致<ul>
<li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li>
<li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--int insertUser();--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span>  </span><br><span class="line">		insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="通过junit测试功能"><a href="#通过junit测试功能" class="headerlink" title="通过junit测试功能"></a>通过junit测试功能</h2><ul>
<li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li>
<li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li>
<li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line">        <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line">	    <span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span></span><br><span class="line">		<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li>
</ul>
<h2 id="加入log4j日志功能"><a href="#加入log4j日志功能" class="headerlink" title="加入log4j日志功能"></a>加入log4j日志功能</h2><ol>
<li>加入依赖 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>加入log4j的配置文件<ul>
<li>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</li>
<li>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h1 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h1><blockquote>
<p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        typeAlias：设置某个具体的类型的别名</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        type：需要设置别名的类型的全类名</span></span><br><span class="line"><span class="comment">        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：设置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">	    default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environment：设置具体的连接数据库的环境信息</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">	        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">	            type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">	            type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span></span><br><span class="line"><span class="comment">	            type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            dataSource：设置数据源</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">	            type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">	            type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建</span></span><br><span class="line"><span class="comment">	            type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span></span><br><span class="line"><span class="comment">	            type=&quot;JNDI&quot;：调用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span></span><br><span class="line"><span class="comment">        注意：</span></span><br><span class="line"><span class="comment">			1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span></span><br><span class="line"><span class="comment">			2. mapper接口要和mapper映射文件的名字一致</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><img src="/.com//mapper%E6%8E%A5%E5%8F%A3%E5%92%8Cmapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E5%8C%85%E4%B8%8B.png"></li>
</ul>
<h1 id="默认的类型别名"><a href="#默认的类型别名" class="headerlink" title="默认的类型别名"></a>默认的类型别名</h1><p><img src="/.com//%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D1.png"><br><img src="/.com//%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D2.png"></p>
<h1 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h1><ol>
<li>添加 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>删除 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">       delete from t_user where id = 6</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>修改 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">       update t_user set username = &#x27;张三&#x27; where id = 5</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>查询一个实体类对象 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--User getUserById();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where id = 2  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>查询集合 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>注意：</p>
<ol>
<li>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系  <ul>
<li>resultType：自动映射，用于属性名和表中字段名一致的情况  </li>
<li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li>
</ul>
</li>
<li>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</li>
</ol>
</li>
</ul>
<h1 id="MyBatis获取参数值的两种方式（重点）"><a href="#MyBatis获取参数值的两种方式（重点）" class="headerlink" title="MyBatis获取参数值的两种方式（重点）"></a>MyBatis获取参数值的两种方式（重点）</h1><ul>
<li>MyBatis获取参数值的两种方式：${}和#{}  </li>
<li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值  </li>
<li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li>
</ul>
<h2 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h2><ul>
<li>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h2><ul>
<li><p>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中</p>
<ol>
<li>以arg0,arg1…为键，以参数为值；</li>
<li>以param1,param2…为键，以参数为值；</li>
</ol>
</li>
<li><p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</p>
</li>
<li><p>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h2><ul>
<li>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByMap</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">	Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">	map.put(<span class="string">&quot;usermane&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">	map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);<span class="comment">//该方法的形参为一个封装有参数的Map</span></span><br><span class="line">	System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h2><ul>
<li>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--实体类参数和#&#123;&#125;内参数同名--&gt;</span></span><br><span class="line">	insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">12</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">	mapper.insertUser(user);<span class="comment">//方法形参为实体类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h2><ul>
<li><p>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中 </p>
<ol>
<li>以@Param注解的value属性值为键，以参数为值；</li>
<li>以param1,param2…为键，以参数为值；</li>
</ol>
</li>
<li><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User CheckLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;CheckLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByParam</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">	mapper.CheckLoginByParam(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>建议分成两种情况进行处理</p>
<ol>
<li>实体类类型的参数</li>
<li>使用@Param标识参数</li>
</ol>
</li>
</ul>
<h1 id="MyBatis的各种查询功能"><a href="#MyBatis的各种查询功能" class="headerlink" title="MyBatis的各种查询功能"></a>MyBatis的各种查询功能</h1><ol>
<li>如果查询出的数据只有一条，可以通过<ol>
<li>实体类对象接收</li>
<li>List集合接收</li>
<li>Map集合接收，结果<code>&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;</code></li>
</ol>
</li>
<li>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过<ol>
<li>实体类类型的LIst集合接收</li>
<li>Map类型的LIst集合接收</li>
<li>在mapper接口的方法上添加@MapKey注解</li>
</ol>
</li>
</ol>
<h2 id="查询一个实体类对象"><a href="#查询一个实体类对象" class="headerlink" title="查询一个实体类对象"></a>查询一个实体类对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询一个List集合"><a href="#查询一个List集合" class="headerlink" title="查询一个List集合"></a>查询一个List集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询单个数据"><a href="#查询单个数据" class="headerlink" title="查询单个数据"></a>查询单个数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询用户的总记录数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 在MyBatis中，对于Java中常用的类型都设置了类型别名  </span></span><br><span class="line"><span class="comment"> * 例如：java.lang.Integer--&gt;int|integer  </span></span><br><span class="line"><span class="comment"> * 例如：int--&gt;_int|_integer  </span></span><br><span class="line"><span class="comment"> * 例如：Map--&gt;map,List--&gt;list  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">	select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	结果：</span></span><br><span class="line"><span class="comment">	[&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">	&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">	&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span><span class="comment">//以id作为该Map的键，以字段的Map作为值</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	结果：</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">	1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">	2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">	3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="特殊SQL的执行"><a href="#特殊SQL的执行" class="headerlink" title="特殊SQL的执行"></a>特殊SQL的执行</h1><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名进行模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 21:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;username&quot;) String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span>  </span><br><span class="line">	select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中<code>select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</code>是最常用的，也可以使用<code>&quot;%$&#123;&#125;%&quot;</code>或者Mysql的字符串拼接函数<code>concat(&#39;%&#39; , #&#123;&#125; , &#39;%&#39;)</code></li>
</ul>
<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul>
<li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in (&#39;1,2,3&#39;)</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 22:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">	delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMore</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMore(<span class="string">&quot;1,2,3,8&quot;</span>);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h2><ul>
<li>只能使用${}，因为表名不能加单引号<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定表中的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 14:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByTable</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByTable(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="添加功能获取自增的主键"><a href="#添加功能获取自增的主键" class="headerlink" title="添加功能获取自增的主键"></a>添加功能获取自增的主键</h2><ul>
<li>使用场景<ul>
<li>t_clazz(clazz_id,clazz_name)  </li>
<li>t_student(student_id,student_name,clazz_id)</li>
</ul>
<ol>
<li>添加班级信息  </li>
<li>获取新添加的班级的id  </li>
<li>为班级分配学生，即将某学的班级id修改为新添加的班级的id</li>
</ol>
</li>
<li>在mapper.xml中设置两个属性<ul>
<li>useGeneratedKeys：设置使用自增的主键</li>
</ul>
<ul>
<li>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 15:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;ton&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">	mapper.insertUser(user);</span><br><span class="line">	System.out.println(user);</span><br><span class="line">	<span class="comment">//输出：user&#123;id=10, username=&#x27;ton&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@321.com&#x27;&#125;，自增主键存放到了user的id属性中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h1><h2 id="resultMap处理字段和属性的映射关系"><a href="#resultMap处理字段和属性的映射关系" class="headerlink" title="resultMap处理字段和属性的映射关系"></a>resultMap处理字段和属性的映射关系</h2><ul>
<li><p>resultMap：设置自定义映射  </p>
<ul>
<li>属性：  <ul>
<li>id：表示自定义映射的唯一标识，不能重复</li>
<li>type：查询的数据要映射的实体类的类型</li>
</ul>
</li>
<li>子标签：  <ul>
<li>id：设置主键的映射关系  </li>
<li>result：设置普通字段的映射关系  </li>
<li>子标签属性：  <ul>
<li>property：设置映射关系中实体类中的属性名  </li>
<li>column：设置映射关系中表中的字段名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系  </p>
<ol>
<li>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select eid,emp_name empName,age,sex,email from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>可以在MyBatis的核心配置文件中的<code>setting</code>标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。<a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">核心配置文件详解</a> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h2><blockquote>
<p>查询员工信息以及员工所对应的部门信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;  </span><br><span class="line">	<span class="keyword">private</span> Integer eid;  </span><br><span class="line">	<span class="keyword">private</span> String empName;  </span><br><span class="line">	<span class="keyword">private</span> Integer age;  </span><br><span class="line">	<span class="keyword">private</span> String sex;  </span><br><span class="line">	<span class="keyword">private</span> String email;  </span><br><span class="line">	<span class="keyword">private</span> Dept dept;</span><br><span class="line">	<span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="级联方式处理映射关系"><a href="#级联方式处理映射关系" class="headerlink" title="级联方式处理映射关系"></a>级联方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用association处理映射关系"><a href="#使用association处理映射关系" class="headerlink" title="使用association处理映射关系"></a>使用association处理映射关系</h3><ul>
<li>association：处理多对一的映射关系</li>
<li>property：需要处理多对的映射关系的属性名</li>
<li>javaType：该属性的类型<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询员工信息"><a href="#1-查询员工信息" class="headerlink" title="1. 查询员工信息"></a>1. 查询员工信息</h4><ul>
<li>select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）</li>
<li>column：设置分步查询的条件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EmpMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-查询部门信息"><a href="#2-查询部门信息" class="headerlink" title="2. 查询部门信息"></a>2. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DeptMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：通过did查询员工对应的部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line">	<span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><ul>
<li>collection：用来处理一对多的映射关系</li>
<li>ofType：表示该属性对饮的集合中存储的数据的类型<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="分步查询-1"><a href="#分步查询-1" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询部门信息"><a href="#1-查询部门信息" class="headerlink" title="1. 查询部门信息"></a>1. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Dept</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-根据部门id查询部门中的所有员工"><a href="#2-根据部门id查询部门中的所有员工" class="headerlink" title="2. 根据部门id查询部门中的所有员工"></a>2. 根据部门id查询部门中的所有员工</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：根据部门id查询部门中的所有员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.Emp&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><ul>
<li>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：<ul>
<li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载  </li>
<li>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载</li>
</ul>
</li>
<li>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">	System.out.println(emp.getEmpName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>关闭延迟加载，两条SQL语句都运行了<img src="/.com//%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%951.png"></p>
</li>
<li><p>开启延迟加载，只运行获取emp的SQL语句<br><img src="/.com//%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%952.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">	System.out.println(emp.getEmpName());</span><br><span class="line">	System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">	System.out.println(emp.getDept());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>开启后，需要用到查询dept的时候才会调用相应的SQL语句<img src="/.com//%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%953.png"></p>
</li>
<li><p>fetchType：当开启了全局的延迟加载之后，可以通过该属性手动控制延迟加载的效果，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><ul>
<li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li>
</ul>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul>
<li>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</li>
<li>在where后面添加一个恒成立条件<code>1=1</code><ul>
<li>这个恒成立条件并不会影响查询的结果</li>
<li>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时<ul>
<li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错</li>
<li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where 1=1</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and emp_name = #&#123;empName&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and age = #&#123;age&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and sex = #&#123;sex&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and email = #&#123;email&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul>
<li><p>where和if一般结合使用：</p>
<ul>
<li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  </li>
<li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and&#x2F;or去掉  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			emp_name = #&#123;empName&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and age = #&#123;age&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and sex = #&#123;sex&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and email = #&#123;email&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>注意：where标签不能去掉条件后多余的and&#x2F;or</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">	age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ul>
<li>trim用于去掉或添加标签中的内容  </li>
<li>常用属性:<ul>
<li>prefix：在trim标签中的内容的前面添加某些内容  </li>
<li>suffix：在trim标签中的内容的后面添加某些内容 </li>
<li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li>
<li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li>
</ul>
</li>
<li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			emp_name = #&#123;empName&#125; and</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			age = #&#123;age&#125; and</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			sex = #&#123;sex&#125; or</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			email = #&#123;email&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByCondition</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	List&lt;Emp&gt; emps= mapper.getEmpByCondition(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">	System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/.com//trim%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></li>
</ul>
<h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><ul>
<li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li>
<li>when至少要有一个，otherwise至多只有一个<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				emp_name = #&#123;empName&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				age = #&#123;age&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				sex = #&#123;sex&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				email = #&#123;email&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">				did = 1</span><br><span class="line">			<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByChoose</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.getEmpByChoose(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">	System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/.com//choose%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></li>
<li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li>
</ul>
<h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul>
<li><p>属性：  </p>
<ul>
<li>collection：设置要循环的数组或集合  </li>
<li>item：表示集合或数组中的每一个数据  </li>
<li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li>
<li>open：设置foreach标签中的内容的开始符  </li>
<li>close：设置foreach标签中的内容的结束符</li>
</ul>
</li>
<li><p>批量删除</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(Integer[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">	delete from t_emp where eid in</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">		#&#123;eid&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMoreByArray</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMoreByArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <img src="/.com//foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></p>
</li>
<li><p>批量添加</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">	insert into t_emp values</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">		(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertMoreByList</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;b&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertMoreByList(emps);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <img src="/.com//foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png"></p>
</li>
</ul>
<h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><ul>
<li>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</li>
<li>声明sql片段：<code>&lt;sql&gt;</code>标签<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>引用sql片段：<code>&lt;include&gt;</code>标签<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="MyBatis的缓存"><a href="#MyBatis的缓存" class="headerlink" title="MyBatis的缓存"></a>MyBatis的缓存</h1><h2 id="MyBatis的一级缓存"><a href="#MyBatis的一级缓存" class="headerlink" title="MyBatis的一级缓存"></a>MyBatis的一级缓存</h2><ul>
<li><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问  </p>
</li>
<li><p>使一级缓存失效的四种情况：  </p>
<ol>
<li>不同的SqlSession对应不同的一级缓存  </li>
<li>同一个SqlSession但是查询条件不同</li>
<li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li>
<li>同一个SqlSession两次查询期间手动清空了缓存<br> sqlSession.clearCache();</li>
</ol>
</li>
</ul>
<h2 id="MyBatis的二级缓存"><a href="#MyBatis的二级缓存" class="headerlink" title="MyBatis的二级缓存"></a>MyBatis的二级缓存</h2><ul>
<li><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取  </p>
</li>
<li><p>二级缓存开启的条件</p>
<ol>
<li>在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置</li>
<li>在映射文件中设置标签<cache></cache></li>
<li>二级缓存必须在SqlSession关闭或提交之后有效</li>
<li>查询的数据所转换的实体类类型必须实现序列化的接口</li>
</ol>
</li>
<li><p>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>
</li>
</ul>
<h2 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h2><ul>
<li>在mapper配置文件中添加的cache标签可以设置一些属性</li>
<li>eviction属性：缓存回收策略  <ul>
<li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。  </li>
<li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。  </li>
<li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。  </li>
<li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li>
<li>默认的是 LRU</li>
</ul>
</li>
<li>flushInterval属性：刷新间隔，单位毫秒<ul>
<li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</li>
</ul>
</li>
<li>size属性：引用数目，正整数<ul>
<li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li>
</ul>
</li>
<li>readOnly属性：只读，true&#x2F;false<ul>
<li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。  </li>
<li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li>
</ul>
</li>
</ul>
<h2 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h2><ul>
<li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </li>
<li>如果二级缓存没有命中，再查询一级缓存  </li>
<li>如果一级缓存也没有命中，则查询数据库  </li>
<li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li>
</ul>
<h2 id="整合第三方缓存EHCache（了解）"><a href="#整合第三方缓存EHCache（了解）" class="headerlink" title="整合第三方缓存EHCache（了解）"></a>整合第三方缓存EHCache（了解）</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="各个jar包的功能"><a href="#各个jar包的功能" class="headerlink" title="各个jar包的功能"></a>各个jar包的功能</h3><table>
<thead>
<tr>
<th>jar包名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>mybatis-ehcache</td>
<td>Mybatis和EHCache的整合包</td>
</tr>
<tr>
<td>ehcache</td>
<td>EHCache核心包</td>
</tr>
<tr>
<td>slf4j-api</td>
<td>SLF4J日志门面包</td>
</tr>
<tr>
<td>logback-classic</td>
<td>支持SLF4J门面接口的一个具体实现</td>
</tr>
</tbody></table>
<h3 id="创建EHCache的配置文件ehcache-xml"><a href="#创建EHCache的配置文件ehcache-xml" class="headerlink" title="创建EHCache的配置文件ehcache.xml"></a>创建EHCache的配置文件ehcache.xml</h3><ul>
<li>名字必须叫<code>ehcache.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="设置二级缓存的类型"><a href="#设置二级缓存的类型" class="headerlink" title="设置二级缓存的类型"></a>设置二级缓存的类型</h3><ul>
<li>在xxxMapper.xml文件中设置二级缓存类型<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="加入logback日志"><a href="#加入logback日志" class="headerlink" title="加入logback日志"></a>加入logback日志</h3><ul>
<li>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件<code>logback.xml</code>，名字固定，不可改变<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="EHCache配置文件说明"><a href="#EHCache配置文件说明" class="headerlink" title="EHCache配置文件说明"></a>EHCache配置文件说明</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>是否必须</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>maxElementsInMemory</td>
<td>是</td>
<td>在内存中缓存的element的最大数目</td>
</tr>
<tr>
<td>maxElementsOnDisk</td>
<td>是</td>
<td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td>
</tr>
<tr>
<td>eternal</td>
<td>是</td>
<td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td>
</tr>
<tr>
<td>overflowToDisk</td>
<td>是</td>
<td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td>
</tr>
<tr>
<td>timeToIdleSeconds</td>
<td>否</td>
<td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td>
</tr>
<tr>
<td>timeToLiveSeconds</td>
<td>否</td>
<td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td>
</tr>
<tr>
<td>diskSpoolBufferSizeMB</td>
<td>否</td>
<td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td>
</tr>
<tr>
<td>diskPersistent</td>
<td>否</td>
<td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false</td>
</tr>
<tr>
<td>diskExpiryThreadIntervalSeconds</td>
<td>否</td>
<td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td>
</tr>
<tr>
<td>memoryStoreEvictionPolicy</td>
<td>否</td>
<td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td>
</tr>
</tbody></table>
<h1 id="MyBatis的逆向工程"><a href="#MyBatis的逆向工程" class="headerlink" title="MyBatis的逆向工程"></a>MyBatis的逆向工程</h1><ul>
<li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li>
<li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：  <ul>
<li>Java实体类  </li>
<li>Mapper接口  </li>
<li>Mapper映射文件</li>
</ul>
</li>
</ul>
<h2 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h2><h3 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- MyBatis核心依赖包 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建MyBatis的核心配置文件-1"><a href="#创建MyBatis的核心配置文件-1" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h3><ul>
<li>文件名必须是：<code>generatorConfig.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="执行MBG插件的generate目标"><a href="#执行MBG插件的generate目标" class="headerlink" title="执行MBG插件的generate目标"></a>执行MBG插件的generate目标</h3><ul>
<li><img src="/.com//%E6%89%A7%E8%A1%8CMBG%E6%8F%92%E4%BB%B6%E7%9A%84generate%E7%9B%AE%E6%A0%87.png"></li>
<li>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误<ul>
<li>dependency中的驱动<img src="/.com//dependency%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png"></li>
<li>mybatis-generator-maven-plugin插件中的驱动<img src="/.com//%E6%8F%92%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png"></li>
<li>两者的驱动版本应该相同</li>
</ul>
</li>
<li>执行结果<img src="/.com//%E9%80%86%E5%90%91%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></li>
</ul>
<h2 id="QBC"><a href="#QBC" class="headerlink" title="QBC"></a>QBC</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null；如果传入一个null，则表示没有条件，也就是查询所有数据</li>
<li><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</li>
<li><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件<br><img src="/.com//example%E7%9A%84%E6%96%B9%E6%B3%95.png"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line">	<span class="comment">//名字为张三，且年龄大于等于20</span></span><br><span class="line">	example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);</span><br><span class="line">	<span class="comment">//或者did不为空</span></span><br><span class="line">	example.or().andDidIsNotNull();</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="line">	emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/.com//example%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></li>
</ul>
<h3 id="增改"><a href="#增改" class="headerlink" title="增改"></a>增改</h3><ul>
<li><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null<ul>
<li><code>mapper.updateByPrimaryKey(new Emp(1,&quot;admin&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li>
<li><img src="/.com//%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></li>
</ul>
</li>
<li><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段<ul>
<li><code>mapper.updateByPrimaryKeySelective(new Emp(2,&quot;admin2&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li>
<li><img src="/.com//%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png"></li>
</ul>
</li>
</ul>
<h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><h2 id="分页插件使用步骤"><a href="#分页插件使用步骤" class="headerlink" title="分页插件使用步骤"></a>分页插件使用步骤</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><ul>
<li>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</li>
<li><img src="/.com//%E9%85%8D%E7%BD%AE%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png"><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h2><h3 id="开启分页功能"><a href="#开启分页功能" class="headerlink" title="开启分页功能"></a>开启分页功能</h3><ul>
<li>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能<ul>
<li>pageNum：当前页的页码  </li>
<li>pageSize：每页显示的条数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">	PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">	emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><img src="/.com//%E5%88%86%E9%A1%B5%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p>
<h3 id="分页相关数据"><a href="#分页相关数据" class="headerlink" title="分页相关数据"></a>分页相关数据</h3><h4 id="方法一：直接输出"><a href="#方法一：直接输出" class="headerlink" title="方法一：直接输出"></a>方法一：直接输出</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">	Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">	<span class="comment">//在查询到List集合后，打印分页数据</span></span><br><span class="line">	System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>分页相关数据：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;]</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="方法二使用PageInfo"><a href="#方法二使用PageInfo" class="headerlink" title="方法二使用PageInfo"></a>方法二使用PageInfo</h4><ul>
<li><p>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据</p>
<ul>
<li>list：分页之后的数据  </li>
<li>navigatePages：导航分页的页码数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">	PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps,<span class="number">5</span>);</span><br><span class="line">	System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>分页相关数据：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PageInfo&#123;</span><br><span class="line">pageNum=1, pageSize=4, size=4, startRow=1, endRow=4, total=8, pages=2, </span><br><span class="line">list=Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;], </span><br><span class="line">prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=5, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>其中list中的数据等同于方法一中直接输出的page数据</p>
</li>
</ul>
<h4 id="常用数据："><a href="#常用数据：" class="headerlink" title="常用数据："></a>常用数据：</h4><ul>
<li>pageNum：当前页的页码  </li>
<li>pageSize：每页显示的条数  </li>
<li>size：当前页显示的真实条数  </li>
<li>total：总记录数  </li>
<li>pages：总页数  </li>
<li>prePage：上一页的页码  </li>
<li>nextPage：下一页的页码</li>
<li>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页  </li>
<li>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页  </li>
<li>navigatePages：导航分页的页码数  </li>
<li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>web后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/2022/07/07/Mysql/</url>
    <content><![CDATA[<p>PDF请展开全文阅读</p>
<span id="more"></span>
<div class="pdfobject-container" data-target="MySQL.pdf" data-height="600px"></div>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2022/07/07/Spring/</url>
    <content><![CDATA[<p>PDF请展开全文阅读</p>
<span id="more"></span>
<div class="pdfobject-container" data-target="Spring.pdf" data-height="600px"></div>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>web后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2022/07/06/SpringMVC%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p>
<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>
<span id="more"></span>

<p>JavaBean分为两类：</p>
<ul>
<li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li>
<li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li>
</ul>
<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>
<p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p>
<p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p>
<h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p>
<p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p>
<blockquote>
<p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p>
</blockquote>
<h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul>
<li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li>
<li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li>
<li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li>
<li><strong>代码清新简洁</strong>，大幅度提升开发效率</li>
<li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li>
<li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
<h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2019.2</p>
<p>构建工具：maven3.5.4</p>
<p>服务器：tomcat7</p>
<p>Spring版本：5.3.1</p>
<h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p>
<p><img src="/.com//img%5Cimg001.png" alt="images"></p>
<h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p>
<h5 id="a-gt-默认配置方式"><a href="#a-gt-默认配置方式" class="headerlink" title="a&gt;默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-扩展配置方式"><a href="#b-gt-扩展配置方式" class="headerlink" title="b&gt;扩展配置方式"></a>b&gt;扩展配置方式</h5><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 		作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">		而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">		因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>&lt;url-pattern&gt;标签中使用&#x2F;和&#x2F;*的区别：</p>
<p>&#x2F;所匹配的请求可以是&#x2F;login或.html或.js或.css方式的请求路径，但是&#x2F;不能匹配.jsp请求路径的请求</p>
<p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p>
<p>&#x2F;*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用&#x2F;*的写法</p>
</blockquote>
<h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p>
<p>请求控制器中每一个处理请求的方法成为控制器方法</p>
<p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><h5 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>
<h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p>
<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>
<h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p>
<p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p>
<p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
<p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p>
<p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>
<p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p>
<p>处理get请求的映射–&gt;@GetMapping</p>
<p>处理post请求的映射–&gt;@PostMapping</p>
<p>处理put请求的映射–&gt;@PutMapping</p>
<p>处理delete请求的映射–&gt;@DeleteMapping</p>
<p>2、常用的请求方式有get，post，put，delete</p>
<p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p>
<p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p>
</blockquote>
<h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p>
<p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
<p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p>
<p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p>
<p>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</p>
<p>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数但是param!&#x3D;value</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!&#x3D;123456” not met for actual request parameters: username&#x3D;{admin}, password&#x3D;{123456}</p>
</blockquote>
<h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p>
<p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>
<p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p>
<p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p>
<p>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value</p>
<p>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header!&#x3D;value</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p>
<h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p>
<p>*：表示任意的0个或多个字符</p>
<p>**：表示任意的一层或多层目录</p>
<p>注意：在使用**时，只能使用&#x2F;**&#x2F;xxx的方式</p>
<h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p>
<p>rest方式：&#x2F;deleteUser&#x2F;1</p>
<p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure>

<h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p>
<p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p>
<p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p>
</blockquote>
<h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p>
<p>@RequestParam注解一共有三个属性：</p>
<p>value：指定为形参赋值的请求参数的参数名</p>
<p>required：设置是否必须传输此请求参数，默认值为true</p>
<p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>
<p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p>
<p>特殊情况：</p>
<p>如果参数为基本数据类型，且required为false，在没有默认值的情况下，没有传参数则会报错</p>
<h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p>
<p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p>
<p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPOJO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>
</blockquote>
<h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Model&#123;&#125;</span><br><span class="line">public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;</span><br><span class="line">public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;</span><br><span class="line">public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">	<span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p>
<p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p>
<p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p>
<p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p>
<h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/.com//img002.png"></p>
<h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p>
<p>SpringMVC中创建转发视图的情况：</p>
<p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p>
<p>例如”forward:&#x2F;“，”forward:&#x2F;employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/.com//img003.png" alt="image-20210706201316593"></p>
<h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p>
<p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
<p>例如”redirect:&#x2F;“，”redirect:&#x2F;employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/.com//img004.png" alt="image-20210706201602267"></p>
<blockquote>
<p>注：</p>
<p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以&#x2F;开头，若是则会自动拼接上下文路径</p>
</blockquote>
<h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">	view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p>
<p>&lt;mvc:annotation-driven &#x2F;&gt;</p>
</blockquote>
<h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p>
<h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>
<p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p>
<p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody><tr>
<td>查询操作</td>
<td>getUserById?id&#x3D;1</td>
<td>user&#x2F;1–&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user–&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id&#x3D;1</td>
<td>user&#x2F;1–&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user–&gt;put请求方式</td>
</tr>
</tbody></table>
<h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>
<p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p>
<p>a&gt;当前请求的请求方式必须为post</p>
<p>b&gt;当前请求必须传输请求参数_method</p>
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p>
<p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p>
<p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
<p>原因：</p>
<ul>
<li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p>
</li>
<li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p>
</li>
<li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p>
</li>
<li><p>&#96;&#96;&#96;<br>String paramValue &#x3D; request.getParameter(this.methodParam);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 八、RESTful案例</span><br><span class="line"></span><br><span class="line">### 1、准备工作</span><br><span class="line"></span><br><span class="line">和传统 CRUD 一样，实现对员工信息的增删改查。</span><br><span class="line"></span><br><span class="line">- 搭建环境</span><br><span class="line"></span><br><span class="line">- 准备实体类</span><br><span class="line"></span><br><span class="line"> ```java</span><br><span class="line"> package com.atguigu.mvc.bean;</span><br><span class="line"> </span><br><span class="line"> public class Employee &#123;</span><br><span class="line"> </span><br><span class="line">    private Integer id;</span><br><span class="line">    private String lastName;</span><br><span class="line"> </span><br><span class="line">    private String email;</span><br><span class="line">    //1 male, 0 female</span><br><span class="line">    private Integer gender;</span><br><span class="line">    </span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">       return id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">       this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getLastName() &#123;</span><br><span class="line">       return lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setLastName(String lastName) &#123;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">       return email;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">       this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Integer getGender() &#123;</span><br><span class="line">       return gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setGender(Integer gender) &#123;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee(Integer id, String lastName, String email, Integer gender) &#123;</span><br><span class="line">       super();</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">       this.email = email;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<ul>
<li><p>准备dao模拟数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">      employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">      employees.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">         employee.setId(initId++);</span><br><span class="line">      &#125;</span><br><span class="line">      employees.put(employee.getId(), employee);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.values();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.get(id);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">      employees.remove(id);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table>
<thead>
<tr>
<th>功能</th>
<th>URL 地址</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>访问首页√</td>
<td>&#x2F;</td>
<td>GET</td>
</tr>
<tr>
<td>查询全部数据√</td>
<td>&#x2F;employee</td>
<td>GET</td>
</tr>
<tr>
<td>删除√</td>
<td>&#x2F;employee&#x2F;2</td>
<td>DELETE</td>
</tr>
<tr>
<td>跳转到添加数据页面√</td>
<td>&#x2F;toAdd</td>
<td>GET</td>
</tr>
<tr>
<td>执行保存√</td>
<td>&#x2F;employee</td>
<td>POST</td>
</tr>
<tr>
<td>跳转到更新数据页面√</td>
<td>&#x2F;employee&#x2F;2</td>
<td>GET</td>
</tr>
<tr>
<td>执行更新√</td>
<td>&#x2F;employee</td>
<td>PUT</td>
</tr>
</tbody></table>
<h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>删除超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过vue处理点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deleteEmployee</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> delete_form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p>
<p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p>
<p>ResponseEntity</p>
<h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>requestBody:username&#x3D;admin&amp;password&#x3D;123456</p>
<h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age&#x3D;0”, sec-ch-ua:”” Not A;Brand”;v&#x3D;”99”, “Chromium”;v&#x3D;”90”, “Google Chrome”;v&#x3D;”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080&quot;">http://localhost:8080&quot;</a>, user-agent:”Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.93 Safari&#x2F;537.36”]<br>requestBody:username&#x3D;admin&amp;password&#x3D;123</p>
<h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：浏览器页面显示success</p>
<h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p>
<p>a&gt;导入jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure>

<p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p>
<p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>浏览器的页面中展示的结果：</p>
<p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p>
<h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;通过vue和axios处理点击事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">testAjax</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>:event.<span class="property">target</span>.<span class="property">href</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAjax</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,ajax&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p>
<h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p>
<h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径，此时路路径为target目录下文件的路径，即以webapp为起点的相对路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype&#x3D;”multipart&#x2F;form-data”</p>
<p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p>
<p>上传步骤：</p>
<p>a&gt;添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的配置文件中添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hzName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p>
<p>SpringMVC中的拦截器需要实现HandlerInterceptor</p>
<p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /*拦截一层 /**拦截所有请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p>
<p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>
<p>postHandle：控制器方法执行之后执行postHandle()</p>
<p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>
<h3 id="3、创建拦截器"><a href="#3、创建拦截器" class="headerlink" title="3、创建拦截器"></a>3、创建拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorDemo1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//返回值表示是否放行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> HandlerInterceptor.<span class="built_in">super</span>.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、多个拦截器的执行顺序"><a href="#4、多个拦截器的执行顺序" class="headerlink" title="4、多个拦截器的执行顺序"></a>4、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p>
<p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p>
<p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p>
<p>b&gt;若某个拦截器的preHandle()返回了false</p>
<p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p>
<h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p>
<p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p>
<p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        		properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        		properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">        	--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">		使用&lt;p th:text=&quot;@&#123;ex&#125;&quot;&gt;进行解析</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p>
<h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">	<span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><p>需要配置的功能：组件扫描，视图解析器，view-controller，静态资源处理，mvc注解驱动，文件上传解析器，异常处理，拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">//通过实现接口来实现对静态资源的处理等功能（解决原配置文件中仅用标签实现的功能）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul>
<li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>
<ul>
<li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<ul>
<li>Handler(Controller)：<strong>处理器</strong>，即控制器方法，需要工程师开发</li>
</ul>
<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<ul>
<li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<ul>
<li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>
<ul>
<li>View：<strong>视图</strong></li>
</ul>
<p>作用：将模型数据通过页面展示给用户</p>
<h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>
<p><img src="/.com//img005.png" alt="images"></p>
<h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span></span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p>
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initStrategies</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p>
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">failureCause</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> <span class="title class_">RequestBindingInterceptor</span>());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.flashMapManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">FlashMap</span> <span class="variable">inputFlashMap</span> <span class="operator">=</span> <span class="built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> <span class="title class_">FlashMap</span>());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="built_in">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestPath</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            	mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            	handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            	interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            	interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           	<span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> (mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><ol>
<li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p>
</li>
<li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p>
</li>
</ol>
<p>a) 不存在</p>
<p>i. 再判断是否配置了mvc:default-servlet-handler</p>
<p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p>
<p><img src="/.com//img006.png" alt="image-20210709214911404"></p>
<p><img src="/.com//img007.png" alt="image-20210709214947432"></p>
<p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p>
<p><img src="/.com//img008.png" alt="image-20210709215255693"></p>
<p><img src="/.com//img009.png" alt="image-20210709215336097"></p>
<p>b) 存在则执行下面的流程</p>
<ol start="3">
<li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p>
</li>
<li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p>
</li>
<li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p>
</li>
<li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
</li>
</ol>
<p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p>
<p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p>
<p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p>
<p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>
<ol start="7">
<li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p>
</li>
<li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p>
</li>
<li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p>
</li>
<li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p>
</li>
<li><p>将渲染结果返回给客户端。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>web后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Java操作Excel文件</title>
    <url>/2022/07/10/Java%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Apache-poi"><a href="#Apache-poi" class="headerlink" title="Apache-poi"></a>Apache-poi</h1><h3 id="1、基本原理"><a href="#1、基本原理" class="headerlink" title="1、基本原理"></a>1、基本原理</h3><p>将办公文档的所有元素封装为普通的Java类，操作Java类即可达到操作办公文档的目的</p>
<span id="more"></span>

<h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><p>1、添加maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、使用工具类生成Excel文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建HSSFWorkbook对象，对应一个Excel文件</span></span><br><span class="line">      <span class="type">HSSFWorkbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br><span class="line">      <span class="comment">//创建Excel文件中的一页</span></span><br><span class="line">      <span class="type">HSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> wb.createSheet(<span class="string">&quot;学生列表&quot;</span>);</span><br><span class="line">      <span class="comment">//创建页中的第一行</span></span><br><span class="line">      <span class="type">HSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);<span class="comment">//参数为行号，从0开始</span></span><br><span class="line">      <span class="comment">//创建行中的三个列，并赋值</span></span><br><span class="line">      <span class="type">HSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(<span class="number">0</span>);<span class="comment">//参数为列号，从0开始</span></span><br><span class="line">      cell.setCellValue(<span class="string">&quot;学号&quot;</span>);</span><br><span class="line">      cell = row.createCell(<span class="number">1</span>);</span><br><span class="line">      cell.setCellValue(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">      cell = row.createCell(<span class="number">2</span>);</span><br><span class="line">      cell.setCellValue(<span class="string">&quot;年龄&quot;</span>);</span><br><span class="line">      <span class="comment">//生成样式对象修饰文件</span></span><br><span class="line"><span class="comment">//样式对象有多个方法修饰不同样式</span></span><br><span class="line">      <span class="type">HSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> wb.createCellStyle();</span><br><span class="line">      cellStyle.setAlignment(HorizontalAlignment.CENTER);<span class="comment">//设置居中</span></span><br><span class="line">      <span class="comment">//使用sheet创建多个HSSFRow对象</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">          row = sheet.createRow(i);</span><br><span class="line">          cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">          cell.setCellValue(<span class="number">100</span> + i);</span><br><span class="line">          cell = row.createCell(<span class="number">1</span>);</span><br><span class="line">          cell.setCellValue(<span class="string">&quot;NAME&quot;</span> + i);</span><br><span class="line">          cell = row.createCell(<span class="number">2</span>);</span><br><span class="line">          cell.setCellStyle(cellStyle);<span class="comment">//设置最后一列居中</span></span><br><span class="line">          cell.setCellValue(<span class="number">20</span> + i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//调用工具函数，生成Excel文件</span></span><br><span class="line">      <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;文件路径&quot;</span>);</span><br><span class="line"><span class="comment">//用response获取输出流，可直接向浏览器输出</span></span><br><span class="line">      wb.write(os);</span><br><span class="line">      <span class="comment">//关闭资源</span></span><br><span class="line">      os.close();</span><br><span class="line">      wb.close();</span><br></pre></td></tr></table></figure>

<p>3、使用工具类解析Excel文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据Excel文件生成对象</span></span><br><span class="line">      <span class="type">HSSFWorkbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">      <span class="comment">//获取HSSFSheet对象</span></span><br><span class="line">      <span class="type">HSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> wb.getSheetAt(<span class="number">0</span>);<span class="comment">//下标从零开始</span></span><br><span class="line">      <span class="comment">//获取HSSFRow对象</span></span><br><span class="line">      <span class="type">HSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="type">HSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= sheet.getLastRowNum(); i++) &#123; <span class="comment">//获取最后一行下标</span></span><br><span class="line">          row = sheet.getRow(i);          <span class="comment">//下标从0开始</span></span><br><span class="line">          <span class="comment">//获取HSSFCell对象</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; row.getLastCellNum(); j++) &#123;</span><br><span class="line">              cell = row.getCell(i);     <span class="comment">//下标从1开始</span></span><br><span class="line">              <span class="comment">//获取列中的数据</span></span><br><span class="line">              <span class="keyword">if</span>(cell.getCellType() == HSSFCell.CELL_TYPE_STRING) &#123;	<span class="comment">//先判断数据的类型，再根据类型获取数据</span></span><br><span class="line">                  System.out.println(cell.getStringCellValue());</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>零散技术</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法基础</title>
    <url>/2022/07/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1、复杂度"><a href="#1、复杂度" class="headerlink" title="1、复杂度"></a>1、复杂度</h2><span id="more"></span>

<h3 id="1、时间复杂度"><a href="#1、时间复杂度" class="headerlink" title="1、时间复杂度"></a>1、时间复杂度</h3><p>一次操作如果与数据量没有关系，每次按照固定的时间完成操作，称为常数操作。</p>
<p>时间复杂度为一个算法流程中，常数操作数量的一个指标，用O表示。根据常数操作数目，推算出常数操作的表达式。</p>
<p>在表达式中只要高阶项，排除低阶项和常数项，排除高阶项系数，剩余的部分如果为f(N)，则时间复杂度为O(f(N))。</p>
<p>评价一个算法的好坏，先看时间复杂度的指标，在分析不同样本下的实际运行时间，即常数项时间，时间复杂度相同时，根据实际测试确定算法好坏</p>
<p>对于if-else操作，时间复杂度为较大者；对于for操作，时间复杂度为两者乘积</p>
<p>选择排序时间复杂度：一个长度为n的数组</p>
<ol>
<li><p>第一次比较，查询n次，比较n次，1次交换</p>
</li>
<li><p>第二次比较，查询n-1次，比较n-1次，1次交换</p>
</li>
<li><p>以此类推</p>
</li>
<li><p>常数操作次数相加，求和的到表达式：<br>$$<br>an^2+bn+c<br>$$</p>
</li>
<li><p>排除低阶项和常数项，排除高阶项系数</p>
</li>
<li><p>得时间复杂度<br>$$<br>O(N^2)<br>$$</p>
</li>
<li></li>
</ol>
<p>关于异或运算的几个性质：</p>
<ol>
<li>a^a&#x3D;0,	a^0&#x3D;a</li>
<li>异或运算满足交换律结合律</li>
<li>可以理解为无进位的二进制相加</li>
</ol>
<h3 id="2、空间复杂度"><a href="#2、空间复杂度" class="headerlink" title="2、空间复杂度"></a>2、空间复杂度</h3><p>要完成自己设计流程 需要多少额外的空间</p>
<p>如果程序运行过程中，不需要额外的数据结构，只是使用了额外的几个变量。那么额外空间复杂度为O(1)；<br>如果要申请一个和原数组大小一样的数组，那额外空间复杂度为O(n)；<br>如果申请一个是原数组大小一半的数组，那额外空间复杂度为O(n)（因为系数是可以忽略的）</p>
<h3 id="3、最差情况下的进行时间复杂度计算"><a href="#3、最差情况下的进行时间复杂度计算" class="headerlink" title="3、最差情况下的进行时间复杂度计算"></a>3、最差情况下的进行时间复杂度计算</h3><p>插入排序</p>
<ol>
<li>先保障0到1有序，从第1位向前比较</li>
<li>再保障0到2有序，从第二位向前比较</li>
<li>以此类推</li>
</ol>
<p>最差时间复杂度:<br>$$<br>O(N^2)<br>$$<br>但是在该算法中，时间复杂度与数据情况相关。</p>
<p>所以时间复杂度的计算应修正为数据情况最差的情况下的时间复杂度</p>
<h3 id="4、递归行为和递归行为时间复杂度的估算"><a href="#4、递归行为和递归行为时间复杂度的估算" class="headerlink" title="4、递归行为和递归行为时间复杂度的估算"></a>4、递归行为和递归行为时间复杂度的估算</h3><p>使用master公式估计递归时间复杂度<br>$$<br>T(N) &#x3D; a*T(N&#x2F;b) + O(N^d)<br>$$<br>母问题的规模为N，等于子问题规模为N&#x2F;b（子问题即为递归调用），且子问题调用a次，加上除去递归的时间复杂度</p>
<p>条件：<br>$$<br>\log_ba&lt;d &#x3D;&gt; O(N^d)<br>$$</p>
<p>$$<br>\log_ba&gt;d &#x3D;&gt; O(N的\log_ba次)<br>$$</p>
<p>$$<br>\log_ba&#x3D;d &#x3D;&gt; O(N^d * logN)<br>$$</p>
<p>由此可以确定递归的时间复杂度</p>
<p>归并排序：</p>
<ol>
<li>将数组分为两个部分，递归分割</li>
<li>返回时合并左右两侧数组为一个临时数组，从两侧选择较小的数填入数组，较小侧指针右移，再次比较</li>
<li>将临时将临时数组赋值到一个新数组上</li>
</ol>
<p>时间复杂度：O(N*logN)，空间复杂度O(N)</p>
<p>快速排序：</p>
<ol>
<li>随机给定一个值num并将其与数组末尾交换，先将数组化为三个区域，大于区，小于区，等于区</li>
<li>当小于时将此数与小于区的下一位交换，小于区从左向右扩大一位，数组指针右移</li>
<li>当大于时将此数与大于区的上一位交换，大于区从右向左扩大一位，数组指针不动</li>
<li>当等于时，数组指针右移，数组指针等于大于区时停止</li>
<li>递归调用，将等于区左边第一位和等于去右边第一位和本次调用最两侧作为新的边界，当右侧边界小于等于左侧边界时，方法返回</li>
</ol>
<p>时间复杂度：O(N*logN)，空间复杂度：O(logN)</p>
<h2 id="2、堆"><a href="#2、堆" class="headerlink" title="2、堆"></a>2、堆</h2><p>堆为完全二叉树，每一层从左向右一次加满</p>
<p>大根堆：每颗子树的根节点为整颗数最大的节点</p>
<p>小根堆：每颗子树的根节点为整颗数最小的节点，又被称为优先级队列，java中的类为PriorityQueue</p>
<p>如果使用连续数组储存二叉树：父节点点（下标为i）的</p>
<ol>
<li>左下角数的索引为2 * i + 1</li>
<li>右下角数的索引为2 * i + 2</li>
<li>其父结点索引为(i - 1)  &#x2F; 2</li>
</ol>
<p>操作（大根堆）：</p>
<ol>
<li>heapInsert：将一个数和父节点进行比较，如果大于父节点则与其交换，直至父节点大于等于该数或该数的索引为0</li>
<li>heapify（堆化）：将一个数和子节点的较大值与其比较，如果小于子节点则与其交换，直至子节点均小于该数或者没有子节点</li>
</ol>
<p>对于完全二叉树的一次操作，时间复杂度为O(logN)</p>
<p>堆排序：将一个原始数组转换为堆，将最大值取出放到堆的最后一位堆大小减一，再将整个堆堆化，以此类推，直至取出所有的数，整个数组即完成排序</p>
<p>堆的每一步操作时间复杂为O(logN)，遍历整个堆的时间复杂度为O(N)，循环嵌套，整个堆排序时间复杂度为O(N*logN)</p>
<h2 id="3、排序"><a href="#3、排序" class="headerlink" title="3、排序"></a>3、排序</h2><p>1、桶排序</p>
<p>取0到9十个桶（即容器），按照每个数的个位放进每个桶，再将从0开始到9的桶里数依次倒出，每个桶中的数字先进先出，再按照十位百位以此类推，排完所有数位即完成排序 </p>
<p>具体实现：</p>
<ol>
<li>构造一个长度为10的数频表，记录每个数字出现的次数，记录完成后将其转换为一个前缀和数表，其意义为，小于等于索引 i 的数共产生了多少次。</li>
<li>取出数时，从原数组的右侧遍历（保证先进先出），根据前缀和数表的具体数字决定其位置，取出数前将前缀表对应位置的数减一，然后将其作为在临时数组中的索引</li>
</ol>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>数据结构与算法基础</tag>
      </tags>
  </entry>
  <entry>
    <title>开发日记-条件分页查询的实现</title>
    <url>/2022/07/15/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-%E6%9D%A1%E4%BB%B6%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><span id="more"></span>

<p>在crm项目中的线索部分，点开页面后需要分页展示数据库内的全部线索的部分信息和总条数，并且在该页面内可以输入一定的条件，点击查询按钮后分页展示符合条件的线索的部分信息和总条数</p>
<p><img src="/.com//1.jpg" alt="需求说明"></p>
<h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>表结构：线索表(tbl_clue)其结构如下图所示，其中owner、source、state为外键字段保存各自id分别储存在tbl_user、tbl_dic_value表中</p>
<p><img src="/.com//2.jpg" alt="2"></p>
<p>流程：前端页面收集数据，发送异步请求到服务器，控制器封装参数，调用service层再调用mapper层执行sql语句，返回结果后控制器将结果返回为一个json字符串，前端页面解析json字符串并通过拼接页面的方式展示数据</p>
<p>技术需求：jQuery、ajax、ssm框架、前端分页插件</p>
<h2 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h2><p>1、SQL语句的书写</p>
<p>在该需求中，每次查询的条件不一定全部都存在，且需要进行连接、分页查询。需查询符合条件的全部线索和线索条数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectClueForPage&quot; resultType<span class="operator">=</span>&quot;com.bjpowernode.crm.workbench.domain.Clue&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">select</span> c.id, c.fullname, c.company, c.phone, c.mphone, d1.value <span class="keyword">as</span> source, u1.name <span class="keyword">as</span> owner, d2.value</span><br><span class="line">    <span class="keyword">from</span> tbl_clue c</span><br><span class="line">    <span class="keyword">join</span> tbl_user u1 <span class="keyword">on</span> c.owner <span class="operator">=</span> u1.id</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> tbl_dic_value d1 <span class="keyword">on</span> c.source <span class="operator">=</span> d1.id</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> tbl_dic_value d2 <span class="keyword">on</span> c.state <span class="operator">=</span> d2.id</span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;id != null and id !=&#x27;&#x27;&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> c.id <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span> #&#123;id&#125; <span class="string">&#x27;%&#x27;</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;company != null and company !=&#x27;&#x27;&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> c.company <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span> #&#123;company&#125; <span class="string">&#x27;%&#x27;</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;phone != null and phone !=&#x27;&#x27;&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> c.phone <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span> #&#123;phone&#125; <span class="string">&#x27;%&#x27;</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;source != null and source !=&#x27;&#x27;&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> d1.id <span class="operator">=</span> #&#123;source&#125;</span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;owner != null and owner !=&#x27;&#x27;&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> u1.name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span> #&#123;owner&#125; <span class="string">&#x27;%&#x27;</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;mphone != null and mphone !=&#x27;&#x27;&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> c.mphone <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span> #&#123;mphone&#125; <span class="string">&#x27;%&#x27;</span></span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;state != null and state !=&#x27;&#x27;&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> d2.id <span class="operator">=</span> #&#123;state&#125;</span><br><span class="line">      <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> c.create_time <span class="keyword">desc</span></span><br><span class="line">    limit #&#123;beginNo&#125;, #&#123;pageSize&#125;</span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>在该语句中线索表的owner字段储存着id，这个字段的值储存在用户表的name字段中因此连接查询用户表，source和state字段同理，不过前者不可以为空后者可以为空，因此分别使用内连接和外连接，对应的查询使用模糊查询。连接查询到对应字段后，因为结果需要被包装为一个Clue类，因此将连接查询的字段取别名为Clue类属性的对应字段名。查询条件不一定都存在，因此使用MyBatis的where和if标签。查询条数时将查询字段该为<code>count(*)</code>、删除<code>limit</code>即可</p>
<p>2、mapper层和service层</p>
<p>常规处理即可</p>
<p>3、controller层</p>
<p>controller层需要接受并传递查询的所有条件，以及分页查询的起始位置以及显示条数，并将查询结果返回给浏览器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/workbench/clue/queryClueForPage.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">queryClueForPage</span><span class="params">(String fullname, String company, String phone, String source, String owner, String mphone, String state, <span class="type">int</span> pageNo, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;fullname&quot;</span>, fullname);</span><br><span class="line">        map.put(<span class="string">&quot;company&quot;</span>, company);</span><br><span class="line">        map.put(<span class="string">&quot;phone&quot;</span>, phone);</span><br><span class="line">        map.put(<span class="string">&quot;source&quot;</span>, source);</span><br><span class="line">        map.put(<span class="string">&quot;owner&quot;</span>, owner);</span><br><span class="line">        map.put(<span class="string">&quot;mphone&quot;</span>, mphone);</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, state);</span><br><span class="line">        map.put(<span class="string">&quot;beginNo&quot;</span>, (pageNo - <span class="number">1</span>) * pageSize);</span><br><span class="line">        map.put(<span class="string">&quot;pageSize&quot;</span>, pageSize);</span><br><span class="line">        List&lt;Clue&gt; clueList = clueService.queryClueForPage(map);</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalRows</span> <span class="operator">=</span> clueService.countClueByCondition(map);</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        resultMap.put(<span class="string">&quot;clueList&quot;</span>,clueList);</span><br><span class="line">        resultMap.put(<span class="string">&quot;totalRows&quot;</span>,totalRows);</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为需要传递的参数中存在分页查询的起始位置和每页条数，因此不能通过Clue实体类传递参数给SQL语句，使用Map封装参数并传递。分页查询的起始位置需要通过查询的页数及每页条数计算得到。将返回结果用Map封装并返回</p>
<p>4、前端页面</p>
<p>前端页面需要收集参数，通过ajax发送异步请求，待服务器处理后，接受json字符并解析，通过拼接字符串的形式显示页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给查询按钮添加单击事件</span></span><br><span class="line">		$(<span class="string">&quot;#queryBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">			<span class="title function_">queryClueByConditionForPage</span>(<span class="number">1</span>, $(<span class="string">&quot;#demo_pag1&quot;</span>).<span class="title function_">bs_pagination</span>(<span class="string">&#x27;getOption&#x27;</span>, <span class="string">&#x27;rowsPerPage&#x27;</span>));</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="comment">//分页查询线索函数</span></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">queryClueByConditionForPage</span>(<span class="params">pageNo, pageSize</span>)&#123;</span><br><span class="line">		<span class="comment">//收集参数</span></span><br><span class="line">		<span class="keyword">var</span> fullname = $.<span class="title function_">trim</span>($(<span class="string">&quot;#queryFullname&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">		<span class="keyword">var</span> owner = $(<span class="string">&quot;#queryOwner&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">		<span class="keyword">var</span> company = $.<span class="title function_">trim</span>($(<span class="string">&quot;#queryCompany&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">		<span class="keyword">var</span> phone = $.<span class="title function_">trim</span>($(<span class="string">&quot;#queryPhone&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">		<span class="keyword">var</span> mphone = $.<span class="title function_">trim</span>($(<span class="string">&quot;#queryMphone&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">		<span class="keyword">var</span> state = $(<span class="string">&quot;#queryState&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">		<span class="keyword">var</span> source = $(<span class="string">&quot;#querySource&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">		<span class="comment">//发送请求</span></span><br><span class="line">		$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">			<span class="attr">url</span>: <span class="string">&#x27;workbench/clue/queryClueForPage.do&#x27;</span>,</span><br><span class="line">			<span class="attr">data</span>: &#123;</span><br><span class="line">				<span class="attr">fullname</span>: fullname,</span><br><span class="line">				<span class="attr">owner</span>: owner,</span><br><span class="line">				<span class="attr">company</span>: company,</span><br><span class="line">				<span class="attr">phone</span>: phone,</span><br><span class="line">				<span class="attr">mphone</span>: mphone,</span><br><span class="line">				<span class="attr">state</span>: state,</span><br><span class="line">				<span class="attr">source</span>: source,</span><br><span class="line">				<span class="attr">pageNo</span>: pageNo,</span><br><span class="line">				<span class="attr">pageSize</span>: pageSize</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">			<span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">			<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">				<span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">				$.<span class="title function_">each</span>(data.<span class="property">clueList</span>, <span class="keyword">function</span> (<span class="params">index, obj</span>) &#123;</span><br><span class="line">					html += <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">					html += <span class="string">&quot;&lt;td&gt;&lt;input type=\&quot;checkbox\&quot; /&gt;&lt;/td&gt;&quot;</span>;</span><br><span class="line">					html += <span class="string">&quot;&lt;td&gt;&lt;a style=\&quot;text-decoration: none; cursor: pointer;\&quot; onclick=\&quot;window.location.href=&#x27;detail.html&#x27;;\&quot;&gt;&quot;</span> + obj.<span class="property">fullname</span> + <span class="string">&quot;&lt;/a&gt;&lt;/td&gt;&quot;</span>;</span><br><span class="line">					html += <span class="string">&quot;&lt;td&gt;&quot;</span> + obj.<span class="property">company</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">					html += <span class="string">&quot;&lt;td&gt;&quot;</span> + obj.<span class="property">phone</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">					html += <span class="string">&quot;&lt;td&gt;&quot;</span> + obj.<span class="property">mphone</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">					html += <span class="string">&quot;&lt;td&gt;&quot;</span> + obj.<span class="property">source</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">					html += <span class="string">&quot;&lt;td&gt;&quot;</span> + obj.<span class="property">owner</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">					html += <span class="string">&quot;&lt;td&gt;&quot;</span> + obj.<span class="property">state</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">					html += <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">				&#125;);</span><br><span class="line">				$(<span class="string">&quot;#tBody&quot;</span>).<span class="title function_">html</span>(html);</span><br><span class="line">				<span class="keyword">var</span> totalPages = <span class="number">1</span>;</span><br><span class="line">				totalPages = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(data.<span class="property">totalRows</span> / pageSize);</span><br><span class="line">				<span class="comment">//调用分页工具函数，显示翻页信息</span></span><br><span class="line">				$(<span class="string">&quot;#demo_pag1&quot;</span>).<span class="title function_">bs_pagination</span>(&#123;</span><br><span class="line">					<span class="attr">currentPage</span>: pageNo, <span class="comment">//当前页数</span></span><br><span class="line">					<span class="attr">rowsPerPage</span>: pageSize, <span class="comment">//每页显示条数</span></span><br><span class="line">					<span class="attr">totalRows</span>: data.<span class="property">totalRows</span>, <span class="comment">//总条数</span></span><br><span class="line">					<span class="attr">totalPages</span>: totalPages, <span class="comment">//总页数，必填数据</span></span><br><span class="line">					<span class="attr">visiblePageLinks</span>: <span class="number">5</span>, <span class="comment">//一组最多显示的页数</span></span><br><span class="line">					<span class="attr">showGoToPage</span>: <span class="literal">true</span>, <span class="comment">//显示前往某一页的快捷方式</span></span><br><span class="line">					<span class="attr">showRowsPerPage</span>: <span class="literal">true</span>, <span class="comment">//显示每页显示的条数信息</span></span><br><span class="line">					<span class="attr">showRowsInfo</span>: <span class="literal">true</span>, <span class="comment">//显示记录信息</span></span><br><span class="line">					<span class="attr">onChangePage</span>: <span class="keyword">function</span> (<span class="params">event, pageObj</span>) &#123;  <span class="comment">//pageObj存储着关于页数等信息，即上面的属性</span></span><br><span class="line">					<span class="title function_">queryClueByConditionForPage</span>(pageObj.<span class="property">currentPage</span>, pageObj.<span class="property">rowsPerPage</span>)</span><br><span class="line">					&#125; <span class="comment">//当用户切换页号，自动执行该部分代码,可以返回切换页号后的页数和每页条数</span></span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​																						<strong>VUE真的是太棒啦！！！！</strong></p>
<p><img src="/.com//%E6%97%A0%E8%AF%AD.jpg" alt="无语"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>开发日记</tag>
      </tags>
  </entry>
  <entry>
    <title>开发日记-子查询的实际应用</title>
    <url>/2022/07/16/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h4 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h4><p>在crm的项目中，在线索明细界面给线索关联市场活动，在搜索市场活动的模态窗口内，要求能够模糊查询出未被关联市场活动</p>
<span id="more"></span>

<h4 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h4><p>前端传入模糊查询的名字和要进行关联的线索的id，在模态窗口内显示市场活动的名称、开始日期、结束日期、所有者等字段，先连接用户表查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  a.id, a.name, a.start_date, a.end_date, u.name <span class="keyword">as</span> owner</span><br><span class="line">    <span class="keyword">from</span> tbl_activity a</span><br><span class="line">    <span class="keyword">join</span> tbl_user u <span class="keyword">on</span> a.owner <span class="operator">=</span> u.id</span><br><span class="line">    <span class="keyword">where</span> a.name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span> #&#123;activityName&#125; <span class="string">&#x27;%&#x27;</span></span><br></pre></td></tr></table></figure>

<p>要排除被该线索关联的市场活动，需要先在线索和市场活动关联表中查询出已经被该线索关联的市场活动的id再进行排除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> activity_id <span class="keyword">from</span> tbl_clue_activity_relation <span class="keyword">where</span> clue_id <span class="operator">=</span> #&#123;clueId&#125;</span><br></pre></td></tr></table></figure>

<p>第二个SQL语句的查询结果作为第一个SQL语句的子查询排查条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  a.id, a.name, a.start_date, a.end_date, u.name <span class="keyword">as</span> owner</span><br><span class="line">    <span class="keyword">from</span> tbl_activity a</span><br><span class="line">    <span class="keyword">join</span> tbl_user u <span class="keyword">on</span> a.owner <span class="operator">=</span> u.id</span><br><span class="line">    <span class="keyword">where</span> a.name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span> #&#123;activityName&#125; <span class="string">&#x27;%&#x27;</span></span><br><span class="line">    <span class="keyword">and</span> a.id <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">        <span class="keyword">select</span> activity_id</span><br><span class="line">        <span class="keyword">from</span> tbl_clue_activity_relation</span><br><span class="line">        <span class="keyword">where</span> clue_id <span class="operator">=</span> #&#123;clueId&#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>即可完成需求</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>开发日记</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2022/07/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Iterator模式"><a href="#Iterator模式" class="headerlink" title="Iterator模式"></a>Iterator模式</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>在循环中，将循环变量抽象化、通用化形成的设计模式。Iterate也被称为迭代器。</p>
<span id="more"></span>

<h2 id="2、Iterator接口"><a href="#2、Iterator接口" class="headerlink" title="2、Iterator接口"></a>2、Iterator接口</h2><p>该接口用于遍历集合中的元素，其作用相当于循环变量i。包含以下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否有下一个元素，用作循环终止的条件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//获取下一个元素，该方法隐含将就迭代器移动至下一个元素的处理，返回当前元素，并指向下一个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title function_">next</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h2><p>设计一个原始的用于储存元素的类和实现Iterator接口的类，在前者设计方法返回一个实现Iterator接口的类，将其自身作为参数传递，后者将储存元素的类作为自身属性，并实现抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Iterator</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BookShelf</span> <span class="variable">bookShelf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookShelf</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            bookShelf.appendBook(<span class="keyword">new</span> <span class="title class_">Book</span>(i + <span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        java.util.<span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> bookShelf.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookShelfIterator</span> <span class="keyword">implements</span> <span class="title class_">java</span>.util.Iterator&lt;Book&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookShelf bookShelf;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookShelfIterator</span><span class="params">(BookShelf bookShelf)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookShelf = bookShelf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; bookShelf.getLength()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">temp</span> <span class="operator">=</span> bookShelf.getBookAt(index);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookShelf</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Book[] books;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> last;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookShelf</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        books = <span class="keyword">new</span> <span class="title class_">Book</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getBookAt</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> books[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        books[last] = book;</span><br><span class="line">        last++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> java.util.Iterator <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookShelfIterator</span>(<span class="built_in">this</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4、要点"><a href="#4、要点" class="headerlink" title="4、要点"></a>4、要点</h2><h3 id="1、为何使用该设计模式"><a href="#1、为何使用该设计模式" class="headerlink" title="1、为何使用该设计模式"></a>1、为何使用该设计模式</h3><p>解耦：使用该模式遍历不取决于储存结构的具体实现，例如上面的例子中储存book可以用数组也可以用集合，只要其能返回正确的Iterator实例，就可以不用改动while循环，将遍历与实现分开，可以提高代码复用性</p>
<h3 id="2、可以根据需求设计多种多种类型的迭代器"><a href="#2、可以根据需求设计多种多种类型的迭代器" class="headerlink" title="2、可以根据需求设计多种多种类型的迭代器"></a>2、可以根据需求设计多种多种类型的迭代器</h3><h3 id="3、注意Iterator接口中抽象方法的设计"><a href="#3、注意Iterator接口中抽象方法的设计" class="headerlink" title="3、注意Iterator接口中抽象方法的设计"></a>3、注意Iterator接口中抽象方法的设计</h3><p>不要弄混当前指向的元素和需要返回的元素</p>
<h1 id="Adapter模式"><a href="#Adapter模式" class="headerlink" title="Adapter模式"></a>Adapter模式</h1><h2 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h2><p>开发中会存在实际情况与需求间存在差异，现有程序无法直接使用，需要经过适当变化后才能使用的情况，用于填补中间差异的设计模式被称为Adapter设计模式。该设计模式也被称为Wrapper模式。分为两种，类适配器模式（使用继承的适配器），对象适配器模式（使用委托的适配器）</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2022/07/23/SpringBoot/</url>
    <content><![CDATA[<h1 id="一、快速开发"><a href="#一、快速开发" class="headerlink" title="一、快速开发"></a>一、快速开发</h1><h2 id="1、helloworld"><a href="#1、helloworld" class="headerlink" title="1、helloworld"></a>1、helloworld</h2><p>1、引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、创建main方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、编写业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/helloworld&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、运行main方法</p>
<p>在地址栏输入对应路径</p>
<span id="more"></span>

<h2 id="2、简化开发"><a href="#2、简化开发" class="headerlink" title="2、简化开发"></a>2、简化开发</h2><p>1、所有配置被抽取放在同一个配置文件</p>
<p>配置文件名字同一为application.properties(或者yaml，两者可以共存)，可以在该文件修改端口号、配置SpringMVC等等，具体参照官方文档</p>
<p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/index.html"></a></p>
<p>2、可以将项目打包为jar包，包含全部运行环境，可直接在命令行运行jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要取消cmd的快速编辑模式</p>
<h1 id="二、了解自动配置原理"><a href="#二、了解自动配置原理" class="headerlink" title="二、了解自动配置原理"></a>二、了解自动配置原理</h1><h2 id="1、依赖管理"><a href="#1、依赖管理" class="headerlink" title="1、依赖管理"></a>1、依赖管理</h2><p>1、父项目进行管理依赖，几乎声明了开发中常用的jar包版本，后续引用无需版本号。自动仲裁版本，也可自行修改版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--父类依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在pom.xml自行修改版本,需要去查看对应jar包的key--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>xxx.xxx.xxx<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、引入starter场景启动器</p>
<p>只要引入starter，对应场景的常用依赖将自动引入，具体starter参考官方文档</p>
<p>spring-boot-starter-*为官方启动器，*-spring-boot-starter为第三方启动器</p>
<h2 id="2、自动配置"><a href="#2、自动配置" class="headerlink" title="2、自动配置"></a>2、自动配置</h2><p>自动配置好Tomcat、SpringMVC、web常用应用组件（如字符编码拦截器、视图解析器等等）</p>
<p>有默认包结构，main方法所在包下的所有子包的组件都会被扫描，包外的组件需要扫描，可以在@SpringBootApplication(scanBasePackages&#x3D;”xxx”)改变扫描路径，或者使用@ComponentScan指定扫描</p>
<p>各种配置拥有默认值，比如Tomcat默认端口号、文件上传默认大小等等，这些默认配置最终被映射到MultipartProperties类中，配置文件的值也会绑定到对应的类中，并在容器中创建对象</p>
<p>按需加载自动配置项，所有自动配置都在spring-boot-autoconfigure包中</p>
<h2 id="3、容器功能"><a href="#3、容器功能" class="headerlink" title="3、容器功能"></a>3、容器功能</h2><h3 id="1、组件添加"><a href="#1、组件添加" class="headerlink" title="1、组件添加"></a>1、组件添加</h3><h4 id="1、-Configuration"><a href="#1、-Configuration" class="headerlink" title="1、@Configuration"></a>1、@Configuration</h4><p>编写配置类，等同于配置文件。</p>
<p>属性：</p>
<p>proxyBeanMethods：默认为true，获取单实例组件对象（代理对象），组件之间没有依赖关系设置为false减少判断，组件间有依赖设置为true保持单实例</p>
<h4 id="2、-Bean"><a href="#2、-Bean" class="headerlink" title="2、@Bean"></a>2、@Bean</h4><p>注解在方法上，在容器中添加以方法名作为组件的id，返回类型作为组件类型的组件。也可以在标签内自定义组件id。默认为单实例。</p>
<p>如果方法中存在参数，则会去容器中寻找对应的对象作为参数注入方法</p>
<h4 id="3、-Component、-Controller等"><a href="#3、-Component、-Controller等" class="headerlink" title="3、@Component、@Controller等"></a>3、@Component、@Controller等</h4><h4 id="4、-Import"><a href="#4、-Import" class="headerlink" title="4、@Import"></a>4、@Import</h4><p>注解在配置类上，可以直接调用无参构造器，在容器中注入对应的组件，属性为组件类型的数组，可一次注入多个组件。默认组件名为全类名</p>
<h4 id="5、-Conditional"><a href="#5、-Conditional" class="headerlink" title="5、@Conditional"></a>5、@Conditional</h4><p>条件装配，满足指定条件则进行条件注入，为根注解存在多个派生注解。标注在类上则类的所有组件都要满足条件才会被装配</p>
<h3 id="2、原生配置文件引入"><a href="#2、原生配置文件引入" class="headerlink" title="2、原生配置文件引入"></a>2、原生配置文件引入</h3><h4 id="ImportResource-“classpath-xxx-xml”"><a href="#ImportResource-“classpath-xxx-xml”" class="headerlink" title="@ImportResource(“classpath:xxx.xml”)"></a>@ImportResource(“classpath:xxx.xml”)</h4><p>解析配置文件，将其中配置的组件注入容器</p>
<h3 id="3、属性绑定"><a href="#3、属性绑定" class="headerlink" title="3、属性绑定"></a>3、属性绑定</h3><p>读取application.properties文件中的内容，并封装到JavaBean中, 对应Bean类需要注入到容器</p>
<h4 id="1、-ConfigurationProperties-prefix-x3D-“xxx”"><a href="#1、-ConfigurationProperties-prefix-x3D-“xxx”" class="headerlink" title="1、@ConfigurationProperties(prefix &#x3D; “xxx”)"></a>1、@ConfigurationProperties(prefix &#x3D; “xxx”)</h4><p>注解在类上，读取application.properties文件中的前缀为xxx的属性，并将其绑定到该类的对应的属性上</p>
<h4 id="2、-EnableConfigurationProperties-“xxx-class”"><a href="#2、-EnableConfigurationProperties-“xxx-class”" class="headerlink" title="2、@EnableConfigurationProperties(“xxx.class”)"></a>2、@EnableConfigurationProperties(“xxx.class”)</h4><p>注解在配置类上，开启xxx的属性绑定功能并将对应类注入到容器中，无需再添加@Component注解，多用于操作第三方类</p>
<h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>SpringBoot预先加载所有配置类，每个自动配置类按条件进行生效，生效的配置类会为容器添加各自的组件并绑定对应的properties文件以便从中获取值，组件加载完毕即配置完成。用户自定义的配置，则以用户的配置优先</p>
<p>定制化配置可以通过自行创建配置类或者修改对应的配置文件</p>
<p>SpringBoot所有配置文件的值被抽取在application.peoperties配置文件中（或者yaml两者可以共存）</p>
<p>xxxAutoConfigration —&gt;注入组件—&gt;从xxx.properties中获取值—&gt;从application.properties中获取值</p>
<p>配置文件中设置debug&#x3D;true开启自动配置报告，查看生效和没有生效的自动配置</p>
<h1 id="三、开发技巧"><a href="#三、开发技巧" class="headerlink" title="三、开发技巧"></a>三、开发技巧</h1><h2 id="1、Lombok"><a href="#1、Lombok" class="headerlink" title="1、Lombok"></a>1、Lombok</h2><p>在编译时期给JavaBean添加构造器、set、get、toString等方法，源代码只需设置属性</p>
<p>1、引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、idea安装lombok插件</p>
<p>3、添加对应注解</p>
<ol>
<li>@Data：set、get方法</li>
<li>@ToString：toString方法</li>
<li>@NoArgsConstructor：无参构造器</li>
<li>@AllArgsConstructor：全参构造器</li>
<li>@EqualsAndHashCode：equals和hsahcode方法</li>
<li>@Slf4j：自动注入log属性，打印日志</li>
</ol>
<p>也可以自定义需要的方法</p>
<h2 id="2、devtools"><a href="#2、devtools" class="headerlink" title="2、devtools"></a>2、devtools</h2><p>自动部署，按住ctrl+F9，开发静态页面不需要重新部署项目</p>
<p>1、引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3、SpringInitializer"><a href="#3、SpringInitializer" class="headerlink" title="3、SpringInitializer"></a>3、SpringInitializer</h2><p>快速配置SpringBoot项目，勾选所需模块，自动引入所需依赖，创建项目结构，主程序类</p>
<h1 id="四、核心功能"><a href="#四、核心功能" class="headerlink" title="四、核心功能"></a>四、核心功能</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>yaml，用来做以数据为中心的配置文件</p>
<h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><ol>
<li><p>key: value	kv之间有空格</p>
</li>
<li><p>大小写敏感</p>
</li>
<li><p>使用缩进表示层级间的关系：缩进只能使用空格，空格次数不想，相同层级对其计科</p>
</li>
<li><p>#表示注释</p>
</li>
<li><p>‘’和””中的字符串内容会被转义或不转义（\n作为换行输出）</p>
</li>
</ol>
<h3 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h3><p>1、字面量：直接以kv形式写入</p>
<p>2、对象（或者Map）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2....</span>&#125;</span><br><span class="line"><span class="string">或</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure>

<p>3、集合和数组</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"><span class="string">或</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure>

<p>添加自定义配置提示，在打包时排除该类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">//打包时排除该类</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2 <span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、web开发"><a href="#2、web开发" class="headerlink" title="2、web开发"></a>2、web开发</h2><h3 id="1、SpringMVC自动配置"><a href="#1、SpringMVC自动配置" class="headerlink" title="1、SpringMVC自动配置"></a>1、SpringMVC自动配置</h3><h4 id="1、静态资源访问"><a href="#1、静态资源访问" class="headerlink" title="1、静态资源访问"></a>1、静态资源访问</h4><p>默认静态资源目录：类路径下的static、public、resources或者&#x2F;META-INF&#x2F;resources</p>
<p>原理：静态映射&#x2F;**，请求先去寻找Controller，如果找不到，则交给静态资源处理器，在静态资源目录下寻找</p>
<p>默认路径为根路径+&#x2F;** ,  添加前缀需要配置spring.mvc.static-path-patten&#x3D;&#x2F;xxx&#x2F;**，再次访问静态资源时，需要在路径添加xxx路径，以根目录&#x2F;xxx&#x2F;资源名的方式访问</p>
<p>改变默认静态资源目录：配置spring.resources.static-locations属性</p>
<h4 id="2、欢迎页"><a href="#2、欢迎页" class="headerlink" title="2、欢迎页"></a>2、欢迎页</h4><p>访问根路径展示的页面</p>
<p>静态资源下编写index.html，使用访问前缀会导致欢迎页失效</p>
<h4 id="3、自定义Favicon"><a href="#3、自定义Favicon" class="headerlink" title="3、自定义Favicon"></a>3、自定义Favicon</h4><p>favicon.ico放在静态资源路径下即可，文件后缀必须为.ico</p>
<h4 id="4、RESTFul风格请求"><a href="#4、RESTFul风格请求" class="headerlink" title="4、RESTFul风格请求"></a>4、RESTFul风格请求</h4><p>对于某个资源的操作，请求路径相同，根据不同的请求方式执行不同的控制器方法。在前端页面添加隐藏域，id设置为_method，value设置为对应的请求方式，将该value作为请求参数，并在后端开启spring.mvc.hiddenmethod.filter.enabled&#x3D;true，即可实现</p>
<h3 id="2、普通参数与基本注解"><a href="#2、普通参数与基本注解" class="headerlink" title="2、普通参数与基本注解"></a>2、普通参数与基本注解</h3><h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h4><p>Restful风格中，使用&#x2F;xxx&#x2F;{id}作为请求路径映射，在控制器方法的形参中使用本注解@PathVariable(“id”) 变量名将请求参数赋值给对应的变量</p>
<h4 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h4><p>获取请求头</p>
<h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p>获取同名参数，或者使用注解的属性设置对应的请求参数，不支持POST请求</p>
<h4 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h4><p>获取同名cookie，或者使用注解的属性设置对应的cookie，可以使用Cookie对象封装参数</p>
<h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><p>获取请求体</p>
<h4 id="RequestAttribute"><a href="#RequestAttribute" class="headerlink" title="@RequestAttribute"></a>@RequestAttribute</h4><p>获取请求域中的属性值</p>
<h4 id="MatrixVariable"><a href="#MatrixVariable" class="headerlink" title="@MatrixVariable"></a>@MatrixVariable</h4><p>矩阵变量，绑定在路径变量中，&#x2F;xxx&#x2F;xxx ; A&#x3D;xxx, B&#x3D;xxx, … 通过这种方式可以在cookie被禁用时，使用jsessionid&#x3D;xxx获取session的值</p>
<p>在请求映射中使用&#x2F;xxx&#x2F;{path}&#x2F;xxx 的映射编写</p>
<p>使用该注解可以获取矩阵参数的值，默认禁用，在后端配置配置UrlPathHelper的removeSemicolonContent属性为false即可开启矩阵变量，使用@Configuration和WebMvcConfigurer接口重写configurePathMatch方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">        <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>不同路径的部分存在相同的矩阵变量，使用pathVar属性指明路径</p>
<h3 id="3、视图解析和模板引擎"><a href="#3、视图解析和模板引擎" class="headerlink" title="3、视图解析和模板引擎"></a>3、视图解析和模板引擎</h3><p>SpringBoot默认不支持jsp</p>
<h4 id="ThymeLeaf"><a href="#ThymeLeaf" class="headerlink" title="ThymeLeaf"></a>ThymeLeaf</h4><p><a href="https://www.thymeleaf.org/">Thymeleaf</a></p>
<p>1、基本语法</p>
<ol>
<li>变量取值: ${}</li>
<li>选择变量: *{}</li>
<li>生成链接: @{}</li>
<li>片段表达式: ~{}</li>
</ol>
<p>2、字面量</p>
<p>3、文本操作</p>
<p>4、数学、布尔、比较、条件运算</p>
<p>5、特殊操作：_ 无操作</p>
<p>6、设置属性值</p>
<p>th:attr&#x3D;”value&#x3D;${}”</p>
<p>th:value&#x3D;”${}”</p>
<p>7、设置文本域</p>
<p>th:text &#x3D;”${}”</p>
<p>修改那个属性，则使用th:属性</p>
<p>8、标签外提取数据</p>
<p>[[${}]]	使用两个中括号</p>
<p>9、插入抽取出的公共标签</p>
<p>先给被引用的标签命名：th:fragment&#x3D;”aaa”或id&#x3D;”bbb”</p>
<p>th:insert&#x3D;”页面A ::  aaa”或th:insert&#x3D;”页面A ::  #bbb”（将引用部分插入引用时使用的标签</p>
<p>th:replace&#x3D;”页面A ::  aaa”或th:replace&#x3D;”页面A ::  #bbb”（替换引用时所使用的标签）</p>
<p>th:include&#x3D;”页面A ::  aaa”或th:include&#x3D;”页面A ::  #bbb”（将被引用标签内的内容查询引用时使用的标签）</p>
<p>可以将A页面中对应标签内的内容引用到所需要的位置</p>
<p>10、遍历数据</p>
<p>在<tr>内使用th:each&#x3D;”user, status: ${users}”，遍历users中的每一个user，在user后使用逗号隔开添加一个status属性，即可获取当前遍历的数目等属性，使用status.count获取计数（从1开始）</tr></p>
<p>使用：</p>
<p>1、引入starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、自动配置完成模板引擎和视图解析器</p>
<p>3、默认页面路径为templates、默认后缀为html</p>
<p>4、页面添加名称空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ch&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、拦截器"><a href="#4、拦截器" class="headerlink" title="4、拦截器"></a>4、拦截器</h3><p>preHandle：控制器方法处理前	postHandle：控制器方法处理后，解析视图前	afterHandle：解析视图后</p>
<p>使用：</p>
<p>1、实现HandleInceptor接口，重写需要的方法</p>
<p>2、配置拦截的请求</p>
<p>​	使用@Configuration和WebMVCConfigurer接口，重写addInterceptors方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">	registry.addaddInterceptor((<span class="keyword">new</span> <span class="title class_">xxxInterceptor</span>))</span><br><span class="line">	.addPathPatterns(<span class="string">&quot;/**&quot;</span>)					<span class="comment">//拦截请求</span></span><br><span class="line">	.excludePathPattern(<span class="string">&quot;/xxx&quot;</span>, <span class="string">&quot;/xxx&quot;</span>, <span class="string">&quot;/css/**&quot;</span>)		<span class="comment">//放行请求和静态资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、文件上传"><a href="#5、文件上传" class="headerlink" title="5、文件上传"></a>5、文件上传</h3><p>@RequestPart从请求中获取上传的文件，并将文件封装在MultipartFile类中，通过该类可以进行对文件的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/form/upload.do&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg, </span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span>(!headerImg.isEmpty()) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> headerImg.getOriginalFilename();</span><br><span class="line">           headerImg.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>修改文件上传大小等设置，可以在配置文件中修改spring.servlet.multipart部分</p>
<h3 id="6、错误处理"><a href="#6、错误处理" class="headerlink" title="6、错误处理"></a>6、错误处理</h3><p>默认情况下使用&#x2F;error映射错误，对于浏览器客户端会产生一个空白页展示错误信息，对于非浏览器会返回一个json字符串（json可以被使用）。对其自定义需要添加View解析为error。放在error目录下的4xx、5xx错误码的页面（页面可以直接命名为4xx、5xx）将被自动解析。</p>
<p>异常处理流程：</p>
<ol>
<li><p>执行方法期间如果产生异常，则会被catch，并标志请求结束</p>
</li>
<li><p>进入视图解析器</p>
</li>
<li><p>处理异常 ，并返回ModelAndView</p>
<ol>
<li>遍历所有的handlerExceptionResolver，寻找处理异常</li>
<li>DefaultErrorAttributes先处理异常，将错误信息保存在Request域，返回Null</li>
<li>默认无法处理异常，再将异常抛出</li>
</ol>
</li>
<li><p>无法处理的异常则会发送&#x2F;error请求3</p>
<ol>
<li><p>BasicErrorController处理请求</p>
</li>
<li><p>遍历所有ErrorViewResolver解析视图</p>
</li>
<li><p>默认的DefaultErrorViewResolver将响应状态码作为错误页的地址 &#x2F;error&#x2F;500.html</p>
</li>
<li><p>模板引擎响应页面</p>
</li>
</ol>
</li>
</ol>
<p>自定义异常处理</p>
<ol>
<li><p>定制错误页：命名为4xx.html 5xx.html，先精确匹配错误码页面，再寻找4xx、5xx，最后触发默认空白页</p>
</li>
<li><p>@ControllerAdvice+@ExceptionHandler处理全局异常：类上添加前者，方法上添加后者</p>
<ol>
<li>@ExceptionHandler({aaaException.class, bbbException.class}) 表示能够处理的异常</li>
<li>方法返回ModeAndView或者返回视图地址</li>
<li>底层由ExceptionHandlerExceptionResolver处理</li>
</ol>
</li>
<li><p>@ResponseStatus标注在自定义异常上</p>
<ol>
<li>@ResponseStatus(value - HttpStatus.FORBIDDEN, reason &#x3D; “”) 声明异常状态码和原因</li>
<li>底层由ResponseStatusExceptionResolver处理，发送&#x2F;error请求</li>
<li>最终返回ModeAndView</li>
</ol>
</li>
<li><p>DefaultHandlerExceptionResolver处理SpringMVC的异常，比如缺少请求参数，最终发送&#x2F;error请求</p>
</li>
<li><p>自定义异常解析器ErrorViewResolver，一般不使用这种方式</p>
<ol>
<li>实现HandlerExceptionResolver接口，重写resolverException方法</li>
<li>response.sendError(status, message)可以直接发送&#x2F;error请求</li>
<li>使用@Component注解添加组件，使用@order注解为其指定优先级</li>
</ol>
</li>
</ol>
<h3 id="7、Web原生组件注入"><a href="#7、Web原生组件注入" class="headerlink" title="7、Web原生组件注入"></a>7、Web原生组件注入</h3><p>1、在主类添加@ServletComponentScan指定原生组件位置，再使用@WebServlet，@WebFilter、@WebListener</p>
<p>2、使用配置类，注册ServletRegistrationBean、FilterRegistrationBean、ListenerRegistrationBean组件并设置对应的路径，建议保持对应组件的单实例，这些bean可以通过方法初始化内部参数</p>
<h3 id="8、嵌入式Servlet服务器"><a href="#8、嵌入式Servlet服务器" class="headerlink" title="8、嵌入式Servlet服务器"></a>8、嵌入式Servlet服务器</h3><p>定制容器</p>
<p>1、修改server前缀的配置文件</p>
<p>2、自定义ConfigurableServletWebServerFactory</p>
<p>3、实现ServletWebServerFactoryCustomizer接口，将配置文件的值和ServletWebServerFactory进行绑定</p>
<h3 id="9、SpringBoot定制化原理"><a href="#9、SpringBoot定制化原理" class="headerlink" title="9、SpringBoot定制化原理"></a>9、SpringBoot定制化原理</h3><p>场景starter-&gt;xxxAutoConfiguration-&gt;导入xxx组件-&gt;绑定XXXProperties-&gt;绑定配置文件项</p>
<p>常见定制化方式</p>
<ol>
<li>修改配置文件</li>
<li>xxxCustomizer</li>
<li>编写配置类@Configuration+@Bean替换增加容器中的组件，推荐使用</li>
<li>web应用实现WebMVCConfigurer接口，定制web功能</li>
<li>全面接管SpringMVC使用@EnableWebMvc，原本所有默认的资源将全部失效如视图解析器</li>
</ol>
<h2 id="3、数据访问"><a href="#3、数据访问" class="headerlink" title="3、数据访问"></a>3、数据访问</h2><h3 id="1、SQL"><a href="#1、SQL" class="headerlink" title="1、SQL"></a>1、SQL</h3><h4 id="1、数据源的自动配置"><a href="#1、数据源的自动配置" class="headerlink" title="1、数据源的自动配置"></a>1、数据源的自动配置</h4><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>		<span class="comment">&lt;!--自动版本仲裁，根据数据库版本自行选择对应的驱动版本--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--&lt;verson&gt;5.1.49&lt;/version&gt;--&gt;</span> <span class="comment">&lt;!--自行决定版本，maven的就近依赖原则--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改数据源相关的配置，修改spring.datasource配置文件即可</p>
<h4 id="2、使用Druid数据源"><a href="#2、使用Druid数据源" class="headerlink" title="2、使用Druid数据源"></a>2、使用Druid数据源</h4><p>1、引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写配置类，所有set方法设置的属性均可以通过配置文件进行设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line">    <span class="comment">//添加组件并开启监控功能</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setFilters(<span class="string">&quot;stat&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//访问durid监控页</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StatViewServlet</span> <span class="variable">statViewServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StatViewServlet</span>();</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; statViewServletServletRegistrationBean =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(statViewServlet, <span class="string">&quot;/druid&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> statViewServletServletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多设置参考Druid文档<a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D">Druid连接池介绍 · alibaba&#x2F;druid Wiki (github.com)</a></p>
<p>2、引入starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">filter:</span> <span class="string">stat,wall</span></span><br><span class="line">      <span class="comment">#监控页的配置</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure>

<p>更多设置参考Druid文档<a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D">Druid连接池介绍 · alibaba&#x2F;druid Wiki (github.com)</a></p>
<h3 id="2、整合Mybatis"><a href="#2、整合Mybatis" class="headerlink" title="2、整合Mybatis"></a>2、整合Mybatis</h3><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1、配置模式开发</p>
<p>配置文件前缀：mybatis，全局配置文件前缀：mybatis.configuration</p>
<ol>
<li>指定全局配置文件路径：mybatis.config-location&#x3D;classpath:xxx（在yaml配置文件中配置全局配置文件的属性是，这个路径不能指定。建议在yaml配置文件中配置全局配置文件的属性）</li>
<li>指定mapper映射文件路径：mybatis.mapper-locations&#x3D;classpath:xxx</li>
<li>Mapper接口标注@Mapper（或者在主类上添加@MapperScan（包名））</li>
<li>编写sql映射文件并绑定Mapper接口（指定namespace）</li>
</ol>
<p>2、注解模式开发（简单SQL语句使用该方式进行开发）</p>
<p>不需要指定Mapper映射文件，在方法上添加@Select、@Insert等注解，注解属性为SQL语句，按照mybatis原生SQL语句书写方式，使用@option注解可以设置一些sql语句的属性如useGenerateKey&#x3D;true主键自增</p>
<h3 id="3、整合MybatisPlus"><a href="#3、整合MybatisPlus" class="headerlink" title="3、整合MybatisPlus"></a>3、整合MybatisPlus</h3><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置文件前缀：mybatis-plus</p>
<ol>
<li>mapperlocation自动配置完成：classpath*:&#x2F;mapper&#x2F;**&#x2F;*.xml即任意包下的所有Mapper文件夹下的任意路径下的xml都是sql文件</li>
<li>@Mapper标注的接口也会被自动扫描</li>
</ol>
<p>使用</p>
<ol>
<li>引入依赖</li>
<li>导入数据源</li>
<li>编写Mapper接口继承于BaseMapper&lt;Dao&gt;</li>
<li>编写Service接口继承于ServiceImpl&lt;Dao&gt;，其实现类实现该接口并继承于IService的实现类ServiceImpl&lt;Mapper, Dao&gt;</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span>  <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多使用参考官方文档<a href="https://www.mybatis-plus.com/guide/quick-start.html#%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8">快速开始 | MyBatis-Plus</a></p>
<p>分页查询：在MybatisPlus中实现了分页查询的方法，需要整合MyBatisPlus分页插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Spring boot方式</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.baomidou.cloud.service.*.mapper*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>创建Page&lt;Dao&gt;对象并创建当前页面和每页条数</li>
<li>调用xxxService.page方法传入page对象和查询条件的包装类</li>
<li>返回一个Page对象，可以从中获取总数，每页条数等信息</li>
<li>分页条可以使用thymeleaf的一些功能实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; userPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">      userPage = userService.page(userPage);</span><br><span class="line">      List&lt;User&gt; records = userPage.getRecords();<span class="comment">//获取查询到的User</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> userPage.getTotal();<span class="comment">//获取总页数</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> userPage.getCurrent();<span class="comment">//获取当前页</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.thymeleaf.org/">Thymeleaf</a></p>
<h3 id="4、整合Redis"><a href="#4、整合Redis" class="headerlink" title="4、整合Redis"></a>4、整合Redis</h3><p>1、引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>87</span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>2、编辑配置文件，前缀spring.redis</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="attr">spring.redis.database</span>=<span class="string">0  </span></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379  </span></span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.pool.max-active</span>=<span class="string">8  </span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.pool.max-wait</span>=<span class="string">-1  </span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.pool.max-idle</span>=<span class="string">8  </span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.pool.min-idle</span>=<span class="string">0  </span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">0 </span></span><br></pre></td></tr></table></figure>

<p>3、使用RedisTmeplate操作Redis</p>
<h2 id="4、单元测试"><a href="#4、单元测试" class="headerlink" title="4、单元测试"></a>4、单元测试</h2><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1、常见注解"><a href="#1、常见注解" class="headerlink" title="1、常见注解"></a>1、常见注解</h3><ol>
<li>@Test</li>
<li>@DisplayName：添加测试方法名</li>
<li>@BeforeEach：每次单元测试前都执行一次</li>
<li>@AfterEach：每次单元测试后都执行一次</li>
<li>@BeforeAll：所有测试前执行一次，静态方法（在类上执行单元测试即可执行该类下的所有单元测试）</li>
<li>@AfterAll：同上</li>
<li>@Tag：标注单元测试类别</li>
<li>@Disable：禁用测试方法</li>
<li>@TimeOut：多少时间后方法超时，可设置时间单位，超时抛出异常</li>
<li>@ExtendWith：对单元测试使用扩展，如扩展Spring单元测试，则可以使用Spring的自动装配等功能、</li>
<li>@RepeatTest：多次测试</li>
<li>@SpringBootTest：以SpringBoot启动单元测试，可以使用Spring的功能</li>
</ol>
<h3 id="2、断言机制"><a href="#2、断言机制" class="headerlink" title="2、断言机制"></a>2、断言机制</h3><blockquote>
<p><strong>断言(assertion)是一种在程序中的一阶逻辑(如：一个结果为真或假的逻辑判断式)，目的为了表示与验证软件开发者预期的结果——当程序执行到断言的位置时，对应的断言应该为真。若断言不为真时，程序会中止执行，并给出错误信息</strong></p>
</blockquote>
<p>运行Maven.test执行所有单元测试，所有测试运行结束后对有详细的测试报告</p>
<p>所有断言方法在Assertion类中</p>
<p>1、简单断言</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>assertNotEquals</td>
<td>判断两个对象或两个原始类型是否不相等</td>
</tr>
<tr>
<td>assertSame</td>
<td>判断两个对象引用是否指向同一个对象</td>
</tr>
<tr>
<td>assertNotSame</td>
<td>判断两个对象引用是否指向不同的对象</td>
</tr>
<tr>
<td>assertTrue</td>
<td>判断布尔值是否为true</td>
</tr>
<tr>
<td>assertFalse</td>
<td>判断布尔值是否为false</td>
</tr>
<tr>
<td>assertNull</td>
<td>判断给定的对象是否为空</td>
</tr>
<tr>
<td>assertNotNull</td>
<td>判断给定的对象是否非空</td>
</tr>
<tr>
<td>assertEquals</td>
<td>判断两个对象或两个原始类型是否相等</td>
</tr>
</tbody></table>
<p>2、数组断言</p>
<p>assertArrayEquals 		判断两个对象或原始类型的数组是否相等</p>
<p>3、组合断言</p>
<p>assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言，所有断言需要全部成功才能通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;assert all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">all</span><span class="params">()</span> &#123;</span><br><span class="line">     assertAll(<span class="string">&quot;Math&quot;</span>,</span><br><span class="line">        () -&gt; assertEquals(<span class="number">2</span>, <span class="number">1</span> + <span class="number">1</span>),</span><br><span class="line">        () -&gt; assertTrue(<span class="number">1</span> &gt; <span class="number">0</span>)</span><br><span class="line">     );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、异常断言</p>
<p>测试方法的异常情况assertThrows() ,配合函数式编程就可以进行使用，出现异常断言通过，否侧断言不通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;异常测试&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ArithmeticException</span> <span class="variable">exception</span> <span class="operator">=</span> Assertions.assertThrows(</span><br><span class="line">           <span class="comment">//扔出断言异常</span></span><br><span class="line">            ArithmeticException.class, () -&gt; System.out.println(<span class="number">1</span> % <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、超时断言</p>
<p>Assertions.assertTimeout() 超时即断言失败</p>
<p>6、快速失败</p>
<p>通过 fail 方法直接使得测试直接失败</p>
<p>其他参考Junit官方文档</p>
<h3 id="3、前置条件"><a href="#3、前置条件" class="headerlink" title="3、前置条件"></a>3、前置条件</h3><p>类似于断言，不满足前置条件的放法会终止执行而不会抛出错误即不满足条件的代码没有必要执行</p>
<p>所有断言方法在Assumptions类中</p>
<p>方法类似于断言</p>
<p>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</p>
<h3 id="4、嵌套测试"><a href="#4、嵌套测试" class="headerlink" title="4、嵌套测试"></a>4、嵌套测试</h3><p>通过 Java 中的内部类和@Nested 注解实现嵌套测试，外部的测试方法不能驱动内部的@BeforeEach等等，内层的测试方法可以驱动外层的@BeforeEach等等</p>
<h3 id="5、参数化测试"><a href="#5、参数化测试" class="headerlink" title="5、参数化测试"></a>5、参数化测试</h3><p>使用不用的参数多次运行测试，使用@ParameterizedTest标注测试方法</p>
<p>注解：</p>
<ol>
<li>@ValueSource(ints &#x3D; {1, 2, 3, 4, 5})：指定参数来源</li>
<li>@NullSource：指定一个null参数</li>
<li>@EnumSource：指定一个枚举参数</li>
<li>@CsvFileSource：从指定csv文件中获取参数</li>
<li>@MethodSource：从指定方法返回值获取参数，方法必须返回一个流</li>
</ol>
<h2 id="5、指标监控"><a href="#5、指标监控" class="headerlink" title="5、指标监控"></a>5、指标监控</h2><p>对每个服务进行监控、追踪、审计、控制等等</p>
<p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置文件前缀：manegement</p>
<p>使用</p>
<ol>
<li><p>引入场景</p>
</li>
<li><p>访问 <a href="http://localhost:8080/actuator/">http://localhost:8080/actuator/</a>**</p>
</li>
<li><p>暴露所有监控信息为HTTP</p>
</li>
</ol>
<p>编辑配置文件，更多配置信息参考官方文档</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment">#暴露所有端点信息</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span>  <span class="comment">#以web方式暴露</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">endpoint:</span> <span class="comment">#对某个端点具体配置</span></span><br><span class="line">     <span class="attr">health:</span> </span><br><span class="line">      <span class="attr">show-datail:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>

<p>常用端点</p>
<ol>
<li>Health：健康检测</li>
<li>Metrics：运行时指标</li>
<li>Loggers：日志记录</li>
</ol>
<p>自定义指标监控</p>
<p>继承于AbstractHealthIndicator并实现方法doHealthCheck，类名以HealthIndicator结尾</p>
<p>使用builder.up返回健康信息或者builder.status(状态码)返回健康信息，使用builder.withDetail(信息)返回健康信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHealthIndicator</span> <span class="keyword">extends</span> <span class="title class_">AbstractHealthIndicator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        builder.status(Status.UP);</span><br><span class="line">        builder.withDetail(<span class="string">&quot;count&quot;</span>, <span class="number">1</span>).withDetails(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义Info</p>
<p>在配置文件，文件前缀info。获取Pom的信息，@project.artifactId@</p>
<p>实现接口InfoContributor，并实现contribute方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInfo</span> <span class="keyword">implements</span> <span class="title class_">InfoContributor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contribute</span><span class="params">(Info.Builder builder)</span> &#123;</span><br><span class="line">        builder.withDetail(<span class="string">&quot;code&quot;</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义metrics</p>
<p>在业务处理的类的构造器中注入一个MeterRegistry，构造方法内调用counter方法，返回一个Counter实例并赋值给业务处理类的counter属性。在业务处理逻辑中调用counter.increment即可计数每个方法的执行次数</p>
<p>可以使用AOP进行处理</p>
<p>自定义Endpoint</p>
<p>@EndPoint标注类，@ReadOperation读取信息，@WriteOperation写入信息</p>
<p>可视化</p>
<p>开源项目<a href="https://github.com/codecentric/spring-boot-admin">codecentric&#x2F;spring-boot-admin: Admin UI for administration of spring boot applications (github.com)</a></p>
<p>1、建立一个服务器，引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、主类添加@EnableAdminServer</p>
<p>注册其他微服务</p>
<p>1、引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、配置文件spring.boot.admin.client.url&#x3D;监控服务器地址，并使用ip注册应用spring.boot.admin.client.instace.prefer-ip&#x3D;true</p>
<h2 id="6、高级特性"><a href="#6、高级特性" class="headerlink" title="6、高级特性"></a>6、高级特性</h2><h3 id="1、Profile功能"><a href="#1、Profile功能" class="headerlink" title="1、Profile功能"></a>1、Profile功能</h3><p>切换项目运行环境时，快速切换配置文件</p>
<p>准备多个application配置文件，不同文件名末尾添加-aaa、-bbb区别不同环境的文件，运行时在.properties文件中使用sping.profiles.active&#x3D;aaa、bbb激活不同的配置文件</p>
<p>当properties文件中配置了与yaml（profile文件）同名的属性时，以profile文件为准</p>
<p>当项目被打包后修改使用的配置文件可以使用命令java -jar xxx.jar –spring.profiles.active&#x3D;bbb切换配置文件</p>
<p>@Profile(“xxx”)指定的类或者组件在指定环境下注入</p>
<p>多种配置文件分组，spring.profiles.group.aaa[0]&#x3D;111、spring.profiles.group.aaa[0]&#x3D;222，spring.profiles.group.bbb[0]&#x3D;333，spring.profiles.group.bbb[0]&#x3D;444，使用sping.profiles.active&#x3D;aaa、bbb激活不同组的配置文件</p>
<h3 id="2、外部化配置"><a href="#2、外部化配置" class="headerlink" title="2、外部化配置"></a>2、外部化配置</h3><p>1、将数据库等配置文件放在外部</p>
<p>@Value(“${}”)，该注解既可以重application.yaml中取值，亦可以从环境变量中取值</p>
<p>可以通过主类的Ioc容器获取环境变量等</p>
<p>常用：Java属性文件、YAML文件、环境变量、命令行参数；</p>
<p>2、配置文件查找位置</p>
<p>(1) classpath 根路径</p>
<p>(2) classpath 根路径下config目录</p>
<p>(3) jar包当前目录</p>
<p>(4) jar包当前目录的config目录</p>
<p>(5) &#x2F;config子目录的直接子目录，会覆盖掉（4）配置文件的配置的同名数属性</p>
<p>项目打包后可以从外部再次修改配置文件</p>
<p>3、配置文件加载顺序：</p>
<ol>
<li>　当前jar包内部的application.properties和application.yml</li>
<li>　当前jar包内部的application-{profile}.properties 和 application-{profile}.yml</li>
<li>　引用的外部jar包的application.properties和application.yml</li>
<li>　引用的外部jar包的application-{profile}.properties 和 application-{profile}.yml</li>
</ol>
<p>下面的值覆盖上面的值</p>
<p>4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项</p>
<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>web后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE</title>
    <url>/2022/07/26/VUE/</url>
    <content><![CDATA[<h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><p>VUE是一个JavaScript框架，简化dom元素的操作，实现响应式数据驱动</p>
<p><a href="https://cn.vuejs.org/v2/guide/index.html">介绍 — Vue.js (vuejs.org)</a></p>
<span id="more"></span>

<h1 id="2、基础"><a href="#2、基础" class="headerlink" title="2、基础"></a>2、基础</h1><h2 id="1、el：挂载点"><a href="#1、el：挂载点" class="headerlink" title="1、el：挂载点"></a>1、el：挂载点</h2><p>通过css选择器选择vue挂载的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">message</span>: <span class="string">&quot;hello vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>vue实例的作用范围：el挂载元素的内部</p>
<p>建议挂载在div标签上</p>
<h2 id="2、data：数据对象"><a href="#2、data：数据对象" class="headerlink" title="2、data：数据对象"></a>2、data：数据对象</h2><p>使用差值表达式{ {} }渲染data属性的值，取对象的值{ {对象.属性} }，取数组{ {数组[i]} }</p>
<h2 id="3、vue指令"><a href="#3、vue指令" class="headerlink" title="3、vue指令"></a>3、vue指令</h2><p>1、v-text设置标签文本值，可以从data数据域获取值，标签内的所有内容将会被替换，可以在内部使用表达式</p>
<p>2、v-html设置innerHTML，设置html文本时，其中的标签会被解析</p>
<p>3、v-on基础为元素绑定事件，v-on:click&#x3D;“方法名”或@click&#x3D;“方法名”为元素绑定单击事件，触发vue实例中methods属性中的对应方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;do&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">message</span>: <span class="string">&quot;hello vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">do</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>给事件传递参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;do(123)&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">message</span>: <span class="string">&quot;hello vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">do</span>:<span class="keyword">function</span> (<span class="params">p1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(p1)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>事件修饰符：@keyup.enter键盘弹起事件，限定为enter键，其他事件修饰符参考官方文档</p>
<p>4、v-show根据表达式真假，切换元素的隐藏或显示，指令后的内容会被解析为布尔值</p>
<p>5、v-if	同上，且该指令可以操作dom元素</p>
<p>6、v-bind	设置元素的属性，比如图片的地址，v-bind:属性名&#x3D;””，简写只写冒号。v-bind:class&#x3D;“{active:isActive}”表示为active是否赋值，取决于isActive的真假</p>
<p>7、v-for	根据数据生成列表结构，v-for&#x3D;“(a, index) in aList”，a可以作为一个对象被使用，index为索引从0开始</p>
<p>8、v-model	获取和设置表单元素，又称为双向元素绑定，vue实例中data属性的变化会影响表单元素的值，表单元素值的变换会影响vue实例中data属性的值</p>
<h2 id="4、axios"><a href="#4、axios" class="headerlink" title="4、axios"></a>4、axios</h2><p>ajax框架</p>
<p>请求格式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(地址?key=value&amp;key1=value1)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">reponse</span>)&#123;&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(地址,&#123;<span class="attr">key</span>:value,<span class="attr">key1</span>:value1&#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">reponse</span>)&#123;&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>将axios整合进vue实现异步请求</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2022/07/27/redis/</url>
    <content><![CDATA[<h1 id="1、NoSQL"><a href="#1、NoSQL" class="headerlink" title="1、NoSQL"></a>1、NoSQL</h1><p>Not Only SQL 泛指非关系型数据库，不依赖于业务逻辑的方式存储，以键值对的形式存储。</p>
<ol>
<li>不遵循SQL标准</li>
<li>不支持ACID</li>
<li>性能远超SQL</li>
</ol>
<span id="more"></span>

<p>使用场景</p>
<ol>
<li>高并发</li>
<li>海量数据读写</li>
<li>数据高扩展性</li>
<li>用不着SQL或用了SQL也不行的场景</li>
</ol>
<p>不适应场景</p>
<ol>
<li>事务支持</li>
<li>基于SQL的结构化存储</li>
</ol>
<p>Redis特性</p>
<ol>
<li>支持多种数据类型</li>
<li>对于数据类型的操作多样，且具有原子性</li>
<li>支持各种不同方式的类型</li>
<li>数据缓存在内存中，周期性将数据写入磁盘或记录修改日志</li>
<li>实现主从同步</li>
</ol>
<p>redis相关介绍：</p>
<p>将redis安装在linux虚拟机中</p>
<ol>
<li>redis-server：redis服务器启动命令，后台启动不推荐</li>
<li>redis-cli：客户端操作入口</li>
<li>进入redis-cli shutdown</li>
</ol>
<p>默认端口号6379</p>
<p>默认16个数据库，下标从0开始，默认使用0号库</p>
<p>底层是单线程+多路IO复用</p>
<h1 id="2、常用数据类型"><a href="#2、常用数据类型" class="headerlink" title="2、常用数据类型"></a>2、常用数据类型</h1><h2 id="1、对key的操作"><a href="#1、对key的操作" class="headerlink" title="1、对key的操作"></a>1、对key的操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keys * 查看所有key</span><br><span class="line">exists key 判断某个key是否存在</span><br><span class="line">type key 查看key的类型</span><br><span class="line">del key 删除key，直接删除</span><br><span class="line">unlink key 删除key，异步删除</span><br><span class="line">expire key 100 设置key的删除事件，秒为单位</span><br><span class="line">ttl key 查看key的过期时间，-1永不过期，-2已过期</span><br><span class="line">select i 切换到第i个库</span><br><span class="line">dbsize 查看key的数目</span><br><span class="line">flushdb 清空当前库</span><br><span class="line">flushall 清空所有库</span><br></pre></td></tr></table></figure>

<h2 id="2、String-字符串"><a href="#2、String-字符串" class="headerlink" title="2、String 字符串"></a>2、String 字符串</h2><p>二进制安全，可以保存二进制文件，value最多可以为512Mb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set &lt;key&gt; &lt;value&gt; 设置键值对，设置相同key覆盖初值</span><br><span class="line">get &lt;key&gt; 获取值</span><br><span class="line">append &lt;key&gt; &lt;value&gt; 将指定的值追加到对应key的值</span><br><span class="line">strlen &lt;key&gt; 获取值的长度</span><br><span class="line">setnx &lt;key&gt; &lt;value&gt; 可以不存在才能设置，不可重复设置</span><br><span class="line">incr &lt;key&gt; key中存储的value数字加一 incrby &lt;key&gt; &lt;步长&gt; 储存的数字加步长</span><br><span class="line">decr &lt;key&gt; key中储存的value数字减一</span><br><span class="line">mset k1 v1 k2 v2 设置多个键值对</span><br><span class="line">mget k1 k2 k3 获取多个值</span><br><span class="line">msetnx k1 v1 k2 v2 k1,k2都不存在才能设置</span><br><span class="line">getrange k 0 3 获取从第0位到第3位共4个值</span><br><span class="line">setrange k 3 v 在第三位设置值</span><br><span class="line">setex k 过期时间 v 在设置值的时候设置过期时间</span><br><span class="line">getset k v 取出旧值，设置新值</span><br></pre></td></tr></table></figure>

<p>value底层采用动态字符串，字符串大小小于1m，扩容时翻倍，大于1m时，扩容时增加1m，最大512m</p>
<p>redis操作是原子性的</p>
<h2 id="3、List-列表"><a href="#3、List-列表" class="headerlink" title="3、List 列表"></a>3、List 列表</h2><p>单键多值，按插入顺序排序，可以添加数据到头尾，底层实现为双向链表，当元素较少时使用连续分配空间的压缩列表，当储存大量数据时使用多个压缩列表组成大列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpush/rpush k1 v1 k2 v2 从左边或右边插入一个或多个值</span><br><span class="line">lpop/rpop k 从左边或右边弹出一个值，当取出所有值时，键被销毁</span><br><span class="line">rpoplpush k1 k2 从k1右边弹出一个值，放入k2左边</span><br><span class="line">lrange k 0 1 返回索引从0到1的值，0到-1取出全部</span><br><span class="line">lindex k 0 返回指定索引的值</span><br><span class="line">llen k 返回列表长度</span><br><span class="line">linsert k before/after v newv 将newv放入v的前面或后面</span><br><span class="line">lrem k n v 从左边删除n个v</span><br><span class="line">lset k index v 将下标为index的值设置为v</span><br></pre></td></tr></table></figure>

<h2 id="4、Set-集合"><a href="#4、Set-集合" class="headerlink" title="4、Set 集合"></a>4、Set 集合</h2><p>类似于list，但可以自动排重，且无序，底层实现为value为空的hash表所实现的字典，添加删除查找的时间复杂度为O(1)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sadd k v1 v2 将一个或多个值加入集合</span><br><span class="line">smembers k 返回所有值</span><br><span class="line">sismemember k v 判断集合中是否有v值</span><br><span class="line">scard k 返回集合中的元素个数</span><br><span class="line">srem k v1 v2 删除集合中的v1、v2</span><br><span class="line">spop k 随机从集合中弹出值，弹出后删除</span><br><span class="line">srandmember k  n 随机从集合中返回n个值</span><br><span class="line">smove source destination v 将v从一个集合移动到另一个集合</span><br><span class="line">sinter k1 k2 返回两个集合的交集元素</span><br><span class="line">sunion k1 k2 返回两个集合的并集元素</span><br><span class="line">sdiff k1 k2 返回在k1中不在k2中的元素</span><br></pre></td></tr></table></figure>

<h2 id="5、Hash-哈希"><a href="#5、Hash-哈希" class="headerlink" title="5、Hash 哈希"></a>5、Hash 哈希</h2><p>值是一个string类型f的filed和value的映射表即键值对的集合，适合存储对象，类似java的Map&lt;String, Object&gt; ，底层实现为两种，当field较少时使用压缩列表，当field较多时使用哈希表</p>
<p>key {field1&#x3D;value1，field2&#x3D;value2}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hset k filed v 给filed赋值v</span><br><span class="line">hget k f 从f中返回值</span><br><span class="line">hmset k f1 v1 f2 v2 批量设置hash值</span><br><span class="line">hexists k f 查看f是否存在</span><br><span class="line">hkeys k 返回所有的f</span><br><span class="line">hvals k 返回所有的v</span><br><span class="line">hincrby k f i 给f中的值增加i</span><br><span class="line">hsetnx k f v 当f不存在时，设置值</span><br></pre></td></tr></table></figure>

<h2 id="6、Zset-有序集合"><a href="#6、Zset-有序集合" class="headerlink" title="6、Zset 有序集合"></a>6、Zset 有序集合</h2><p>类似于set，但是每个成员关联一个“评分”，被用于按照从最低分到最高分排序，成员唯一，但评分不一定唯一。底层实现类似于Map&lt;String, Double&gt;，又类似于TreeSet，根据权重排序，使用两种结构，hash关联value和score，跳跃表用于给value排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd k score1 v1 score2 v1 将一个或多个元素及其评分放入有序集合</span><br><span class="line">zrange k 0 3 返回下标在0到3的元素，使用withscores可以将评分取出</span><br><span class="line">zrangebyscore k min max 返回值介于min max的元素，按score从小到大排序，使用withscores可以将评分取出</span><br><span class="line">zrevrangebyscore k max min 同上，从大到小排序</span><br><span class="line">zincrby k i v 给元素加上i</span><br><span class="line">zrem k v 删除指定的v</span><br><span class="line">zcount k min max 统计区间内元素个数</span><br><span class="line">zrank k v 返回该值的排名，从0开始</span><br></pre></td></tr></table></figure>

<h1 id="3、Redis配置文件"><a href="#3、Redis配置文件" class="headerlink" title="3、Redis配置文件"></a>3、Redis配置文件</h1><p>1、配置储存空间大小单位，只支持byte不支持bit，大小写不敏感</p>
<p>2、配置网络</p>
<ol>
<li>bind：127.0.0.1时只接受本机访问</li>
<li>protected-mode：开启时只支持本机访问，远程访问时，注释bind，配置该属性为yes</li>
<li>port：端口号默认6379</li>
<li>tcp-backlog：设置tcp连接队列，队列总和等于未三次握手的队列+已完成握手的队列，高并发时需要一个较大的backlog，linux下会将值压缩到128，需要修改&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn和&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog两个值达到效果</li>
<li>timeout：默认为0，永不超时，秒为单位</li>
<li>tcp-keepalive：默认为300秒，检查是否连接</li>
</ol>
<p>3、其他配置</p>
<ol>
<li>daemonize：后台启动</li>
<li>pidfile：设置进程号</li>
<li>loglevel：日志等级</li>
<li>logfile：设置日志输出文件</li>
<li>database：数据库数量</li>
</ol>
<p>4、安全设置</p>
<ol>
<li>password：设置密码</li>
</ol>
<p>5、限制设置</p>
<ol>
<li>maxclients：设置redis可以与多少个客户端连接，默认10000个</li>
<li>maxmemory：设置最大内存，超过内存服务器宕机，可以根据一定规则设置超内存时的删除规则</li>
</ol>
<h1 id="4、发布与订阅"><a href="#4、发布与订阅" class="headerlink" title="4、发布与订阅"></a>4、发布与订阅</h1><p>消息通信模式，发送者发送消息，订阅者接受消息，两者通过频道完成消息交互，两个客户端需要连接同一个服务。redis可以订阅任意数目的频道。</p>
<p>操作：订阅：subscribe channel1</p>
<p>​			发布：publish channel1 xxxx</p>
<h1 id="5、新数据类型"><a href="#5、新数据类型" class="headerlink" title="5、新数据类型"></a>5、新数据类型</h1><h2 id="1、Bitmaps"><a href="#1、Bitmaps" class="headerlink" title="1、Bitmaps"></a>1、Bitmaps</h2><p>严格来说本身不是一种数据类型，为字符串，但可以对字符串的比特位进行操作。初始化时全部为0，储存0和1的数组，数组下标称为偏移量，范围为0到2的32次。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setbit k offset v 设置 某个偏移量的值</span><br><span class="line">getbit offset 获取某个偏移量的值，不存在的偏移量会被赋值为0</span><br><span class="line">bitcount k 统计1的数量，可以添加start end参数，统计范围内的数目</span><br><span class="line">bitop and/or/not/xor newkey k1 k2 将k1k2做交集、并集、非、异或，并放入新的key</span><br></pre></td></tr></table></figure>

<h2 id="2、HyperLogLog"><a href="#2、HyperLogLog" class="headerlink" title="2、HyperLogLog"></a>2、HyperLogLog</h2><p>解决求集合中不重复的元素个数问题，本身是一种算法，使用较少空间计算基数个数，但是不能返回输入的元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pfadd k v 将值放入</span><br><span class="line">pfcount k 统计数量</span><br><span class="line">pfmerge newkey k1 k2 将k1k2合并入新的key</span><br></pre></td></tr></table></figure>

<h2 id="3、Geospatial"><a href="#3、Geospatial" class="headerlink" title="3、Geospatial"></a>3、Geospatial</h2><p>GEO是地理位置信息的缩写，针对经纬度的操作，基于该类型体精经纬度设置、查询、范围查询、距离查询等操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geoadd k longitude latitude member 添加地理位置的经度、纬度和名称</span><br><span class="line">geopos k member 返回指定位置的经纬度</span><br><span class="line">geodist k member1 member2 获取两个位置间的直线距离，默认为米</span><br><span class="line">georadius k longitude latitude redius 返回以给定经纬度为中心给定长度为半径的圆中的元素</span><br></pre></td></tr></table></figure>

<h1 id="6、客户端工具"><a href="#6、客户端工具" class="headerlink" title="6、客户端工具"></a>6、客户端工具</h1><h2 id="1、Jedis"><a href="#1、Jedis" class="headerlink" title="1、Jedis"></a>1、Jedis</h2><p>1、引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、禁用Linux防火墙，注释bind，取消保护模式</p>
<p>3、创建Jedis对象并次测试联通</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">ping</span> <span class="operator">=</span> jedis.ping();</span><br></pre></td></tr></table></figure>

<p>4、通过Jedis API操作数据库，方法名与命令名相同</p>
<h1 id="7、SpringBoot整合Redis"><a href="#7、SpringBoot整合Redis" class="headerlink" title="7、SpringBoot整合Redis"></a>7、SpringBoot整合Redis</h1><p>1、引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、配置Redis, 前缀spring.redis</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="attr">spring.redis.database</span>=<span class="string">0  </span></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379  </span></span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.pool.max-active</span>=<span class="string">8  </span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.pool.max-wait</span>=<span class="string">-1  </span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.pool.max-idle</span>=<span class="string">8  </span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.pool.min-idle</span>=<span class="string">0  </span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">0 </span></span><br></pre></td></tr></table></figure>

<p>3、使用RedisTmeplate操作Redis</p>
<h1 id="8、事务和锁机制"><a href="#8、事务和锁机制" class="headerlink" title="8、事务和锁机制"></a>8、事务和锁机制</h1><p>单独隔离的操作，事务中的命令都被序列化、按序执行，执行过程中不会被其他命令打断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Muiltu 开启事务，输入命令放入队列但不会执行</span><br><span class="line">Exec 执行命令队列</span><br><span class="line">Discard 放弃队列，取消执行命令	</span><br></pre></td></tr></table></figure>

<p>组队时有命令错误导致失败，命令执行都失败</p>
<p>组队时有错误命令但成功组队，只有错误的命令无法执行</p>
<p>悲观锁：每次操作前上锁，操作结束后释放锁</p>
<p>乐观锁：每次操作不会上锁，但是在执行更新的时候会判断一下操作期间是否有人修改，有人修改则此次操作失败。可以使用版本号等机制。redis采用乐观锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch k1 k2 监视多个key，如果在事务执行前key有改动则事务执行失败</span><br><span class="line">unwatch 取消对所有key的监视，如果watch后，执行了exec或者discard，就不需要再执行unwatch</span><br></pre></td></tr></table></figure>

<h2 id="Redis事务三重性"><a href="#Redis事务三重性" class="headerlink" title="Redis事务三重性"></a>Redis事务三重性</h2><p>1、单独的隔离操作</p>
<p>2、没有隔离级别</p>
<p>3、不保证原子性，一条命令执行失败，其他命令仍被执行，没有回滚</p>
<h2 id="秒杀案例"><a href="#秒杀案例" class="headerlink" title="秒杀案例"></a>秒杀案例</h2><p>秒杀过程：库存减一，添加入用户Id</p>
<p>使用乐观锁，淘汰用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jedis.watch(<span class="string">&quot;库存&quot;</span>);	<span class="comment">//监视库存</span></span><br><span class="line"><span class="comment">//秒杀时开启事务</span></span><br><span class="line"><span class="type">Transaction</span> <span class="variable">mutil</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line"><span class="comment">//组队</span></span><br><span class="line">multi.decr(<span class="string">&quot;库存key&quot;</span>);	<span class="comment">//库存减一</span></span><br><span class="line">multi.sadd(<span class="string">&quot;用户id&quot;</span>);    <span class="comment">//添加用户id</span></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">List&lt;Object&gt; results = multi.exec();</span><br><span class="line"><span class="keyword">if</span>(results == <span class="literal">null</span> || results.size() == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//秒杀失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于乐观锁造成的库存遗留问题：高并发的情况下，只有一人能修改数据，导致其他用户即使有库存的情况下也无法秒杀。使用Lua等脚本语言，在库存有剩余的情况下再次秒杀</p>
<h1 id="9、持久化操作"><a href="#9、持久化操作" class="headerlink" title="9、持久化操作"></a>9、持久化操作</h1><h2 id="1、RDB"><a href="#1、RDB" class="headerlink" title="1、RDB"></a>1、RDB</h2><p>在指定时间间隔内将内存中的数据写入磁盘，使用Snapshot机制</p>
<p>持久化时Redis拉起一个子进程，子进程将数据写入一个临时文件，持久化结束后将临时文件替换上次持久化文件。</p>
<p>redis中默认文件名为dump.rdb，文件默认生成在启动目录中。</p>
<p>修改配置文件的Snapshot部分，修改配置</p>
<p>劣势：内存中的数据被克隆了一份，性能开销大；在执行持久化时服务器宕机，会丢失最后一次数据</p>
<h2 id="2、AOF"><a href="#2、AOF" class="headerlink" title="2、AOF"></a>2、AOF</h2><p>以日志形式记录每个写操作，只许追加文件不可更改文件，Redis启动时会读取该文件重建数据。</p>
<p>默认不开启，在redis.conf配置文件中修改appendonly.aof属性以开启</p>
<p>文件保存路径同RDB</p>
<p>两者数据都开启时，默认读取AOF文件。</p>
<p>如果遇到AOF文件损坏，通过redis-check-aof –fixappendonly.aof命令进行修复</p>
<p>同步频率设置：</p>
<ol>
<li>appendfsync always 始终同步</li>
<li>appendfsync everyse 每秒同步一次</li>
<li>appendfsyc no 不主动同步，同步时机交给操作系统</li>
</ol>
<p>Rewrite压缩：</p>
<p>避免文件过大，当文件超过设定的阈值时，启动文件压缩，只保留可以回复数据的最小指令集，即只关注对数据最后的一次操作。</p>
<p>优势：数据备份更稳健，可读取日志文件，处理误操作</p>
<p>劣势：更占磁盘空间，备份速度更慢，有一定性能压力</p>
<h1 id="10、缓存穿透、击穿、雪崩"><a href="#10、缓存穿透、击穿、雪崩" class="headerlink" title="10、缓存穿透、击穿、雪崩"></a>10、缓存穿透、击穿、雪崩</h1><h2 id="1、缓存穿透"><a href="#1、缓存穿透" class="headerlink" title="1、缓存穿透"></a>1、缓存穿透</h2><p>现象：</p>
<ol>
<li>应用服务器压力增大</li>
<li>redis命中率降低，即缓存中查不到数据</li>
<li>一直查询数据库，数据库无法同步缓存</li>
</ol>
<p>原因：</p>
<ol>
<li>redis查询不到数据</li>
<li>大量非正常url访问</li>
</ol>
<p>解决方法：</p>
<ol>
<li>缓存空值：如果查询缓存数据为空，则将该空值进行缓存，并将过期时间设置为一个较短时间</li>
<li>设置白名单：使用bitmap定义一个可访问白名单，名单id作为bitmaps的偏移量，每一次访问和map中的id进行比较，id存在才可访问</li>
<li>布隆过滤器：</li>
<li>实时监控：Redis命中率急剧降低时，排查访问对象，进行处理</li>
</ol>
<h2 id="2、缓存击穿"><a href="#2、缓存击穿" class="headerlink" title="2、缓存击穿"></a>2、缓存击穿</h2><p>现象：</p>
<ol>
<li>数据库压力瞬间增加</li>
<li>reids没有大量key过期</li>
<li>redis正常运行</li>
</ol>
<p>原因：</p>
<ol>
<li>redis某个key过期，同时大量访问中使用了该key</li>
</ol>
<p>解决方法：</p>
<ol>
<li>预先设置热门key</li>
<li>实时调整，实时调整redis的key过期时间</li>
<li>使用锁：查询redis如果为空，则设置排他锁，休眠一段时间再次查询，查询成功则释放锁，否则不释放锁</li>
</ol>
<h2 id="3、缓存雪崩"><a href="#3、缓存雪崩" class="headerlink" title="3、缓存雪崩"></a>3、缓存雪崩</h2><p>现象：</p>
<ol>
<li>数据库压力变大</li>
<li>服务器崩溃</li>
</ol>
<p>原因：</p>
<ol>
<li>在极少时间段出现大量key过期</li>
</ol>
<p>解决方案：</p>
<ol>
<li>构建多级缓存，比如Nginx缓存、redis缓存</li>
<li>使用锁或者队列，不适合高并发</li>
<li>及时更新缓存，某个key将要过期时，触发通知另一个线程去后台实时更新key</li>
<li>将缓存失效时间分散开，在原有缓存失效时间上增加一个随机值，这样每一个缓存的过期时间的重复率将降低，很难引发集体失效</li>
</ol>
<h2 id="4、分布式锁"><a href="#4、分布式锁" class="headerlink" title="4、分布式锁"></a>4、分布式锁</h2><p>单机部署系统演化为分布式系统，分布式系统多线程、多进程且分布在不同的机器上，原本单机部署的控制锁策略将失效，则需要分布式锁解决</p>
<p>实现方案：redis实现分布式锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setnx users 10		相当于加锁</span><br><span class="line">expire 10			给锁设置过期时间</span><br><span class="line">set users 10 nx ex 10 加锁并设置过期时间，保证原子性</span><br><span class="line">del users			相当于释放锁</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Gin</title>
    <url>/2022/08/04/Gin/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>轻量级http web框架，性能高</p>
<p>引入包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br><span class="line">//如果无法下载，需要修改代理：go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line"></span><br><span class="line">import &quot;github.com/gin-gonic/gin&quot;</span><br></pre></td></tr></table></figure>

<p>快速启动：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()		<span class="comment">//创建默认路由引擎</span></span><br><span class="line">	r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;	<span class="comment">//配置请求地址和回调函数</span></span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;			<span class="comment">//响应json，200可以用http.StatusOk替换，其他状态码也有对应常量</span></span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">    r.Run() <span class="comment">// 监听并在 0.0.0.0:8080 上启动服务，Run(&quot;:8000&quot;)，在8000端口上启动服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>golang热加载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/pilu/fresh</span><br><span class="line">使用fresh命令</span><br></pre></td></tr></table></figure>

<h1 id="二、路由"><a href="#二、路由" class="headerlink" title="二、路由"></a>二、路由</h1><p>路由（Routing）是由一个 URI（或者叫路径）和一个特定的 HTTP 方法（GET、POST 等） 组成的，涉及到应用如何响应客户端对某个网站节点的访问。</p>
<p>返回Json、jsonp、String、html、xml</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//json</span></span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;	</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;			<span class="comment">//gin.H就是map[string]interface&#123;&#125; 类型</span></span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">//jsonp</span></span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;	<span class="comment">//jsonp请求，主要用于跨域问题</span></span><br><span class="line">    c.JSONP(<span class="number">200</span>, gin.H&#123;			</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">//string</span></span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;	</span><br><span class="line">    	c.String(<span class="number">200</span>, <span class="string">&quot;值=%v&quot;</span>, <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">//html，响应html需要配置对应的模板文件夹</span></span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)	<span class="comment">//文件夹可自定义</span></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    	c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">//xml</span></span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;	</span><br><span class="line">    	c.XML(<span class="number">200</span>, <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="三、HTML模板渲染"><a href="#三、HTML模板渲染" class="headerlink" title="三、HTML模板渲染"></a>三、HTML模板渲染</h1><p>模板语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span></span><br><span class="line">    &#123;&#123;.title&#125;&#125; <span class="comment">&lt;!--获取后端响应数据名为title的值--&gt;</span></span><br><span class="line">    &#123;&#123; $t := .title &#125;&#125; <span class="comment">&lt;!--声明变量并赋值--&gt;</span></span><br><span class="line">    &#123;&#123; $t &#125;&#125; <span class="comment">&lt;!--输出变量--&gt;</span></span><br><span class="line">    &#123;&#123;- .title -&#125;&#125; <span class="comment">&lt;!--移除空格--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--更多语法参考手册，现阶段开发常使用前后端分离--&gt;</span></span><br></pre></td></tr></table></figure>

<p>gin框架下，当模板文件夹下还有多个文件夹时，需要使用以下方法给模板分组，响应define的路径即可</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line">r.GET(<span class="string">&quot;/admin&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    	c.HTML(http.StatusOK, <span class="string">&quot;admin/index.html&quot;</span>, <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;define &quot;admin/index.html&quot;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>配置静态文件：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数是请求路径，第二个参数表示文件实际存在的位置，当请求路径发送请求后，会去实际存在的位置寻找</span></span><br><span class="line"><span class="comment">//例如当static下存在一个img文件夹，里面有一个1.png，访问该静态资源时，可以通过localhost:8080/testStatic/img/1.png访问</span></span><br><span class="line"><span class="comment">//后端服务器则会从以static/img/1.png去寻找资源</span></span><br><span class="line">r.Static(<span class="string">&quot;/testStatic&quot;</span>, <span class="string">&quot;./static&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>其他位置需要引入静态文件时可以使用相对路径</p>
<h1 id="四、路由传值"><a href="#四、路由传值" class="headerlink" title="四、路由传值"></a>四、路由传值</h1><p>获取GET请求参数</p>
<p>路径：&#x2F;user?uid&#x3D;10 </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		uid := c.Query(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    	username := c.DefaultQuery(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>) <span class="comment">//没有传递值时的默认值，默认值为string类型</span></span><br><span class="line">		c.String(<span class="number">200</span>, <span class="string">&quot;用户uid为%v，用户名为%v&quot;</span>, uid, username)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<p>获取POST请求参数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.POST(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">   uid := c.PostForm(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    username := c.DefaultPostForm(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>) <span class="comment">//没有传递值时的默认值，默认值为string类型</span></span><br><span class="line">   c.String(<span class="number">200</span>, <span class="string">&quot;用户uid为%v，用户名为%v&quot;</span>, uid, username)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>GET、POST请求传递的数据绑定到结构体：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体对应属性需要绑定form、json</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Uid      <span class="type">string</span> <span class="string">`form:&quot;uid&quot; json:&quot;uid&quot;`</span></span><br><span class="line">	UserName <span class="type">string</span> <span class="string">`form:&quot;username&quot; json:&quot;userName&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err := c.ShouldBind(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, err)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(<span class="number">200</span>, user)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">//POST请求只需更改请求方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取xml数据</span></span><br><span class="line"><span class="keyword">type</span> Article <span class="keyword">struct</span> &#123; </span><br><span class="line">    Title <span class="type">string</span> <span class="string">`xml:&quot;title&quot;`</span>                      </span><br><span class="line">    Content <span class="type">string</span> <span class="string">`xml:&quot;content&quot;`</span> </span><br><span class="line">&#125;</span><br><span class="line">r.POST(<span class="string">&quot;/xml&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>  &#123; </span><br><span class="line">    b, _ := c.GetRawData() <span class="comment">// 从 c.Request.Body 读取请求数据，返回[]byte</span></span><br><span class="line"> 	article := &amp;Article&#123;&#125; </span><br><span class="line">    <span class="keyword">if</span> err := xml.Unmarshal(b, &amp;article); err == <span class="literal">nil</span> &#123; </span><br><span class="line">        c.JSON(http.StatusOK, article) &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        c.JSON(http.StatusBadRequest, err.Error()) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>RESTful API 是目前比较成熟的一套互联网应用程序的 API 设计理论，所以我们设计我们的路 由的时候建议参考 RESTful API 指南。</p>
<p>动态路由：获取RESTFul路径中的参数</p>
<p>路径：&#x2F;user&#x2F;20</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/user/:uid&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		uid := c.Param(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">		c.String(<span class="number">200</span>, <span class="string">&quot;用户uid为%v&quot;</span>, uid)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="五、路由分组与抽离"><a href="#五、路由分组与抽离" class="headerlink" title="五、路由分组与抽离"></a>五、路由分组与抽离</h1><p>路由分组：访问路由为分组路由+独立路由</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">defaultGroup := r.Group(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		defaultGroup.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.String(<span class="number">200</span>, <span class="string">&quot;首页&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">		defaultGroup.GET(<span class="string">&quot;/news&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.String(<span class="number">200</span>, <span class="string">&quot;首页&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	adminGroup := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		adminGroup.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.String(<span class="number">200</span>, <span class="string">&quot;管理员首页&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">		adminGroup.GET(<span class="string">&quot;/details&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.String(<span class="number">200</span>, <span class="string">&quot;明细&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>路由抽离：将不同的路由抽取到到不同的文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()		<span class="comment">//r为*gin.Engine</span></span><br><span class="line">	</span><br><span class="line">	routers.AdminRouterInit(r)</span><br><span class="line">	</span><br><span class="line">	routers.DefaultRouterInit(r)</span><br><span class="line">	</span><br><span class="line">	r.Run() <span class="comment">// 监听并在 0.0.0.0:8080 上启动服务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AdminRouterInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line">	adminGroup := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		adminGroup.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.String(<span class="number">200</span>, <span class="string">&quot;管理员首页&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">		adminGroup.GET(<span class="string">&quot;/details&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.String(<span class="number">200</span>, <span class="string">&quot;明细&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="六、自定义控制器和控制器继承"><a href="#六、自定义控制器和控制器继承" class="headerlink" title="六、自定义控制器和控制器继承"></a>六、自定义控制器和控制器继承</h1><p>将控制器方法单独抽离到另一个go文件中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AdminRouterInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line">	adminGroup := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		adminGroup.GET(<span class="string">&quot;/&quot;</span>, admin.UserController&#123;&#125;.Index)</span><br><span class="line">		adminGroup.GET(<span class="string">&quot;/details&quot;</span>, admin.UserController&#123;&#125;.Details)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserController <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(con UserController)</span></span> Index(c *gin.Context) &#123;</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(con UserController)</span></span> Details(c *gin.Context) &#123;</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;明细&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制器之间可以继承，以便调用父类的控制器方法</p>
<h1 id="七、中间件"><a href="#七、中间件" class="headerlink" title="七、中间件"></a>七、中间件</h1><p>Gin框架中孕育开发者在处理请求时配置自己的钩子函数，这个钩子函数被称为中间件，中间件适合处理一些公共的业务逻辑，比如权限认证、数据分页、记录日志，类似于过滤器</p>
<p>1、路由中间件</p>
<p>Gin 中的中间件必须是一个 gin.HandlerFunc 类型，配置路由的时候可以传递多个 func 回调函数，最后一个 func 回调函数前面触发的方法都可以称为中间件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddle</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    fmt.(<span class="string">&quot;初始化消息中间件&quot;</span>)</span><br><span class="line">    c.Next()			<span class="comment">//该方法用于在路由匹配完成后完成后，再执行一些操作，类似于过滤器中的放行</span></span><br><span class="line">    fmt.(<span class="string">&quot;后续处理&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, inirMiddler(), <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;	</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;			</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">c.abort() <span class="comment">//终止请求，只会执行该中间件的操作</span></span><br></pre></td></tr></table></figure>

<p>多个消息中间件的内容执行顺序：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleOne</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    fmt.(<span class="string">&quot;one-中间件1&quot;</span>)</span><br><span class="line">    c.Next()			</span><br><span class="line">    fmt.(<span class="string">&quot;one-中间件2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleTwo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    fmt.(<span class="string">&quot;two-中间件1&quot;</span>)</span><br><span class="line">    c.Next()			</span><br><span class="line">    fmt.(<span class="string">&quot;two-中间件2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印顺序为</span></span><br><span class="line"><span class="comment">//one-中间件1</span></span><br><span class="line"><span class="comment">//two-中间件1</span></span><br><span class="line"><span class="comment">//two-中间件2</span></span><br><span class="line"><span class="comment">//one-中间件2</span></span><br></pre></td></tr></table></figure>

<p>2、全局中间件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleOne</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    fmt.(<span class="string">&quot;one-中间件1&quot;</span>)</span><br><span class="line">    c.Next()			</span><br><span class="line">    fmt.(<span class="string">&quot;one-中间件2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleTwo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    fmt.(<span class="string">&quot;two-中间件1&quot;</span>)</span><br><span class="line">    c.Next()			</span><br><span class="line">    fmt.(<span class="string">&quot;two-中间件2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.Use(initMiddleOne, initMiddleTwo)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行顺序同上</span></span><br></pre></td></tr></table></figure>

<p>3、在路由分组中配置中间件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AdminRouterInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line">	adminGroup := r.Group(<span class="string">&quot;/admin&quot;</span>, middleware.InitMiddlewareOne)	<span class="comment">//方式一</span></span><br><span class="line">	adminGroup.Use(middleware.InitMiddlewareTwo)		<span class="comment">//方式二</span></span><br><span class="line">	&#123;</span><br><span class="line">		adminGroup.GET(<span class="string">&quot;/&quot;</span>, admin.UserController&#123;&#125;.Index)</span><br><span class="line">		adminGroup.GET(<span class="string">&quot;/details&quot;</span>, admin.UserController&#123;&#125;.Details)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间件的执行顺序按照配置顺序执行</span></span><br></pre></td></tr></table></figure>

<p>4、中间件和控制器共享数据</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c *gin.Engine</span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">c.Set(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">usernamer, isFlage := c.Get(<span class="string">&quot;username&quot;</span>) <span class="comment">//返回值分别为interface&#123;&#125;、bool</span></span><br></pre></td></tr></table></figure>

<p>5、注意事项</p>
<p>默认中间件：r :&#x3D; gin.Default</p>
<p>在创建默认路由的时候，会配置默认路由中间件</p>
<p>Logger 中间件将日志写入 gin.DefaultWriter，即使配置了 GIN_MODE&#x3D;release。 </p>
<p>Recovery 中间件会 recover 任何 panic。如果有 panic 的话，会写入 500 响应码。 </p>
<p>如果不想使用上面两个默认的中间件，可以使用 gin.New()新建一个没有任何默认中间件的路由。 </p>
<p>中间件中使用Goroutine：</p>
<p>中间件或控制器中使用Goroutine时，不能使用原始的上下文即c *gin.Context，只能只用其可读上下文 cTemp :&#x3D; c.copy</p>
<h1 id="八、文件上传与下载"><a href="#八、文件上传与下载" class="headerlink" title="八、文件上传与下载"></a>八、文件上传与下载</h1><p>前端页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/fileupload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span> <span class="comment">&lt;!--enctype必须设置为此--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;图片&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>后端代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.POST(<span class="string">&quot;/doFileupload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		file, err := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">			filename := file.Filename <span class="comment">//获取文件名，建议文件名使用uuid</span></span><br><span class="line">			dst := path.Join(<span class="string">&quot;./static/file&quot;</span>, filename)	<span class="comment">//拼接地址</span></span><br><span class="line">			c.SaveUploadedFile(file, dst)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.String(<span class="number">500</span>, <span class="string">&quot;上传失败&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		c.String(<span class="number">200</span>, <span class="string">&quot;上传成功&quot;</span>)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<p>多文件上传相同名字的文件：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.POST(<span class="string">&quot;/doFileupload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	form, _ := c.MultipartForm() </span><br><span class="line">    files := form.File[<span class="string">&quot;face[]&quot;</span>] </span><br><span class="line">    <span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123; <span class="comment">// 上传文件至指定目录     </span></span><br><span class="line">    dst := path.Join(<span class="string">&quot;./static/upload&quot;</span>, file.Filename)</span><br><span class="line">    ctx.SaveUploadedFile(file, dst) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>按照日期储存文件：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTime</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> time.Now().Format(<span class="string">&quot;20060102&quot;</span>)	<span class="comment">//格式化时间</span></span><br><span class="line">&#125;</span><br><span class="line">r.POST(<span class="string">&quot;/doFileupload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		file, err := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            time := GetTime()</span><br><span class="line">            dest := <span class="string">&quot;./static/file/&quot;</span> + time</span><br><span class="line">            err = os.MakedirAll(dest, <span class="number">0666</span>)</span><br><span class="line">            <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">                filename := file.Filename <span class="comment">//获取文件名，建议文件名使用uuid拼接文件后缀</span></span><br><span class="line">				dest = path.Join(dest, filename)	<span class="comment">//拼接地址</span></span><br><span class="line">				c.SaveUploadedFile(file, dest)</span><br><span class="line">            &#125;			</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.String(<span class="number">500</span>, <span class="string">&quot;上传失败&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		c.String(<span class="number">200</span>, <span class="string">&quot;上传成功&quot;</span>)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="九、Cookie和Session"><a href="#九、Cookie和Session" class="headerlink" title="九、Cookie和Session"></a>九、Cookie和Session</h1><p>1、cookie</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置</span></span><br><span class="line">c.SetCookie(key, value <span class="type">string</span>, maxAge <span class="type">int</span>, path, domain <span class="type">string</span>, secure, httpOmly <span class="type">bool</span>)</span><br><span class="line"><span class="comment">//key value键值对</span></span><br><span class="line"><span class="comment">//maxAge 过期时间，秒</span></span><br><span class="line"><span class="comment">//path cookie路径</span></span><br><span class="line"><span class="comment">//domain cookie的domain作用域，调试时在localhost，正式上线配置为域名</span></span><br><span class="line"><span class="comment">//secure 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中 才有效</span></span><br><span class="line"><span class="comment">//httpOnly 是微软对 COOKIE 做的扩展。如果在 COOKIE 中设置了“httpOnly”属性， 则通过程序（JS 脚本、applet 等）将无法读取到 COOKIE 信息，防止 XSS 攻击产生</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line">cookie, err := c.Cookie(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个二级域名共享cookie，以xxx结尾的域名都能解析cookie</span></span><br><span class="line">c.SetCookie(<span class="string">&quot;usrename&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">3600</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;.xxx.com&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>2、session</p>
<p>当客户端第一次发送请求时，服务器创建session，生成一个key-value，并将key返回给value，浏览器下一次访问时携带cookie，找到对应的value</p>
<p>gin默认没有集成session</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">go</span> get github.com/gin-contrib/sessions</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置session中间件</span></span><br><span class="line"><span class="comment">//创建基于cookie的存储引擎，参数为密钥</span></span><br><span class="line">store := cookie.NewStore([]<span class="type">byte</span>(<span class="string">&quot;yuanxiao&quot;</span>))	</span><br><span class="line"><span class="comment">//创建session，第一个参数为session名，即传递到浏览器的cookie名</span></span><br><span class="line">r.Use(sessions.Sessions(<span class="string">&quot;session&quot;</span>, store))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c *gin.Context</span><br><span class="line"><span class="comment">//获取session</span></span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">session.Set(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">session.Save()</span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line">session.Get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line"><span class="comment">//设置过期时间 </span></span><br><span class="line">session.Options(sessions.Options&#123; </span><br><span class="line">    MaxAge: <span class="number">3600</span> * <span class="number">6</span>, <span class="comment">// 6hrs </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、session上传到redis</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置redis中间件</span></span><br><span class="line"><span class="comment">//参数为最大连接数、协议、地址、密码、密钥</span></span><br><span class="line">store, err := redis.NewStore(<span class="number">10</span>, <span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;192.168.128:6379&quot;</span>, <span class="string">&quot;&quot;</span>, []<span class="type">byte</span>(<span class="string">&quot;yuanxiao&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">r.Use(sessions.Sessions(<span class="string">&quot;session&quot;</span>, store))</span><br><span class="line">r.GET(<span class="string">&quot;/session&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	session := sessions.Default(c)</span><br><span class="line">	session.Set(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">	session.Save()</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;session值为%v&quot;</span>, session.Get(<span class="string">&quot;username&quot;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>关于redis的操作可以使用go-redis</p>
<h1 id="十、重定向"><a href="#十、重定向" class="headerlink" title="十、重定向"></a>十、重定向</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//http重定向</span></span><br><span class="line">r.GET(<span class="string">&quot;/redirect&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.Redirect(http.StatusMovedPermanently, url)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//路由重定向</span></span><br><span class="line">r.GET(<span class="string">&quot;/aim&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Comtext)</span></span> &#123;</span><br><span class="line">    c.String(http.StatusOk, <span class="string">&quot;aim&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/redirect&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.Request.URL.Path = <span class="string">&quot;/aim&quot;</span></span><br><span class="line">    r.HandleContext(c)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>web后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>GORM</title>
    <url>/2022/08/05/GORM/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>开发者友好的orm框架，本笔记参考官方文档</p>
<p>导包：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>快速入门：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建数据库连接</span></span><br><span class="line"><span class="keyword">var</span> Db *gorm.DB	<span class="comment">//声明全局数据库连接和错误</span></span><br><span class="line"><span class="keyword">var</span> Err <span class="type">error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dsn := <span class="string">&quot;root:password@tcp(127.0.0.1:3306)/mybatis?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">	Db, Err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建结构体</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id       <span class="type">string</span></span><br><span class="line">	Password <span class="type">int</span></span><br><span class="line">	Username <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User)</span></span> TableName() <span class="type">string</span> &#123; <span class="comment">//将user表绑定到User结构体上</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;&#123;id = %v, username = %v, password = %v&#125;&quot;</span>, u.Id, u.Username, u.Password)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user []domain.User</span><br><span class="line">    model.Db.Debug().Find(&amp;user)	<span class="comment">//通过Debug方法可以查看每条SQL语句的执行</span></span><br><span class="line">	<span class="keyword">for</span> _, user := <span class="keyword">range</span> user &#123;</span><br><span class="line">		fmt.Println(user)</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二-、模型约定"><a href="#二-、模型约定" class="headerlink" title="二 、模型约定"></a>二 、模型约定</h1><p>GORM通过模型与表之间进行绑定，模型由结构体组成</p>
<p>定义好结构后可以使用方法自动创建表：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.AutoMigrate(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>关于模型的约定：</p>
<ol>
<li><p>Id默认为主键</p>
</li>
<li><p>表名和字段名必须和结构体名即字段名相对应，首字母必须大写</p>
</li>
<li><p>使用 <code>CreatedAt</code>、<code>UpdatedAt</code> 字段追踪创建、更新时间</p>
</li>
<li><p>表名默认为结构体名的复数，因此自定义表需要和表进行绑定</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User)</span></span> TableName() <span class="type">string</span> &#123; <span class="comment">//将user表绑定到User结构体上</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以通过Table()指定表名</span></span><br><span class="line">db.Table(<span class="string">&quot;user&quot;</span>).Find(&amp;User)</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
<p>字段的权限控制：允许使用标签对字段的权限控制</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="type">string</span> <span class="string">`gorm:&quot;&lt;-:create&quot;`</span> <span class="comment">// allow read and create</span></span><br><span class="line">  Name <span class="type">string</span> <span class="string">`gorm:&quot;&lt;-:update&quot;`</span> <span class="comment">// allow read and update</span></span><br><span class="line">  Name <span class="type">string</span> <span class="string">`gorm:&quot;&lt;-&quot;`</span>        <span class="comment">// allow read and write (create and update)</span></span><br><span class="line">  Name <span class="type">string</span> <span class="string">`gorm:&quot;&lt;-:false&quot;`</span>  <span class="comment">// allow read, disable write permission</span></span><br><span class="line">  Name <span class="type">string</span> <span class="string">`gorm:&quot;-&gt;&quot;`</span>        <span class="comment">// readonly (disable write permission unless it configured)</span></span><br><span class="line">  Name <span class="type">string</span> <span class="string">`gorm:&quot;-&gt;;&lt;-:create&quot;`</span> <span class="comment">// allow read and create</span></span><br><span class="line">  Name <span class="type">string</span> <span class="string">`gorm:&quot;-&gt;:false;&lt;-:create&quot;`</span> <span class="comment">// createonly (disabled read from db)</span></span><br><span class="line">  Name <span class="type">string</span> <span class="string">`gorm:&quot;-&quot;`</span>            <span class="comment">// ignore this field when write and read with struct</span></span><br><span class="line">  Name <span class="type">string</span> <span class="string">`gorm:&quot;-:all&quot;`</span>        <span class="comment">// ignore this field when write, read and migrate with struct</span></span><br><span class="line">  Name <span class="type">string</span> <span class="string">`gorm:&quot;-:migration&quot;`</span>  <span class="comment">// ignore this field when migrate with struct</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建、更新时间的追踪：</p>
<p>GORM 约定使用 <code>CreatedAt</code>、<code>UpdatedAt</code> 追踪创建、更新时间。如果定义了这种字段，GORM 在创建、更新时会自动填充 </p>
<p>如果其他字段需要自动填写时间，可以配置 <code>autoCreateTime</code>、<code>autoUpdateTime</code> 标签</p>
<p>如果想要保存 UNIX（毫&#x2F;纳）秒时间戳，而不是 time，只需将 <code>time.Time</code> 修改为 <code>int</code> 即可</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  CreatedAt time.Time <span class="comment">// 在创建时，如果该字段值为零值，则使用当前时间填充</span></span><br><span class="line">  UpdatedAt <span class="type">int</span>       <span class="comment">// 在创建时该字段值为零值或者在更新时，使用当前时间戳秒数填充</span></span><br><span class="line">  Updated   <span class="type">int64</span> <span class="string">`gorm:&quot;autoUpdateTime:nano&quot;`</span> <span class="comment">// 使用时间戳填纳秒数充更新时间</span></span><br><span class="line">  Updated   <span class="type">int64</span> <span class="string">`gorm:&quot;autoUpdateTime:milli&quot;`</span> <span class="comment">// 使用时间戳毫秒数填充更新时间</span></span><br><span class="line">  Created   <span class="type">int64</span> <span class="string">`gorm:&quot;autoCreateTime&quot;`</span>      <span class="comment">// 使用时间戳秒数填充创建时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果模型由DeleteAt字段，在调用gorm的delete方法时，不会直接删除数据，而会将当前时间赋值给该字段</p>
<p>模型嵌入：</p>
<p>对于匿名结构体，其字段将自动嵌入父结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;  </span><br><span class="line">	gorm.Model  </span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;  </span><br><span class="line">    ID        <span class="type">uint</span>           <span class="string">`gorm:&quot;primaryKey&quot;`</span>  </span><br><span class="line">    CreatedAt time.Time  </span><br><span class="line">    UpdatedAt time.Time  </span><br><span class="line">    DeletedAt gorm.DeletedAt <span class="string">`gorm:&quot;index&quot;`</span>  </span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于正常结构体可以使用embedded标签嵌入：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Author <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="type">string</span></span><br><span class="line">    Email <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID      <span class="type">int</span></span><br><span class="line">  Author  Author <span class="string">`gorm:&quot;embedded&quot;`</span></span><br><span class="line">  Upvotes <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID    <span class="type">int64</span></span><br><span class="line">  Name  <span class="type">string</span></span><br><span class="line">  Email <span class="type">string</span></span><br><span class="line">  Upvotes  <span class="type">int32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>gorm.Model：</p>
<p>GORM 定义一个 <code>gorm.Model</code> 结构体，其包括字段 <code>ID</code>、<code>CreatedAt</code>、<code>UpdatedAt</code>、<code>DeletedAt</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gorm.Model 的定义</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">uint</span>           <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  UpdatedAt time.Time</span><br><span class="line">  DeletedAt gorm.DeletedAt <span class="string">`gorm:&quot;index&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以通过给字段添加标签，设置诸如主键自增等功能，具体标签查看文档</p>
<h1 id="三、创建"><a href="#三、创建" class="headerlink" title="三、创建"></a>三、创建</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Create(&amp;user)		<span class="comment">//创建数据</span></span><br><span class="line">db.NewRecord(&amp;user)		<span class="comment">//判断主键是否为空，即判断是否存在此记录</span></span><br></pre></td></tr></table></figure>

<p>默认值：设置标签，当该字段没有传入值时，将使用默认值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id       <span class="type">string</span></span><br><span class="line">	Password <span class="type">int</span></span><br><span class="line">    Username <span class="type">string</span> <span class="string">`gorm:&quot;default:&#x27;zhangsan&#x27;&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置默认之后，如果传入了对应数据的类型的零值，gorm将会使用默认值替换零值</p>
<p>解决措施：</p>
<ol>
<li><p>结构体对应字段的类型设置为指针类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Name        *<span class="type">string</span>  </span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Scanner&#x2F;Valuer</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Name		Sql.NullString</span><br></pre></td></tr></table></figure>

<p>Sql.NullString为一个结构体，当Valid为true时，传入零值也不会被默认值替换，其他数据类型同理</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> NullString <span class="keyword">struct</span> &#123;</span><br><span class="line">    tring <span class="type">string</span></span><br><span class="line">	Valid  <span class="type">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="四、查询"><a href="#四、查询" class="headerlink" title="四、查询"></a>四、查询</h1><p>简单查询可以使用下列方法，复杂查询建议使用原生SQL</p>
<p>一般查询:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line"><span class="keyword">var</span> users []User</span><br><span class="line"><span class="comment">//根据主键查询第一条记录</span></span><br><span class="line">db.First(&amp;user)</span><br><span class="line"><span class="comment">//随机查询一条记录</span></span><br><span class="line">db.Take(&amp;user)</span><br><span class="line"><span class="comment">//根据主键查询最后一条记录</span></span><br><span class="line">ab.Last(&amp;user)</span><br><span class="line"><span class="comment">//查询所有记录</span></span><br><span class="line">db.Find(&amp;users)</span><br><span class="line"><span class="comment">//查询指定某条记录，当主键为整形时可用</span></span><br><span class="line">db.First(&amp;user, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//查询第一个，没有则按照条件生成一个</span></span><br><span class="line">db.FirstOrInit(&amp;user, User&#123;Name: <span class="string">&quot;zhangsan&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>where条件查询：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>).First(&amp;user)</span><br><span class="line">db.Where(<span class="string">&quot;name in (?)&quot;</span>, []<span class="type">string</span>&#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line">db.Where(<span class="string">&quot;name like ?&quot;</span>, <span class="string">&quot;%shangsan&quot;</span>).Find(&amp;users)</span><br><span class="line">db.Where(<span class="string">&quot;name = ? and age &gt; ?&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>. <span class="string">&quot;22&quot;</span>).Fins(&amp;users)</span><br><span class="line">db.Where(<span class="string">&quot;created_at &gt; ?&quot;</span>, day).Find(&amp;user)	<span class="comment">//day为time.Time类型</span></span><br></pre></td></tr></table></figure>

<p>struct和map查询：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(User&#123;Name: <span class="string">&quot;zhangsan&quot;</span>, Age: <span class="number">18</span>&#125;).Find(&amp;users)</span><br><span class="line">db.Where(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;).Find(&amp;users)</span><br><span class="line">db.Where([]<span class="type">int64</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).Find(&amp;users)	<span class="comment">//传入主键的切片</span></span><br></pre></td></tr></table></figure>

<p>当传入结构体查询时，字段值为零值时，这些字段不会用于构建查询条件</p>
<p>not条件查询：</p>
<p>排除条件，使用同where</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Not([]<span class="type">int64</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).Find(&amp;users) <span class="comment">//查询主键字段不在1，2,3的记录</span></span><br></pre></td></tr></table></figure>

<p>or条件查询：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name = zhangsan&quot;</span>).Or(User&#123;Name: <span class="string">&quot;lisi&quot;</span>&#125;).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<p>内联查询：将查询条件直接写在会立即生成SQL语句的方法里面</p>
<p>Attrs:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//条件查询第一条记录，如果没有查询到记录，则会使用Attrs中的数据更新结构体</span></span><br><span class="line">db.Where(User&#123;Username: <span class="string">&quot;zhangsan&quot;</span>&#125;).Attrs(User&#123;Password: <span class="number">234</span>&#125;).FirstOrInit(&amp;user)</span><br></pre></td></tr></table></figure>

<p>Assign：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//条件查询第一条记录，无论是否查询到数据, 都会使用Assign中的数据更新结构体</span></span><br><span class="line">db.Where(User&#123;Username: <span class="string">&quot;zhangsan&quot;</span>&#125;).Assign(User&#123;Password: <span class="number">234</span>&#125;).FirstOrInit(&amp;user)</span><br></pre></td></tr></table></figure>

<p>FirstOrCreate：匹配第一条记录，如果没有匹配到则创建一条记录</p>
<p>查询字段：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Select(<span class="string">&quot;name as username, age&quot;</span>).Find(&amp;users)</span><br><span class="line">db.Select([]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line">db.Select(<span class="string">&quot;?&quot;</span>, )</span><br></pre></td></tr></table></figure>

<p>子查询：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于select * from &#x27;user&#x27; where id in (select age from &#x27;user&#x27; where age &gt; 18)</span></span><br><span class="line">db.Where(<span class="string">&quot;id in ?&quot;</span>, db.Table(<span class="string">&quot;user&quot;</span>).Select(<span class="string">&quot;age&quot;</span>).Where(<span class="string">&quot;age &gt; 18&quot;</span>).QueryExpr())</span><br></pre></td></tr></table></figure>

<p>排序：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Order(<span class="string">&quot;name desc&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//覆盖排序，执行第二条Sql时将覆盖前面的排序</span></span><br><span class="line"><span class="comment">//等价于：</span></span><br><span class="line"><span class="comment">//select * from user order by name</span></span><br><span class="line"><span class="comment">//select * from user order by age</span></span><br><span class="line">db.Order(<span class="string">&quot;name&quot;</span>).Find(&amp;users).Order(<span class="string">&quot;age&quot;</span>, <span class="literal">true</span>).Find(&amp;users1)</span><br></pre></td></tr></table></figure>

<p>Limit：指定检索出的记录条数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Limit(<span class="number">3</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<p>偏移：指定返回记录时跳过的条数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Offset(<span class="number">3</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//-1表示取消偏移</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="comment">//select * from user offset 3</span></span><br><span class="line"><span class="comment">//select * from user</span></span><br><span class="line">db.Offset(<span class="number">3</span>).Find(&amp;users).Offset(<span class="number">-1</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<p>count：立即执行方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//count()必须时链式查询的最后一个操作，他会覆盖前面的select</span></span><br><span class="line">db.Where(<span class="string">&quot;age &gt; 10&quot;</span>).Find(&amp;users).Count(&amp;count)</span><br></pre></td></tr></table></figure>

<p>连接查询：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Select(<span class="string">&quot;user.name, email.email&quot;</span>).Joins(<span class="string">&quot;left join email on email.user_id = user.id&quot;</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<p>单独查询一个列：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询一个列并返回一个切片</span></span><br><span class="line">db.Find(&amp;users).Pluck(<span class="string">&quot;age&quot;</span>, &amp;ages)</span><br></pre></td></tr></table></figure>

<p>scan：扫描结果至一个结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">db.Table(<span class="string">&quot;user&quot;</span>).Select(<span class="string">&quot;name, age&quot;</span>).Scan(&amp;result)</span><br></pre></td></tr></table></figure>

<p>原生SQL：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Row(<span class="string">&quot;select name, age from uer where name = ?&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>).Scan(&amp;result)</span><br></pre></td></tr></table></figure>

<p>链式操作：</p>
<p>除了crud方法，其他方法如<code>db.Where()</code>不会立即执行语句，可以在其基础上再增加条件，最后再执行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tx := db.Where(<span class="string">&quot;age &gt; 18&quot;</span>)</span><br><span class="line">tx = tx.Where(<span class="string">&quot;name = ?&quot;</span>, zhangsan)</span><br><span class="line">tx.Find(&amp;users)</span><br></pre></td></tr></table></figure>

<p>范围：</p>
<p>scopes，建立在链式操作基础上，抽取通用逻辑，重复利用代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AgeGreaterThan18</span><span class="params">(db *gorm.DB)</span></span> *gotm.DB &#123;</span><br><span class="line">    <span class="keyword">return</span> db.Where(<span class="string">&quot;age &gt; 18&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Scopes内可以传入多个参数</span></span><br><span class="line">db.Scopes(AgeGreaterThan18).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<p>多个立即执行方法：在执行多个立即执行方法时，后一个立即执行方法会复用第一个立即执行方法（不包含内联条件）</p>
<h1 id="五、更新"><a href="#五、更新" class="headerlink" title="五、更新"></a>五、更新</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新所有字段</span></span><br><span class="line">db.Save()</span><br><span class="line"><span class="comment">//更新指定字段</span></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lisi&quot;</span>)</span><br><span class="line"><span class="comment">//更新多个字段，只有属性变化才会更新，传入结构体时，结构体必须为非零值</span></span><br><span class="line">db.Model(&amp;user).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;shangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">//更新选中字段</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;name&quot;</span>).Updates(<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>)</span><br><span class="line"><span class="comment">//忽略选中字段</span></span><br><span class="line">db.Model(&amp;user).Omit(<span class="string">&quot;name&quot;</span>).Updates(<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>)</span><br><span class="line"><span class="comment">//无Hooks更新</span></span><br><span class="line">db.Model(&amp;user).UpdateColumns(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="comment">//批量更新，钩子函数也不会执行</span></span><br><span class="line">db.Model(User&#123;&#125;).Where(<span class="string">&quot;id in (?)&quot;</span>, []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">11</span>&#125;).Updates()</span><br><span class="line"><span class="comment">//返回影响条数</span></span><br><span class="line">db.Model(User&#123;&#125;).Where(<span class="string">&quot;id in (?)&quot;</span>, []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">11</span>&#125;).Updates().RowsAffected</span><br></pre></td></tr></table></figure>

<h1 id="六、删除"><a href="#六、删除" class="headerlink" title="六、删除"></a>六、删除</h1><p>gorm通过主键字段删除记录，如果主键为空，则会删除所有值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Delete(&amp;user)</span><br><span class="line"><span class="comment">//批量删除</span></span><br><span class="line">db.Where(<span class="string">&quot;id in (?)&quot;</span>, []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).Delete(User&#123;&#125;)</span><br><span class="line"><span class="comment">//软删除，如果一个模型由DeleteAt字段，调用Delete方法时将执行软删除，不会真正删除记录，只会为该字段赋值</span></span><br><span class="line"><span class="comment">//查询软删除记录</span></span><br><span class="line">db.Unscoped().Where(<span class="string">&quot;age = 20&quot;</span>).Find(&amp;user)</span><br><span class="line"><span class="comment">//物理删除</span></span><br><span class="line">db.Unscoped().Delete(&amp;user)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>web后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引</title>
    <url>/2022/08/13/MySQL%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h1><p>索引是存储引擎用于快速找到记录的一种数据结构，当数据量比较大时，索引对性能影响起着至关重要的作用，对索引的优化是对查询性能优化最有效的手段</p>
<span id="more"></span>

<h1 id="2-索引基础"><a href="#2-索引基础" class="headerlink" title="2 索引基础"></a>2 索引基础</h1><p>索引的工作原理，类似于书籍的索引部分，在书的索引上找到某个特定主题，再去寻找对应的页码。比如今天想看关于高数无穷级数的概念，先通过索引找到无穷级数章节，找到概念部分，进而找到对应的页码。显然这种方式查找数据比从头开始遍历快速许多</p>
<p>在MySQL中，存储引擎使用类似的方法使用索引，先在索引中找到对应的值，根据匹配的索引记录找到对应的数据行</p>
<p>索引可以包含一个或者多个列的值，列的顺序对于索引的效率十分重要，因为MySQL只能高效利用索引的最左前缀列即最左侧的列。</p>
<p>最左前缀匹配原则：在MySQL建立联合索引时会遵守最左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p>
<h2 id="2-1-索引类型"><a href="#2-1-索引类型" class="headerlink" title="2.1 索引类型"></a>2.1 索引类型</h2><p>在MySQL中，不同的存储引擎的索引工作方式不一样，也不是所有的存储引擎都支持所有类型的索引，即使多个存储引擎支持同一种类型，其底层实现也可能不同</p>
<h3 id="2-1-1-B-Tree索引"><a href="#2-1-1-B-Tree索引" class="headerlink" title="2.1.1 B-Tree索引"></a>2.1.1 B-Tree索引</h3><p>一般在谈论索引时，如无特别说明，通常都是说的B-Tree索引，其底层使用B-Tree存储数据（实际上很多存储引擎使用的时B+Tree，即每一个叶节点都包含下一个叶节点的指针）B-Tree意味着所有的值都是按顺序存储，且每一个叶子页到根的距离相同。</p>
<p>有了BTree存储索引，存储引擎不再需要全表查询，从索引的根节点开始查询，通过根节点槽中指向子节点指针，从上往下依次查询，通过比较需要查询的值和节点页的值找到合适的指针进入下层节点，这些指针实际上定义了子节点页值的上下限。叶子节点的指针指向被索引的数据而不是其他的节点页。B-Tree对于索引列时按顺序组织存储的，所以很适合查询范围数据。索引对于多个值进行排序的依据是建表时定义索引的顺序</p>
<p>B-Tree索引的查询类型：</p>
<ol>
<li>全值匹配：和索引的所有列进行匹配</li>
<li>匹配最左前缀：只使用索引的第一列</li>
<li>匹配列前缀：匹配某一列值的开头部分</li>
<li>匹配范围值：可以匹配在一定返回内的值</li>
<li>精确匹配某一列并范围匹配另一列：一列全匹配，另一列进行范围匹配</li>
<li>只访问索引的查询：查询只需访问索引，而无序访问数据行</li>
</ol>
<p>索引数中的节点时有序的，索引还可以用于查询中的OrderBy操作</p>
<p>B-Tree索引的限制：</p>
<ol>
<li>如果不是按照索引的最左列开始查找，则无法使用索引</li>
<li>不能跳过索引中的列，即如果指定了最左侧索引并且跳过了中间的部分索引，则无法使用索引</li>
<li>查询中存在某个列的范围查询，则其右侧的列都无法使用索引</li>
</ol>
<h3 id="2-1-2-哈希索引"><a href="#2-1-2-哈希索引" class="headerlink" title="2.1.2 哈希索引"></a>2.1.2 哈希索引</h3><p>哈希索引基于哈希实现，只有精确匹配索引的所有列的查询才有效。</p>
<p>对于每一行数据，存储引擎都会对所有的索引计算一个哈希值，哈希索引将所有的哈希值存储在索引中，同时在哈希表中保存指向每个数据行的指针。如果多个列哈希值相同，索引会使用链表的方式存放多个记录指针到同一个哈希条目中</p>
<p>在MySQL中只有Memory引擎显示支持哈希索引</p>
<p>在查询数据时，先计算索引的哈希值，找到对应的记录指针，最后比较查询到的值是否等于要查询的值</p>
<p>哈希索引的限制：</p>
<ol>
<li>哈希索引只包含哈希值和对应记录的指针，不存储字段，因此不能使用哈希索引中的值来避免读取行</li>
<li>哈希索引无法用于排序</li>
<li>哈希索引也不支持部分索引列的匹配查找</li>
<li>哈希索引只支持等值查询，不支持任何范围查询</li>
</ol>
<p>InnoDB中有一个特殊功能称为自适应哈希索引，当某些索引值使用频繁时，会在B-Tree的基础上创建一个哈希索引</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>go-jwt</title>
    <url>/2022/08/14/jwt-go/</url>
    <content><![CDATA[<h1 id="1-JWT概述"><a href="#1-JWT概述" class="headerlink" title="1 JWT概述"></a>1 JWT概述</h1><p>Json Web Token，不需要缓存的身份验证工具</p>
<p>JWT 本质上就是一组字串，通过（<code>.</code>）切分成三个为 Base64 编码的部分：</p>
<ul>
<li>Header : 描述 JWT 的元数据，定义了生成签名的算法以及 <code>Token</code> 的类型。</li>
<li>Payload（claim) : 用来存放实际需要传递的数据</li>
<li>Signature（签名）：服务器通过 Payload、Header 和一个密钥(Secret)使用 Header 里面指定的签名算法（默认是 HMAC SHA256）生成。</li>
</ul>
<p>JWT 通常是这样的：xxxxx.yyyyy.zzzzz</p>
<h2 id="Header："><a href="#Header：" class="headerlink" title="Header："></a>Header：</h2><p>Header 通常由两部分组成：</p>
<ul>
<li><code>typ</code>（Type）：令牌类型，也就是 JWT。</li>
<li><code>alg</code>（Algorithm） ：签名算法，比如 HS256。</li>
</ul>
<p>JSON 形式的 Header 被转换成 Base64 编码，成为 JWT 的第一部分</p>
<h2 id="Payload："><a href="#Payload：" class="headerlink" title="Payload："></a>Payload：</h2><p>Payload 也是 JSON 格式数据，其中包含了 Claims(声明，包含 JWT 的相关信息)。</p>
<p>Claims 分为三种类型：</p>
<ul>
<li>Registered Claims（注册声明） ：预定义的一些声明，建议使用，但不是强制性的。</li>
<li>Public Claims（公有声明） ：JWT 签发方可以自定义的声明，但是为了避免冲突，应该在 <a href="https://www.iana.org/assignments/jwt/jwt.xhtml">IANA JSON Web Token Registryopen in new window</a> 中定义它们。</li>
<li>Private Claims（私有声明） ：JWT 签发方因为项目需要而自定义的声明，更符合实际项目场景使用。</li>
</ul>
<p>下面是一些常见的注册声明：</p>
<ul>
<li><code>iss</code>（issuer）：JWT 签发方。</li>
<li><code>iat</code>（issued at time）：JWT 签发时间。</li>
<li><code>sub</code>（subject）：JWT 主题。</li>
<li><code>aud</code>（audience）：JWT 接收方。</li>
<li><code>exp</code>（expiration time）：JWT 的过期时间。</li>
<li><code>nbf</code>（not before time）：JWT 生效时间，早于该定义的时间的 JWT 不能被接受处理。</li>
<li><code>jti</code>（JWT ID）：JWT 唯一标识。</li>
</ul>
<p>Payload 部分默认是不加密的，一定不要将隐私信息存放在 Payload 当中</p>
<p>JSON 形式的 Payload 被转换成 Base64 编码，成为 JWT 的第二部分</p>
<h2 id="Signature："><a href="#Signature：" class="headerlink" title="Signature："></a>Signature：</h2><p>Signature 部分是对前两部分的签名，作用是防止 JWT（主要是 payload） 被篡改。</p>
<p>这个签名的生成需要用到：</p>
<ul>
<li>Header + Payload。</li>
<li>存放在服务端的密钥(一定不要泄露出去)。</li>
<li>签名算法。</li>
</ul>
<p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（<code>.</code>）分隔，这个字符串就是 JWT 。</p>
<h2 id="jwt验证流程"><a href="#jwt验证流程" class="headerlink" title="jwt验证流程"></a>jwt验证流程</h2><ol>
<li>用户向服务器发送用户名、密码以及验证码用于登陆系统。</li>
<li>如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的 Token，也就是 JWT。</li>
<li>用户以后每次向后端发请求都在 Header 中带上这个 JWT 。</li>
<li>服务端检查 JWT 并从中获取用户相关信息。</li>
</ol>
<h1 id="2-jwt-go"><a href="#2-jwt-go" class="headerlink" title="2 jwt-go"></a>2 jwt-go</h1><p>创建JWT</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyClaims <span class="keyword">struct</span> &#123;</span><br><span class="line">	jwt.StandardClaims</span><br><span class="line">	Username <span class="type">string</span> <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createToken</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	c := MyClaims&#123;</span><br><span class="line">		Username: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">		StandardClaims: jwt.StandardClaims&#123;</span><br><span class="line">			NotBefore: time.Now().Unix(),           <span class="comment">//生效时间</span></span><br><span class="line">			ExpiresAt: time.Now().Unix() + <span class="number">60</span>*<span class="number">60</span>*<span class="number">2</span>, <span class="comment">//过期时间</span></span><br><span class="line">			Issuer:    <span class="string">&quot;BigRunFaFishKiller&quot;</span>,        <span class="comment">//签发人</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//生成一个token，传入加密方法和实现了claim接口的类型</span></span><br><span class="line">	<span class="comment">//默认实现了claim的类型有：</span></span><br><span class="line">	<span class="comment">//1.map[string]interface</span></span><br><span class="line">	<span class="comment">//2.jwt-go提供的StandardClaims结构体</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//常用加密方式有HS256，RS256</span></span><br><span class="line">	token := jwt.NewWithClaims(jwt.SigningMethodHS256, c)</span><br><span class="line">	<span class="comment">//加密</span></span><br><span class="line">	mySigningKey := []<span class="type">byte</span>(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">	signature, err := token.SignedString(mySigningKey)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> signature</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解析jwt</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseToken</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="comment">//传入token、token的模板、以及返回加密串和错误的函数</span></span><br><span class="line">	parseToken, err := jwt.ParseWithClaims(s, &amp;MyClaims&#123;&#125;, <span class="function"><span class="keyword">func</span><span class="params">(t *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> []<span class="type">byte</span>(<span class="string">&quot;key&quot;</span>), <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//类型断言，并返回需要的数据</span></span><br><span class="line">		<span class="keyword">return</span> parseToken.Claims.(*MyClaims).Username</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>零散技术</tag>
      </tags>
  </entry>
  <entry>
    <title>go项目部署</title>
    <url>/2022/08/19/go%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>记一次go项目部署，使用项目为gin-vue-admin</p>
<p><a href="https://github.com/flipped-aurora/gin-vue-admin">flipped-aurora&#x2F;gin-vue-admin: 基于vite+vue3+gin搭建的开发基础平台（支持TS,JS混用），集成jwt鉴权，权限管理，动态路由，显隐可控组件，分页封装，多点登录拦截，资源权限，上传下载，代码生成器，表单生成器等开发必备功能。 (github.com)</a></p>
<h1 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h1><p>后端：修改conf.yml文件，配置redis，配置数据库（本项目可自动初始化数据库），以及端口号等</p>
<p>前端：修改.env.production文件</p>
<h1 id="二、打包"><a href="#二、打包" class="headerlink" title="二、打包"></a>二、打包</h1><p>后端：</p>
<ol>
<li><p>交叉编译，得到二进制文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">GOOS=linux </span><br><span class="line">GOARCH=amd64 </span><br><span class="line"><span class="keyword">go</span> build</span><br></pre></td></tr></table></figure>
</li>
<li><p>打包：将二进制文件，conf.yml,，resource目录打包为压缩文件</p>
</li>
</ol>
<p>前端：执行<code>npm run build</code></p>
<p>将前后端文件打包为一个压缩包</p>
<h1 id="三、部署"><a href="#三、部署" class="headerlink" title="三、部署"></a>三、部署</h1><p>将压缩包上传到linux服务器并解压</p>
<p>后端：</p>
<ol>
<li>添加二进制文件执行权<code>chmod -x xxx</code></li>
<li>执行文件<code>./XXX</code></li>
</ol>
<p>前端：</p>
<ol>
<li>修改nginx配置文件</li>
<li>执行项目<code>npm run dev</code></li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>零散技术</tag>
      </tags>
  </entry>
</search>
